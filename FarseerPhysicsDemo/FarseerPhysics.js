/**
 * @version 1.0.0.0
 * @copyright Copyright Â©  2018
 * @compiler Bridge.NET 17.2.0
 */
Bridge.assembly("FarseerPhysics", function ($asm, globals) {
    "use strict";

    Bridge.define("Element$1", function (T) { return {
        fields: {
            Parent: null,
            Span: null,
            Value: Bridge.getDefaultValue(T)
        },
        ctors: {
            init: function () {
                this.Span = new FarseerPhysics.Collision.AABB();
            },
            ctor: function (value, span) {
                this.$initialize();
                this.Span = span.$clone();
                this.Value = value;
                this.Parent = null;
            }
        }
    }; });

    /** @namespace FarseerPhysics.Collision */

    /**
     * An axis aligned bounding box.
     *
     * @public
     * @class FarseerPhysics.Collision.AABB
     */
    Bridge.define("FarseerPhysics.Collision.AABB", {
        $kind: "struct",
        statics: {
            fields: {
                _input: null
            },
            ctors: {
                init: function () {
                    this._input = new FarseerPhysics.Collision.DistanceInput();
                }
            },
            methods: {
                TestOverlap: function (a, b) {
                    a = {v:a};
                    b = {v:b};
                    return FarseerPhysics.Collision.AABB.TestOverlap$1(a, b);
                },
                TestOverlap$1: function (a, b) {
                    var d1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(b.v.LowerBound.$clone(), a.v.UpperBound.$clone());
                    var d2 = Microsoft.Xna.Framework.Vector2.op_Subtraction(a.v.LowerBound.$clone(), b.v.UpperBound.$clone());

                    if (d1.X > 0.0 || d1.Y > 0.0) {
                        return false;
                    }

                    if (d2.X > 0.0 || d2.Y > 0.0) {
                        return false;
                    }

                    return true;
                },
                TestOverlap$2: function (shapeA, indexA, shapeB, indexB, xfA, xfB) {
                    FarseerPhysics.Collision.AABB._input.ProxyA.Set(shapeA, indexA);
                    FarseerPhysics.Collision.AABB._input.ProxyB.Set(shapeB, indexB);
                    FarseerPhysics.Collision.AABB._input.TransformA = xfA.v.$clone();
                    FarseerPhysics.Collision.AABB._input.TransformB = xfB.v.$clone();
                    FarseerPhysics.Collision.AABB._input.UseRadii = true;

                    var cache = { v : new FarseerPhysics.Collision.SimplexCache() };
                    var output = { v : new FarseerPhysics.Collision.DistanceOutput() };
                    FarseerPhysics.Collision.Distance.ComputeDistance(output, cache, FarseerPhysics.Collision.AABB._input);

                    return output.v.Distance < 1.1920929E-06;
                },
                getDefaultValue: function () { return new FarseerPhysics.Collision.AABB(); }
            }
        },
        fields: {
            /**
             * The lower vertex
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.AABB
             * @type Microsoft.Xna.Framework.Vector2
             */
            LowerBound: null,
            /**
             * The upper vertex
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.AABB
             * @type Microsoft.Xna.Framework.Vector2
             */
            UpperBound: null
        },
        props: {
            /**
             * Get the center of the AABB.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Collision.AABB
             * @function Center
             * @type Microsoft.Xna.Framework.Vector2
             */
            Center: {
                get: function () {
                    return Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, (Microsoft.Xna.Framework.Vector2.op_Addition(this.LowerBound.$clone(), this.UpperBound.$clone())));
                }
            },
            /**
             * Get the extents of the AABB (half-widths).
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Collision.AABB
             * @function Extents
             * @type Microsoft.Xna.Framework.Vector2
             */
            Extents: {
                get: function () {
                    return Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, (Microsoft.Xna.Framework.Vector2.op_Subtraction(this.UpperBound.$clone(), this.LowerBound.$clone())));
                }
            },
            /**
             * Get the perimeter length
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Collision.AABB
             * @function Perimeter
             * @type number
             */
            Perimeter: {
                get: function () {
                    var wx = this.UpperBound.X - this.LowerBound.X;
                    var wy = this.UpperBound.Y - this.LowerBound.Y;
                    return 2.0 * (wx + wy);
                }
            },
            /**
             * Gets the vertices of the AABB.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Collision.AABB
             * @function Vertices
             * @type FarseerPhysics.Common.Vertices
             */
            Vertices: {
                get: function () {
                    var vertices = new FarseerPhysics.Common.Vertices.ctor();
                    vertices.add(this.LowerBound.$clone());
                    vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(this.LowerBound.X, this.UpperBound.Y));
                    vertices.add(this.UpperBound.$clone());
                    vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(this.UpperBound.X, this.LowerBound.Y));
                    return vertices;
                }
            },
            /**
             * first quadrant
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Collision.AABB
             * @function Q1
             * @type FarseerPhysics.Collision.AABB
             */
            Q1: {
                get: function () {
                    return new FarseerPhysics.Collision.AABB.$ctor1(this.Center.$clone(), this.UpperBound.$clone());
                }
            },
            Q2: {
                get: function () {
                    return new FarseerPhysics.Collision.AABB.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(this.LowerBound.X, this.Center.Y), new Microsoft.Xna.Framework.Vector2.$ctor2(this.Center.X, this.UpperBound.Y));
                }
            },
            Q3: {
                get: function () {
                    return new FarseerPhysics.Collision.AABB.$ctor1(this.LowerBound.$clone(), this.Center.$clone());
                }
            },
            Q4: {
                get: function () {
                    return new FarseerPhysics.Collision.AABB.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(this.Center.X, this.LowerBound.Y), new Microsoft.Xna.Framework.Vector2.$ctor2(this.UpperBound.X, this.Center.Y));
                }
            }
        },
        ctors: {
            init: function () {
                this.LowerBound = new Microsoft.Xna.Framework.Vector2();
                this.UpperBound = new Microsoft.Xna.Framework.Vector2();
            },
            $ctor1: function (min, max) {
                FarseerPhysics.Collision.AABB.$ctor3.call(this, min, max);
            },
            $ctor3: function (min, max) {
                this.$initialize();
                this.LowerBound = min.v.$clone();
                this.UpperBound = max.v.$clone();
            },
            $ctor2: function (center, width, height) {
                this.$initialize();
                this.LowerBound = Microsoft.Xna.Framework.Vector2.op_Subtraction(center.$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(width / 2, height / 2));
                this.UpperBound = Microsoft.Xna.Framework.Vector2.op_Addition(center.$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(width / 2, height / 2));
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            GetVertices: function () {
                var p1 = this.UpperBound.$clone();
                var p2 = new Microsoft.Xna.Framework.Vector2.$ctor2(this.UpperBound.X, this.LowerBound.Y);
                var p3 = this.LowerBound.$clone();
                var p4 = new Microsoft.Xna.Framework.Vector2.$ctor2(this.LowerBound.X, this.UpperBound.Y);
                return System.Array.init([p1.$clone(), p2.$clone(), p3.$clone(), p4.$clone()], Microsoft.Xna.Framework.Vector2);
            },
            /**
             * Verify that the bounds are sorted.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.AABB
             * @memberof FarseerPhysics.Collision.AABB
             * @return  {boolean}        <pre><code>true</code></pre> if this instance is valid; otherwise, <pre><code>false</code></pre>.
             */
            IsValid: function () {
                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.UpperBound.$clone(), this.LowerBound.$clone());
                var valid = d.X >= 0.0 && d.Y >= 0.0;
                valid = valid && FarseerPhysics.Common.MathUtils.IsValid(this.LowerBound) && FarseerPhysics.Common.MathUtils.IsValid(this.UpperBound);
                return valid;
            },
            /**
             * Combine an AABB into this one.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.AABB
             * @memberof FarseerPhysics.Collision.AABB
             * @param   {FarseerPhysics.Collision.AABB}    aabb    The aabb.
             * @return  {void}
             */
            Combine: function (aabb) {
                this.LowerBound = Microsoft.Xna.Framework.Vector2.Min(this.LowerBound.$clone(), aabb.v.LowerBound.$clone());
                this.UpperBound = Microsoft.Xna.Framework.Vector2.Max(this.UpperBound.$clone(), aabb.v.UpperBound.$clone());
            },
            /**
             * Combine two AABBs into this one.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.AABB
             * @memberof FarseerPhysics.Collision.AABB
             * @param   {FarseerPhysics.Collision.AABB}    aabb1    The aabb1.
             * @param   {FarseerPhysics.Collision.AABB}    aabb2    The aabb2.
             * @return  {void}
             */
            Combine$1: function (aabb1, aabb2) {
                this.LowerBound = Microsoft.Xna.Framework.Vector2.Min(aabb1.v.LowerBound.$clone(), aabb2.v.LowerBound.$clone());
                this.UpperBound = Microsoft.Xna.Framework.Vector2.Max(aabb1.v.UpperBound.$clone(), aabb2.v.UpperBound.$clone());
            },
            /**
             * Does this aabb contain the provided AABB.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.AABB
             * @memberof FarseerPhysics.Collision.AABB
             * @param   {FarseerPhysics.Collision.AABB}    aabb    The aabb.
             * @return  {boolean}                                  <pre><code>true</code></pre> if it contains the specified aabb; otherwise, <pre><code>false</code></pre>.
             */
            Contains: function (aabb) {
                var result = true;
                result = result && this.LowerBound.X <= aabb.v.LowerBound.X;
                result = result && this.LowerBound.Y <= aabb.v.LowerBound.Y;
                result = result && aabb.v.UpperBound.X <= this.UpperBound.X;
                result = result && aabb.v.UpperBound.Y <= this.UpperBound.Y;
                return result;
            },
            /**
             * Determines whether the AAABB contains the specified point.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.AABB
             * @memberof FarseerPhysics.Collision.AABB
             * @param   {Microsoft.Xna.Framework.Vector2}    point    The point.
             * @return  {boolean}                                     <pre><code>true</code></pre> if it contains the specified point; otherwise, <pre><code>false</code></pre>.
             */
            Contains$1: function (point) {
                if ((point.v.X > (this.LowerBound.X + FarseerPhysics.Settings.Epsilon) && point.v.X < (this.UpperBound.X - FarseerPhysics.Settings.Epsilon) && (point.v.Y > (this.LowerBound.Y + FarseerPhysics.Settings.Epsilon) && point.v.Y < (this.UpperBound.Y - FarseerPhysics.Settings.Epsilon)))) {
                    return true;
                }
                return false;
            },
            RayCast: function (output, input) {
                output.v = new FarseerPhysics.Collision.RayCastOutput();

                var tmin = -3.40282347E+38;
                var tmax = FarseerPhysics.Settings.MaxFloat;

                var p = input.v.Point1.$clone();
                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(input.v.Point2.$clone(), input.v.Point1.$clone());
                var absD = FarseerPhysics.Common.MathUtils.Abs(d.$clone());

                var normal = Microsoft.Xna.Framework.Vector2.Zero.$clone();

                for (var i = 0; i < 2; i = (i + 1) | 0) {
                    var absD_i = i === 0 ? absD.X : absD.Y;
                    var lowerBound_i = i === 0 ? this.LowerBound.X : this.LowerBound.Y;
                    var upperBound_i = i === 0 ? this.UpperBound.X : this.UpperBound.Y;
                    var p_i = i === 0 ? p.X : p.Y;

                    if (absD_i < FarseerPhysics.Settings.Epsilon) {
                        if (p_i < lowerBound_i || upperBound_i < p_i) {
                            return false;
                        }
                    } else {
                        var d_i = i === 0 ? d.X : d.Y;

                        var inv_d = 1.0 / d_i;
                        var t1 = { v : (lowerBound_i - p_i) * inv_d };
                        var t2 = { v : (upperBound_i - p_i) * inv_d };

                        var s = -1.0;

                        if (t1.v > t2.v) {
                            FarseerPhysics.Common.MathUtils.Swap(System.Single, t1, t2);
                            s = 1.0;
                        }

                        if (t1.v > tmin) {
                            if (i === 0) {
                                normal.X = s;
                            } else {
                                normal.Y = s;
                            }

                            tmin = t1.v;
                        }

                        tmax = Math.min(tmax, t2.v);

                        if (tmin > tmax) {
                            return false;
                        }
                    }
                }

                if (tmin < 0.0 || input.v.MaxFraction < tmin) {
                    return false;
                }

                output.v.Fraction = tmin;
                output.v.Normal = normal.$clone();
                return true;
            },
            getHashCode: function () {
                var h = Bridge.addHash([1111638337, this.LowerBound, this.UpperBound]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.AABB)) {
                    return false;
                }
                return Bridge.equals(this.LowerBound, o.LowerBound) && Bridge.equals(this.UpperBound, o.UpperBound);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.AABB();
                s.LowerBound = this.LowerBound.$clone();
                s.UpperBound = this.UpperBound.$clone();
                return s;
            }
        }
    });

    /**
     * Used for computing contact manifolds.
     *
     * @public
     * @class FarseerPhysics.Collision.ClipVertex
     */
    Bridge.define("FarseerPhysics.Collision.ClipVertex", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.ClipVertex(); }
            }
        },
        fields: {
            ID: null,
            V: null
        },
        ctors: {
            init: function () {
                this.ID = new FarseerPhysics.Collision.ContactID();
                this.V = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3839642110, this.ID, this.V]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.ClipVertex)) {
                    return false;
                }
                return Bridge.equals(this.ID, o.ID) && Bridge.equals(this.V, o.V);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.ClipVertex();
                s.ID = this.ID.$clone();
                s.V = this.V.$clone();
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.Collision", {
        statics: {
            fields: {
                _edgeA: null,
                _proxyA: null,
                _proxyB: null,
                _xf: null,
                _limit11: null,
                _limit12: null,
                _limit21: null,
                _limit22: null,
                _radius: 0,
                _tmpNormals: null
            },
            ctors: {
                init: function () {
                    this._edgeA = new FarseerPhysics.Collision.FatEdge();
                    this._xf = new FarseerPhysics.Common.Transform();
                    this._limit11 = new Microsoft.Xna.Framework.Vector2();
                    this._limit12 = new Microsoft.Xna.Framework.Vector2();
                    this._limit21 = new Microsoft.Xna.Framework.Vector2();
                    this._limit22 = new Microsoft.Xna.Framework.Vector2();
                    this._proxyA = new FarseerPhysics.Collision.EPProxy();
                    this._proxyB = new FarseerPhysics.Collision.EPProxy();
                    this._tmpNormals = System.Array.init(2, function (){
                        return new Microsoft.Xna.Framework.Vector2();
                    }, Microsoft.Xna.Framework.Vector2);
                }
            },
            methods: {
                /**
                 * Evaluate the manifold with supplied transforms. This assumes
                 modest motion from the original state. This does not change the
                 point count, impulses, etc. The radii must come from the Shapes
                 that generated the manifold.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Collision.Collision
                 * @memberof FarseerPhysics.Collision.Collision
                 * @param   {FarseerPhysics.Collision.Manifold}    manifold      The manifold.
                 * @param   {FarseerPhysics.Common.Transform}      transformA    The transform for A.
                 * @param   {number}                               radiusA       The radius for A.
                 * @param   {FarseerPhysics.Common.Transform}      transformB    The transform for B.
                 * @param   {number}                               radiusB       The radius for B.
                 * @param   {Microsoft.Xna.Framework.Vector2}      normal        World vector pointing from A to B
                 * @param   {FarseerPhysics.Common.FixedArray2}    points        Torld contact point (point of intersection).
                 * @return  {void}
                 */
                GetWorldManifold: function (manifold, transformA, radiusA, transformB, radiusB, normal, points) {
                    points.v = new (FarseerPhysics.Common.FixedArray2$1(Microsoft.Xna.Framework.Vector2))();
                    normal.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();

                    if (manifold.v.PointCount === 0) {
                        normal.v = Microsoft.Xna.Framework.Vector2.UnitY.$clone();
                        return;
                    }

                    switch (manifold.v.Type) {
                        case FarseerPhysics.Collision.ManifoldType.Circles: 
                            {
                                var tmp = manifold.v.Points.getItem(0).$clone().LocalPoint.$clone();
                                var pointAx = transformA.v.Position.X + transformA.v.R.Col1.X * manifold.v.LocalPoint.X + transformA.v.R.Col2.X * manifold.v.LocalPoint.Y;

                                var pointAy = transformA.v.Position.Y + transformA.v.R.Col1.Y * manifold.v.LocalPoint.X + transformA.v.R.Col2.Y * manifold.v.LocalPoint.Y;

                                var pointBx = transformB.v.Position.X + transformB.v.R.Col1.X * tmp.X + transformB.v.R.Col2.X * tmp.Y;

                                var pointBy = transformB.v.Position.Y + transformB.v.R.Col1.Y * tmp.X + transformB.v.R.Col2.Y * tmp.Y;

                                normal.v.X = 1;
                                normal.v.Y = 0;

                                var result = (pointAx - pointBx) * (pointAx - pointBx) + (pointAy - pointBy) * (pointAy - pointBy);
                                if (result > 1.42108547E-14) {
                                    var tmpNormalx = pointBx - pointAx;
                                    var tmpNormaly = pointBy - pointAy;
                                    var factor = 1.0 / Math.sqrt(tmpNormalx * tmpNormalx + tmpNormaly * tmpNormaly);
                                    normal.v.X = tmpNormalx * factor;
                                    normal.v.Y = tmpNormaly * factor;
                                }

                                var c = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                                c.X = (pointAx + radiusA * normal.v.X) + (pointBx - radiusB * normal.v.X);
                                c.Y = (pointAy + radiusA * normal.v.Y) + (pointBy - radiusB * normal.v.Y);

                                points.v.setItem(0, Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, c.$clone()));
                            }
                            break;
                        case FarseerPhysics.Collision.ManifoldType.FaceA: 
                            {
                                normal.v.X = transformA.v.R.Col1.X * manifold.v.LocalNormal.X + transformA.v.R.Col2.X * manifold.v.LocalNormal.Y;
                                normal.v.Y = transformA.v.R.Col1.Y * manifold.v.LocalNormal.X + transformA.v.R.Col2.Y * manifold.v.LocalNormal.Y;

                                var planePointx = transformA.v.Position.X + transformA.v.R.Col1.X * manifold.v.LocalPoint.X + transformA.v.R.Col2.X * manifold.v.LocalPoint.Y;

                                var planePointy = transformA.v.Position.Y + transformA.v.R.Col1.Y * manifold.v.LocalPoint.X + transformA.v.R.Col2.Y * manifold.v.LocalPoint.Y;

                                for (var i = 0; i < manifold.v.PointCount; i = (i + 1) | 0) {
                                    var tmp1 = manifold.v.Points.getItem(i).$clone().LocalPoint.$clone();

                                    var clipPointx = transformB.v.Position.X + transformB.v.R.Col1.X * tmp1.X + transformB.v.R.Col2.X * tmp1.Y;

                                    var clipPointy = transformB.v.Position.Y + transformB.v.R.Col1.Y * tmp1.X + transformB.v.R.Col2.Y * tmp1.Y;

                                    var value = (clipPointx - planePointx) * normal.v.X + (clipPointy - planePointy) * normal.v.Y;

                                    var c1 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                                    c1.X = (clipPointx + (radiusA - value) * normal.v.X) + (clipPointx - radiusB * normal.v.X);
                                    c1.Y = (clipPointy + (radiusA - value) * normal.v.Y) + (clipPointy - radiusB * normal.v.Y);

                                    points.v.setItem(i, Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, c1.$clone()));
                                }
                            }
                            break;
                        case FarseerPhysics.Collision.ManifoldType.FaceB: 
                            {
                                normal.v.X = transformB.v.R.Col1.X * manifold.v.LocalNormal.X + transformB.v.R.Col2.X * manifold.v.LocalNormal.Y;
                                normal.v.Y = transformB.v.R.Col1.Y * manifold.v.LocalNormal.X + transformB.v.R.Col2.Y * manifold.v.LocalNormal.Y;

                                var planePointx1 = transformB.v.Position.X + transformB.v.R.Col1.X * manifold.v.LocalPoint.X + transformB.v.R.Col2.X * manifold.v.LocalPoint.Y;

                                var planePointy1 = transformB.v.Position.Y + transformB.v.R.Col1.Y * manifold.v.LocalPoint.X + transformB.v.R.Col2.Y * manifold.v.LocalPoint.Y;

                                for (var i1 = 0; i1 < manifold.v.PointCount; i1 = (i1 + 1) | 0) {
                                    var tmp2 = manifold.v.Points.getItem(i1).$clone().LocalPoint.$clone();

                                    var clipPointx1 = transformA.v.Position.X + transformA.v.R.Col1.X * tmp2.X + transformA.v.R.Col2.X * tmp2.Y;

                                    var clipPointy1 = transformA.v.Position.Y + transformA.v.R.Col1.Y * tmp2.X + transformA.v.R.Col2.Y * tmp2.Y;

                                    var value1 = (clipPointx1 - planePointx1) * normal.v.X + (clipPointy1 - planePointy1) * normal.v.Y;

                                    var c2 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                                    c2.X = (clipPointx1 - radiusA * normal.v.X) + (clipPointx1 + (radiusB - value1) * normal.v.X);
                                    c2.Y = (clipPointy1 - radiusA * normal.v.Y) + (clipPointy1 + (radiusB - value1) * normal.v.Y);

                                    points.v.setItem(i1, Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, c2.$clone()));
                                }
                                normal.v = Microsoft.Xna.Framework.Vector2.op_Multiply$1(normal.v.$clone(), -1);
                            }
                            break;
                        default: 
                            normal.v = Microsoft.Xna.Framework.Vector2.UnitY.$clone();
                            break;
                    }
                },
                GetPointStates: function (state1, state2, manifold1, manifold2) {
                    state1.v = new (FarseerPhysics.Common.FixedArray2$1(FarseerPhysics.Collision.PointState))();
                    state2.v = new (FarseerPhysics.Common.FixedArray2$1(FarseerPhysics.Collision.PointState))();

                    for (var i = 0; i < manifold1.v.PointCount; i = (i + 1) | 0) {
                        var id = manifold1.v.Points.getItem(i).$clone().Id.$clone();

                        state1.v.setItem(i, FarseerPhysics.Collision.PointState.Remove);

                        for (var j = 0; j < manifold2.v.PointCount; j = (j + 1) | 0) {
                            if (manifold2.v.Points.getItem(j).$clone().Id.Key === id.Key) {
                                state1.v.setItem(i, FarseerPhysics.Collision.PointState.Persist);
                                break;
                            }
                        }
                    }

                    for (var i1 = 0; i1 < manifold2.v.PointCount; i1 = (i1 + 1) | 0) {
                        var id1 = manifold2.v.Points.getItem(i1).$clone().Id.$clone();

                        state2.v.setItem(i1, FarseerPhysics.Collision.PointState.Add);

                        for (var j1 = 0; j1 < manifold1.v.PointCount; j1 = (j1 + 1) | 0) {
                            if (manifold1.v.Points.getItem(j1).$clone().Id.Key === id1.Key) {
                                state2.v.setItem(i1, FarseerPhysics.Collision.PointState.Persist);
                                break;
                            }
                        }
                    }
                },
                /**
                 * @static
                 * @public
                 * @this FarseerPhysics.Collision.Collision
                 * @memberof FarseerPhysics.Collision.Collision
                 * @param   {FarseerPhysics.Collision.Manifold}              manifold    
                 * @param   {FarseerPhysics.Collision.Shapes.CircleShape}    circleA     
                 * @param   {FarseerPhysics.Common.Transform}                xfA         
                 * @param   {FarseerPhysics.Collision.Shapes.CircleShape}    circleB     
                 * @param   {FarseerPhysics.Common.Transform}                xfB
                 * @return  {void}
                 */
                CollideCircles: function (manifold, circleA, xfA, circleB, xfB) {
                    manifold.v.PointCount = 0;

                    var pAx = xfA.v.Position.X + xfA.v.R.Col1.X * circleA.Position.X + xfA.v.R.Col2.X * circleA.Position.Y;
                    var pAy = xfA.v.Position.Y + xfA.v.R.Col1.Y * circleA.Position.X + xfA.v.R.Col2.Y * circleA.Position.Y;
                    var pBx = xfB.v.Position.X + xfB.v.R.Col1.X * circleB.Position.X + xfB.v.R.Col2.X * circleB.Position.Y;
                    var pBy = xfB.v.Position.Y + xfB.v.R.Col1.Y * circleB.Position.X + xfB.v.R.Col2.Y * circleB.Position.Y;

                    var distSqr = (pBx - pAx) * (pBx - pAx) + (pBy - pAy) * (pBy - pAy);
                    var radius = circleA.Radius + circleB.Radius;
                    if (distSqr > radius * radius) {
                        return;
                    }

                    manifold.v.Type = FarseerPhysics.Collision.ManifoldType.Circles;
                    manifold.v.LocalPoint = circleA.Position.$clone();
                    manifold.v.LocalNormal = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    manifold.v.PointCount = 1;

                    var p0 = manifold.v.Points.getItem(0).$clone();

                    p0.LocalPoint = circleB.Position.$clone();
                    p0.Id.Key = 0;

                    manifold.v.Points.setItem(0, p0.$clone());
                },
                /**
                 * Compute the collision manifold between a polygon and a circle.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Collision.Collision
                 * @memberof FarseerPhysics.Collision.Collision
                 * @param   {FarseerPhysics.Collision.Manifold}               manifold      The manifold.
                 * @param   {FarseerPhysics.Collision.Shapes.PolygonShape}    polygonA      The polygon A.
                 * @param   {FarseerPhysics.Common.Transform}                 transformA    The transform of A.
                 * @param   {FarseerPhysics.Collision.Shapes.CircleShape}     circleB       The circle B.
                 * @param   {FarseerPhysics.Common.Transform}                 transformB    The transform of B.
                 * @return  {void}
                 */
                CollidePolygonAndCircle: function (manifold, polygonA, transformA, circleB, transformB) {
                    manifold.v.PointCount = 0;

                    var c = new Microsoft.Xna.Framework.Vector2.$ctor2(transformB.v.Position.X + transformB.v.R.Col1.X * circleB.Position.X + transformB.v.R.Col2.X * circleB.Position.Y, transformB.v.Position.Y + transformB.v.R.Col1.Y * circleB.Position.X + transformB.v.R.Col2.Y * circleB.Position.Y);
                    var cLocal = new Microsoft.Xna.Framework.Vector2.$ctor2((c.X - transformA.v.Position.X) * transformA.v.R.Col1.X + (c.Y - transformA.v.Position.Y) * transformA.v.R.Col1.Y, (c.X - transformA.v.Position.X) * transformA.v.R.Col2.X + (c.Y - transformA.v.Position.Y) * transformA.v.R.Col2.Y);

                    var normalIndex = 0;
                    var separation = -3.40282347E+38;
                    var radius = polygonA.Radius + circleB.Radius;
                    var vertexCount = polygonA.Vertices.Count;

                    for (var i = 0; i < vertexCount; i = (i + 1) | 0) {
                        var value1 = polygonA.Normals.getItem(i).$clone();
                        var value2 = Microsoft.Xna.Framework.Vector2.op_Subtraction(cLocal.$clone(), polygonA.Vertices.getItem(i).$clone());
                        var s = value1.X * value2.X + value1.Y * value2.Y;

                        if (s > radius) {
                            return;
                        }

                        if (s > separation) {
                            separation = s;
                            normalIndex = i;
                        }
                    }

                    var vertIndex1 = normalIndex;
                    var vertIndex2 = ((vertIndex1 + 1) | 0) < vertexCount ? ((vertIndex1 + 1) | 0) : 0;
                    var v1 = polygonA.Vertices.getItem(vertIndex1).$clone();
                    var v2 = polygonA.Vertices.getItem(vertIndex2).$clone();

                    if (separation < FarseerPhysics.Settings.Epsilon) {
                        manifold.v.PointCount = 1;
                        manifold.v.Type = FarseerPhysics.Collision.ManifoldType.FaceA;
                        manifold.v.LocalNormal = polygonA.Normals.getItem(normalIndex).$clone();
                        manifold.v.LocalPoint = Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, (Microsoft.Xna.Framework.Vector2.op_Addition(v1.$clone(), v2.$clone())));

                        var p0 = manifold.v.Points.getItem(0).$clone();

                        p0.LocalPoint = circleB.Position.$clone();
                        p0.Id.Key = 0;

                        manifold.v.Points.setItem(0, p0.$clone());

                        return;
                    }

                    var u1 = (cLocal.X - v1.X) * (v2.X - v1.X) + (cLocal.Y - v1.Y) * (v2.Y - v1.Y);
                    var u2 = (cLocal.X - v2.X) * (v1.X - v2.X) + (cLocal.Y - v2.Y) * (v1.Y - v2.Y);

                    if (u1 <= 0.0) {
                        var r = (cLocal.X - v1.X) * (cLocal.X - v1.X) + (cLocal.Y - v1.Y) * (cLocal.Y - v1.Y);
                        if (r > radius * radius) {
                            return;
                        }

                        manifold.v.PointCount = 1;
                        manifold.v.Type = FarseerPhysics.Collision.ManifoldType.FaceA;
                        manifold.v.LocalNormal = Microsoft.Xna.Framework.Vector2.op_Subtraction(cLocal.$clone(), v1.$clone());
                        var factor = 1.0 / Math.sqrt(manifold.v.LocalNormal.X * manifold.v.LocalNormal.X + manifold.v.LocalNormal.Y * manifold.v.LocalNormal.Y);
                        manifold.v.LocalNormal.X = manifold.v.LocalNormal.X * factor;
                        manifold.v.LocalNormal.Y = manifold.v.LocalNormal.Y * factor;
                        manifold.v.LocalPoint = v1.$clone();

                        var p0b = manifold.v.Points.getItem(0).$clone();

                        p0b.LocalPoint = circleB.Position.$clone();
                        p0b.Id.Key = 0;

                        manifold.v.Points.setItem(0, p0b.$clone());
                    } else if (u2 <= 0.0) {
                        var r1 = (cLocal.X - v2.X) * (cLocal.X - v2.X) + (cLocal.Y - v2.Y) * (cLocal.Y - v2.Y);
                        if (r1 > radius * radius) {
                            return;
                        }

                        manifold.v.PointCount = 1;
                        manifold.v.Type = FarseerPhysics.Collision.ManifoldType.FaceA;
                        manifold.v.LocalNormal = Microsoft.Xna.Framework.Vector2.op_Subtraction(cLocal.$clone(), v2.$clone());
                        var factor1 = 1.0 / Math.sqrt(manifold.v.LocalNormal.X * manifold.v.LocalNormal.X + manifold.v.LocalNormal.Y * manifold.v.LocalNormal.Y);
                        manifold.v.LocalNormal.X = manifold.v.LocalNormal.X * factor1;
                        manifold.v.LocalNormal.Y = manifold.v.LocalNormal.Y * factor1;
                        manifold.v.LocalPoint = v2.$clone();

                        var p0c = manifold.v.Points.getItem(0).$clone();

                        p0c.LocalPoint = circleB.Position.$clone();
                        p0c.Id.Key = 0;

                        manifold.v.Points.setItem(0, p0c.$clone());
                    } else {
                        var faceCenter = Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, (Microsoft.Xna.Framework.Vector2.op_Addition(v1.$clone(), v2.$clone())));
                        var value11 = Microsoft.Xna.Framework.Vector2.op_Subtraction(cLocal.$clone(), faceCenter.$clone());
                        var value21 = polygonA.Normals.getItem(vertIndex1).$clone();
                        var separation2 = value11.X * value21.X + value11.Y * value21.Y;
                        if (separation2 > radius) {
                            return;
                        }

                        manifold.v.PointCount = 1;
                        manifold.v.Type = FarseerPhysics.Collision.ManifoldType.FaceA;
                        manifold.v.LocalNormal = polygonA.Normals.getItem(vertIndex1).$clone();
                        manifold.v.LocalPoint = faceCenter.$clone();

                        var p0d = manifold.v.Points.getItem(0).$clone();

                        p0d.LocalPoint = circleB.Position.$clone();
                        p0d.Id.Key = 0;

                        manifold.v.Points.setItem(0, p0d.$clone());
                    }
                },
                /**
                 * Compute the collision manifold between two polygons.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Collision.Collision
                 * @memberof FarseerPhysics.Collision.Collision
                 * @param   {FarseerPhysics.Collision.Manifold}               manifold      The manifold.
                 * @param   {FarseerPhysics.Collision.Shapes.PolygonShape}    polyA         The poly A.
                 * @param   {FarseerPhysics.Common.Transform}                 transformA    The transform A.
                 * @param   {FarseerPhysics.Collision.Shapes.PolygonShape}    polyB         The poly B.
                 * @param   {FarseerPhysics.Common.Transform}                 transformB    The transform B.
                 * @return  {void}
                 */
                CollidePolygons: function (manifold, polyA, transformA, polyB, transformB) {
                    manifold.v.PointCount = 0;
                    var totalRadius = polyA.Radius + polyB.Radius;

                    var edgeA = { v : 0 };
                    var separationA = FarseerPhysics.Collision.Collision.FindMaxSeparation(edgeA, polyA, transformA, polyB, transformB);
                    if (separationA > totalRadius) {
                        return;
                    }

                    var edgeB = { v : 0 };
                    var separationB = FarseerPhysics.Collision.Collision.FindMaxSeparation(edgeB, polyB, transformB, polyA, transformA);
                    if (separationB > totalRadius) {
                        return;
                    }

                    var poly1;
                    var poly2;
                    var xf1 = { v : new FarseerPhysics.Common.Transform() }, xf2 = { v : new FarseerPhysics.Common.Transform() };
                    var edge1;
                    var flip;
                    var k_relativeTol = 0.98;
                    var k_absoluteTol = 0.001;

                    if (separationB > k_relativeTol * separationA + k_absoluteTol) {
                        poly1 = polyB;
                        poly2 = polyA;
                        xf1.v = transformB.v.$clone();
                        xf2.v = transformA.v.$clone();
                        edge1 = edgeB.v;
                        manifold.v.Type = FarseerPhysics.Collision.ManifoldType.FaceB;
                        flip = true;
                    } else {
                        poly1 = polyA;
                        poly2 = polyB;
                        xf1.v = transformA.v.$clone();
                        xf2.v = transformB.v.$clone();
                        edge1 = edgeA.v;
                        manifold.v.Type = FarseerPhysics.Collision.ManifoldType.FaceA;
                        flip = false;
                    }

                    var incidentEdge = { v : new (FarseerPhysics.Common.FixedArray2$1(FarseerPhysics.Collision.ClipVertex))() };
                    FarseerPhysics.Collision.Collision.FindIncidentEdge$1(incidentEdge, poly1, xf1, edge1, poly2, xf2);

                    var count1 = poly1.Vertices.Count;

                    var iv1 = edge1;
                    var iv2 = ((edge1 + 1) | 0) < count1 ? ((edge1 + 1) | 0) : 0;

                    var v11 = poly1.Vertices.getItem(iv1).$clone();
                    var v12 = poly1.Vertices.getItem(iv2).$clone();

                    var localTangentX = v12.X - v11.X;
                    var localTangentY = v12.Y - v11.Y;

                    var factor = 1.0 / Math.sqrt(localTangentX * localTangentX + localTangentY * localTangentY);
                    localTangentX = localTangentX * factor;
                    localTangentY = localTangentY * factor;

                    var localNormal = new Microsoft.Xna.Framework.Vector2.$ctor2(localTangentY, -localTangentX);
                    var planePoint = Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, (Microsoft.Xna.Framework.Vector2.op_Addition(v11.$clone(), v12.$clone())));

                    var tangent = new Microsoft.Xna.Framework.Vector2.$ctor2(xf1.v.R.Col1.X * localTangentX + xf1.v.R.Col2.X * localTangentY, xf1.v.R.Col1.Y * localTangentX + xf1.v.R.Col2.Y * localTangentY);
                    var normalx = tangent.Y;
                    var normaly = -tangent.X;

                    v11 = new Microsoft.Xna.Framework.Vector2.$ctor2(xf1.v.Position.X + xf1.v.R.Col1.X * v11.X + xf1.v.R.Col2.X * v11.Y, xf1.v.Position.Y + xf1.v.R.Col1.Y * v11.X + xf1.v.R.Col2.Y * v11.Y);
                    v12 = new Microsoft.Xna.Framework.Vector2.$ctor2(xf1.v.Position.X + xf1.v.R.Col1.X * v12.X + xf1.v.R.Col2.X * v12.Y, xf1.v.Position.Y + xf1.v.R.Col1.Y * v12.X + xf1.v.R.Col2.Y * v12.Y);

                    var frontOffset = normalx * v11.X + normaly * v11.Y;

                    var sideOffset1 = -(tangent.X * v11.X + tangent.Y * v11.Y) + totalRadius;
                    var sideOffset2 = tangent.X * v12.X + tangent.Y * v12.Y + totalRadius;

                    var clipPoints1 = { v : new (FarseerPhysics.Common.FixedArray2$1(FarseerPhysics.Collision.ClipVertex))() };
                    var clipPoints2 = { v : new (FarseerPhysics.Common.FixedArray2$1(FarseerPhysics.Collision.ClipVertex))() };

                    var np = FarseerPhysics.Collision.Collision.ClipSegmentToLine(clipPoints1, incidentEdge, Microsoft.Xna.Framework.Vector2.op_UnaryNegation(tangent.$clone()), sideOffset1, iv1);

                    if (np < 2) {
                        return;
                    }

                    np = FarseerPhysics.Collision.Collision.ClipSegmentToLine(clipPoints2, clipPoints1, tangent.$clone(), sideOffset2, iv2);

                    if (np < 2) {
                        return;
                    }

                    manifold.v.LocalNormal = localNormal.$clone();
                    manifold.v.LocalPoint = planePoint.$clone();

                    var pointCount = 0;
                    for (var i = 0; i < FarseerPhysics.Settings.MaxManifoldPoints; i = (i + 1) | 0) {
                        var value = clipPoints2.v.getItem(i).$clone().V.$clone();
                        var separation = normalx * value.X + normaly * value.Y - frontOffset;

                        if (separation <= totalRadius) {
                            var cp = manifold.v.Points.getItem(pointCount).$clone();
                            var tmp = clipPoints2.v.getItem(i).$clone().V.$clone();
                            var tmp1X = tmp.X - xf2.v.Position.X;
                            var tmp1Y = tmp.Y - xf2.v.Position.Y;
                            cp.LocalPoint.X = tmp1X * xf2.v.R.Col1.X + tmp1Y * xf2.v.R.Col1.Y;
                            cp.LocalPoint.Y = tmp1X * xf2.v.R.Col2.X + tmp1Y * xf2.v.R.Col2.Y;
                            cp.Id = clipPoints2.v.getItem(i).$clone().ID.$clone();

                            if (flip) {
                                var cf = cp.Id.Features.$clone();
                                cp.Id.Features.IndexA = cf.IndexB;
                                cp.Id.Features.IndexB = cf.IndexA;
                                cp.Id.Features.TypeA = cf.TypeB;
                                cp.Id.Features.TypeB = cf.TypeA;
                            }

                            manifold.v.Points.setItem(pointCount, cp.$clone());

                            pointCount = (pointCount + 1) | 0;
                        }
                    }

                    manifold.v.PointCount = pointCount;
                },
                /**
                 * Compute contact points for edge versus circle.
                 This accounts for edge connectivity.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Collision.Collision
                 * @memberof FarseerPhysics.Collision.Collision
                 * @param   {FarseerPhysics.Collision.Manifold}              manifold      The manifold.
                 * @param   {FarseerPhysics.Collision.Shapes.EdgeShape}      edgeA         The edge A.
                 * @param   {FarseerPhysics.Common.Transform}                transformA    The transform A.
                 * @param   {FarseerPhysics.Collision.Shapes.CircleShape}    circleB       The circle B.
                 * @param   {FarseerPhysics.Common.Transform}                transformB    The transform B.
                 * @return  {void}
                 */
                CollideEdgeAndCircle: function (manifold, edgeA, transformA, circleB, transformB) {
                    manifold.v.PointCount = 0;

                    var Q = FarseerPhysics.Common.MathUtils.MultiplyT$2(transformA, FarseerPhysics.Common.MathUtils.Multiply$3(transformB, Bridge.ref(circleB, "_position")));

                    var A = edgeA.Vertex1.$clone(), B = edgeA.Vertex2.$clone();
                    var e = { v : Microsoft.Xna.Framework.Vector2.op_Subtraction(B.$clone(), A.$clone()) };

                    var u = Microsoft.Xna.Framework.Vector2.Dot(e.v.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(B.$clone(), Q.$clone()));
                    var v = Microsoft.Xna.Framework.Vector2.Dot(e.v.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(Q.$clone(), A.$clone()));

                    var radius = edgeA.Radius + circleB.Radius;

                    var cf = new FarseerPhysics.Collision.ContactFeature();
                    cf.IndexB = 0;
                    cf.TypeB = FarseerPhysics.Collision.ContactFeatureType.Vertex;

                    var P = new Microsoft.Xna.Framework.Vector2(), d = { v : new Microsoft.Xna.Framework.Vector2() };

                    if (v <= 0.0) {
                        P = A.$clone();
                        d.v = Microsoft.Xna.Framework.Vector2.op_Subtraction(Q.$clone(), P.$clone());
                        var dd = { };
                        Microsoft.Xna.Framework.Vector2.Dot$1(d, d, dd);
                        if (dd.v > radius * radius) {
                            return;
                        }

                        if (edgeA.HasVertex0) {
                            var A1 = edgeA.Vertex0.$clone();
                            var B1 = A.$clone();
                            var e1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(B1.$clone(), A1.$clone());
                            var u1 = Microsoft.Xna.Framework.Vector2.Dot(e1.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(B1.$clone(), Q.$clone()));

                            if (u1 > 0.0) {
                                return;
                            }
                        }

                        cf.IndexA = 0;
                        cf.TypeA = FarseerPhysics.Collision.ContactFeatureType.Vertex;
                        manifold.v.PointCount = 1;
                        manifold.v.Type = FarseerPhysics.Collision.ManifoldType.Circles;
                        manifold.v.LocalNormal = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                        manifold.v.LocalPoint = P.$clone();
                        var mp = new FarseerPhysics.Collision.ManifoldPoint();
                        mp.Id.Key = 0;
                        mp.Id.Features = cf.$clone();
                        mp.LocalPoint = circleB.Position.$clone();
                        manifold.v.Points.setItem(0, mp.$clone());
                        return;
                    }

                    if (u <= 0.0) {
                        P = B.$clone();
                        d.v = Microsoft.Xna.Framework.Vector2.op_Subtraction(Q.$clone(), P.$clone());
                        var dd1 = { };
                        Microsoft.Xna.Framework.Vector2.Dot$1(d, d, dd1);
                        if (dd1.v > radius * radius) {
                            return;
                        }

                        if (edgeA.HasVertex3) {
                            var B2 = edgeA.Vertex3.$clone();
                            var A2 = B.$clone();
                            var e2 = Microsoft.Xna.Framework.Vector2.op_Subtraction(B2.$clone(), A2.$clone());
                            var v2 = Microsoft.Xna.Framework.Vector2.Dot(e2.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(Q.$clone(), A2.$clone()));

                            if (v2 > 0.0) {
                                return;
                            }
                        }

                        cf.IndexA = 1;
                        cf.TypeA = FarseerPhysics.Collision.ContactFeatureType.Vertex;
                        manifold.v.PointCount = 1;
                        manifold.v.Type = FarseerPhysics.Collision.ManifoldType.Circles;
                        manifold.v.LocalNormal = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                        manifold.v.LocalPoint = P.$clone();
                        var mp1 = new FarseerPhysics.Collision.ManifoldPoint();
                        mp1.Id.Key = 0;
                        mp1.Id.Features = cf.$clone();
                        mp1.LocalPoint = circleB.Position.$clone();
                        manifold.v.Points.setItem(0, mp1.$clone());
                        return;
                    }

                    var den = { };
                    Microsoft.Xna.Framework.Vector2.Dot$1(e, e, den);
                    System.Diagnostics.Debug.Assert(den.v > 0.0);
                    P = Microsoft.Xna.Framework.Vector2.op_Multiply$2((1.0 / den.v), (Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(u, A.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(v, B.$clone()))));
                    d.v = Microsoft.Xna.Framework.Vector2.op_Subtraction(Q.$clone(), P.$clone());
                    var dd2 = { };
                    Microsoft.Xna.Framework.Vector2.Dot$1(d, d, dd2);
                    if (dd2.v > radius * radius) {
                        return;
                    }

                    var n = new Microsoft.Xna.Framework.Vector2.$ctor2(-e.v.Y, e.v.X);
                    if (Microsoft.Xna.Framework.Vector2.Dot(n.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(Q.$clone(), A.$clone())) < 0.0) {
                        n = new Microsoft.Xna.Framework.Vector2.$ctor2(-n.X, -n.Y);
                    }
                    n.Normalize();

                    cf.IndexA = 0;
                    cf.TypeA = FarseerPhysics.Collision.ContactFeatureType.Face;
                    manifold.v.PointCount = 1;
                    manifold.v.Type = FarseerPhysics.Collision.ManifoldType.FaceA;
                    manifold.v.LocalNormal = n.$clone();
                    manifold.v.LocalPoint = A.$clone();
                    var mp2 = new FarseerPhysics.Collision.ManifoldPoint();
                    mp2.Id.Key = 0;
                    mp2.Id.Features = cf.$clone();
                    mp2.LocalPoint = circleB.Position.$clone();
                    manifold.v.Points.setItem(0, mp2.$clone());
                },
                /**
                 * Collides and edge and a polygon, taking into account edge adjacency.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Collision.Collision
                 * @memberof FarseerPhysics.Collision.Collision
                 * @param   {FarseerPhysics.Collision.Manifold}               manifold    The manifold.
                 * @param   {FarseerPhysics.Collision.Shapes.EdgeShape}       edgeA       The edge A.
                 * @param   {FarseerPhysics.Common.Transform}                 xfA         The xf A.
                 * @param   {FarseerPhysics.Collision.Shapes.PolygonShape}    polygonB    The polygon B.
                 * @param   {FarseerPhysics.Common.Transform}                 xfB         The xf B.
                 * @return  {void}
                 */
                CollideEdgeAndPolygon: function (manifold, edgeA, xfA, polygonB, xfB) {
                    var $t, $t1, $t2, $t3, $t4, $t5;
                    FarseerPhysics.Common.MathUtils.MultiplyT$5(xfA, xfB, Bridge.ref(FarseerPhysics.Collision.Collision, "_xf"));

                    FarseerPhysics.Collision.Collision._edgeA.V0 = edgeA.Vertex0.$clone();
                    FarseerPhysics.Collision.Collision._edgeA.V1 = edgeA.Vertex1.$clone();
                    FarseerPhysics.Collision.Collision._edgeA.V2 = edgeA.Vertex2.$clone();
                    FarseerPhysics.Collision.Collision._edgeA.V3 = edgeA.Vertex3.$clone();
                    var e = Microsoft.Xna.Framework.Vector2.op_Subtraction(FarseerPhysics.Collision.Collision._edgeA.V2.$clone(), FarseerPhysics.Collision.Collision._edgeA.V1.$clone());

                    FarseerPhysics.Collision.Collision._edgeA.Normal = new Microsoft.Xna.Framework.Vector2.$ctor2(e.Y, -e.X);
                    FarseerPhysics.Collision.Collision._edgeA.Normal.Normalize();
                    FarseerPhysics.Collision.Collision._edgeA.HasVertex0 = edgeA.HasVertex0;
                    FarseerPhysics.Collision.Collision._edgeA.HasVertex3 = edgeA.HasVertex3;

                    ($t = FarseerPhysics.Collision.Collision._proxyA.Vertices)[System.Array.index(0, $t)] = FarseerPhysics.Collision.Collision._edgeA.V1.$clone();
                    ($t1 = FarseerPhysics.Collision.Collision._proxyA.Vertices)[System.Array.index(1, $t1)] = FarseerPhysics.Collision.Collision._edgeA.V2.$clone();
                    ($t2 = FarseerPhysics.Collision.Collision._proxyA.Normals)[System.Array.index(0, $t2)] = FarseerPhysics.Collision.Collision._edgeA.Normal.$clone();
                    ($t3 = FarseerPhysics.Collision.Collision._proxyA.Normals)[System.Array.index(1, $t3)] = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(FarseerPhysics.Collision.Collision._edgeA.Normal.$clone());
                    FarseerPhysics.Collision.Collision._proxyA.Centroid = Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, (Microsoft.Xna.Framework.Vector2.op_Addition(FarseerPhysics.Collision.Collision._edgeA.V1.$clone(), FarseerPhysics.Collision.Collision._edgeA.V2.$clone())));
                    FarseerPhysics.Collision.Collision._proxyA.Count = 2;

                    FarseerPhysics.Collision.Collision._proxyB.Count = polygonB.Vertices.Count;
                    FarseerPhysics.Collision.Collision._proxyB.Centroid = FarseerPhysics.Common.MathUtils.Multiply$3(Bridge.ref(FarseerPhysics.Collision.Collision, "_xf"), Bridge.ref(polygonB.MassData, "Centroid"));
                    for (var i = 0; i < polygonB.Vertices.Count; i = (i + 1) | 0) {
                        ($t4 = FarseerPhysics.Collision.Collision._proxyB.Vertices)[System.Array.index(i, $t4)] = FarseerPhysics.Common.MathUtils.Multiply$2(Bridge.ref(FarseerPhysics.Collision.Collision, "_xf"), polygonB.Vertices.getItem(i).$clone());
                        ($t5 = FarseerPhysics.Collision.Collision._proxyB.Normals)[System.Array.index(i, $t5)] = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(FarseerPhysics.Collision.Collision._xf, "R"), polygonB.Normals.getItem(i).$clone());
                    }

                    FarseerPhysics.Collision.Collision._radius = 0.02;

                    FarseerPhysics.Collision.Collision._limit11 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    FarseerPhysics.Collision.Collision._limit12 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    FarseerPhysics.Collision.Collision._limit21 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    FarseerPhysics.Collision.Collision._limit22 = Microsoft.Xna.Framework.Vector2.Zero.$clone();

                    manifold.v.PointCount = 0;

                    var v0 = FarseerPhysics.Collision.Collision._edgeA.V0.$clone();
                    var v1 = FarseerPhysics.Collision.Collision._edgeA.V1.$clone();
                    var v2 = FarseerPhysics.Collision.Collision._edgeA.V2.$clone();
                    var v3 = FarseerPhysics.Collision.Collision._edgeA.V3.$clone();

                    var centerB = FarseerPhysics.Collision.Collision._proxyB.Centroid.$clone();
                    if (FarseerPhysics.Collision.Collision._edgeA.HasVertex0) {
                        var e0 = Microsoft.Xna.Framework.Vector2.op_Subtraction(v1.$clone(), v0.$clone());
                        var e1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(v2.$clone(), v1.$clone());
                        var n0 = new Microsoft.Xna.Framework.Vector2.$ctor2(e0.Y, -e0.X);
                        var n1 = new Microsoft.Xna.Framework.Vector2.$ctor2(e1.Y, -e1.X);
                        n0.Normalize();
                        n1.Normalize();

                        var convex = FarseerPhysics.Common.MathUtils.Cross$2(n0.$clone(), n1.$clone()) >= 0.0;
                        var front0 = Microsoft.Xna.Framework.Vector2.Dot(n0.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(centerB.$clone(), v0.$clone())) >= 0.0;
                        var front1 = Microsoft.Xna.Framework.Vector2.Dot(n1.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(centerB.$clone(), v1.$clone())) >= 0.0;

                        if (convex) {
                            if (front0 || front1) {
                                FarseerPhysics.Collision.Collision._limit11 = n1.$clone();
                                FarseerPhysics.Collision.Collision._limit12 = n0.$clone();
                            } else {
                                FarseerPhysics.Collision.Collision._limit11 = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(n1.$clone());
                                FarseerPhysics.Collision.Collision._limit12 = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(n0.$clone());
                            }
                        } else {
                            if (front0 && front1) {
                                FarseerPhysics.Collision.Collision._limit11 = n0.$clone();
                                FarseerPhysics.Collision.Collision._limit12 = n1.$clone();
                            } else {
                                FarseerPhysics.Collision.Collision._limit11 = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(n0.$clone());
                                FarseerPhysics.Collision.Collision._limit12 = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(n1.$clone());
                            }
                        }
                    } else {
                        FarseerPhysics.Collision.Collision._limit11 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                        FarseerPhysics.Collision.Collision._limit12 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    }

                    if (FarseerPhysics.Collision.Collision._edgeA.HasVertex3) {
                        var e11 = Microsoft.Xna.Framework.Vector2.op_Subtraction(v2.$clone(), v1.$clone());
                        var e2 = Microsoft.Xna.Framework.Vector2.op_Subtraction(v3.$clone(), v2.$clone());
                        var n11 = new Microsoft.Xna.Framework.Vector2.$ctor2(e11.Y, -e11.X);
                        var n2 = new Microsoft.Xna.Framework.Vector2.$ctor2(e2.Y, -e2.X);
                        n11.Normalize();
                        n2.Normalize();

                        var convex1 = FarseerPhysics.Common.MathUtils.Cross$2(n11.$clone(), n2.$clone()) >= 0.0;
                        var front11 = Microsoft.Xna.Framework.Vector2.Dot(n11.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(centerB.$clone(), v1.$clone())) >= 0.0;
                        var front2 = Microsoft.Xna.Framework.Vector2.Dot(n2.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(centerB.$clone(), v2.$clone())) >= 0.0;

                        if (convex1) {
                            if (front11 || front2) {
                                FarseerPhysics.Collision.Collision._limit21 = n2.$clone();
                                FarseerPhysics.Collision.Collision._limit22 = n11.$clone();
                            } else {
                                FarseerPhysics.Collision.Collision._limit21 = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(n2.$clone());
                                FarseerPhysics.Collision.Collision._limit22 = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(n11.$clone());
                            }
                        } else {
                            if (front11 && front2) {
                                FarseerPhysics.Collision.Collision._limit21 = n11.$clone();
                                FarseerPhysics.Collision.Collision._limit22 = n2.$clone();
                            } else {
                                FarseerPhysics.Collision.Collision._limit21 = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(n11.$clone());
                                FarseerPhysics.Collision.Collision._limit22 = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(n2.$clone());
                            }
                        }
                    } else {
                        FarseerPhysics.Collision.Collision._limit21 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                        FarseerPhysics.Collision.Collision._limit22 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    }


                    var edgeAxis = FarseerPhysics.Collision.Collision.ComputeEdgeSeparation();

                    if (edgeAxis.Type === FarseerPhysics.Collision.EPAxisType.Unknown) {
                        return;
                    }

                    if (edgeAxis.Separation > FarseerPhysics.Collision.Collision._radius) {
                        return;
                    }

                    var polygonAxis = FarseerPhysics.Collision.Collision.ComputePolygonSeparation();
                    if (polygonAxis.Type !== FarseerPhysics.Collision.EPAxisType.Unknown && polygonAxis.Separation > FarseerPhysics.Collision.Collision._radius) {
                        return;
                    }

                    var k_relativeTol = 0.98;
                    var k_absoluteTol = 0.001;

                    var primaryAxis = new FarseerPhysics.Collision.EPAxis();
                    if (polygonAxis.Type === FarseerPhysics.Collision.EPAxisType.Unknown) {
                        primaryAxis = edgeAxis.$clone();
                    } else if (polygonAxis.Separation > k_relativeTol * edgeAxis.Separation + k_absoluteTol) {
                        primaryAxis = polygonAxis.$clone();
                    } else {
                        primaryAxis = edgeAxis.$clone();
                    }

                    var proxy1;
                    var proxy2;
                    var incidentEdge = { v : new (FarseerPhysics.Common.FixedArray2$1(FarseerPhysics.Collision.ClipVertex))() };
                    if (primaryAxis.Type === FarseerPhysics.Collision.EPAxisType.EdgeA) {
                        proxy1 = FarseerPhysics.Collision.Collision._proxyA;
                        proxy2 = FarseerPhysics.Collision.Collision._proxyB;
                        manifold.v.Type = FarseerPhysics.Collision.ManifoldType.FaceA;
                    } else {
                        proxy1 = FarseerPhysics.Collision.Collision._proxyB;
                        proxy2 = FarseerPhysics.Collision.Collision._proxyA;
                        manifold.v.Type = FarseerPhysics.Collision.ManifoldType.FaceB;
                    }

                    var edge1 = primaryAxis.Index;

                    FarseerPhysics.Collision.Collision.FindIncidentEdge(incidentEdge, proxy1, primaryAxis.Index, proxy2);
                    var count1 = proxy1.Count;

                    var iv1 = edge1;
                    var iv2 = ((edge1 + 1) | 0) < count1 ? ((edge1 + 1) | 0) : 0;

                    var v11 = proxy1.Vertices[System.Array.index(iv1, proxy1.Vertices)].$clone();
                    var v12 = proxy1.Vertices[System.Array.index(iv2, proxy1.Vertices)].$clone();

                    var tangent = Microsoft.Xna.Framework.Vector2.op_Subtraction(v12.$clone(), v11.$clone());
                    tangent.Normalize();

                    var normal = { v : FarseerPhysics.Common.MathUtils.Cross(tangent.$clone(), 1.0) };
                    var planePoint = { v : Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, (Microsoft.Xna.Framework.Vector2.op_Addition(v11.$clone(), v12.$clone()))) };

                    var frontOffset = Microsoft.Xna.Framework.Vector2.Dot(normal.v.$clone(), v11.$clone());

                    var sideOffset1 = -Microsoft.Xna.Framework.Vector2.Dot(tangent.$clone(), v11.$clone()) + FarseerPhysics.Collision.Collision._radius;
                    var sideOffset2 = Microsoft.Xna.Framework.Vector2.Dot(tangent.$clone(), v12.$clone()) + FarseerPhysics.Collision.Collision._radius;

                    var clipPoints1 = { v : new (FarseerPhysics.Common.FixedArray2$1(FarseerPhysics.Collision.ClipVertex))() };
                    var clipPoints2 = { v : new (FarseerPhysics.Common.FixedArray2$1(FarseerPhysics.Collision.ClipVertex))() };
                    var np;

                    np = FarseerPhysics.Collision.Collision.ClipSegmentToLine(clipPoints1, incidentEdge, Microsoft.Xna.Framework.Vector2.op_UnaryNegation(tangent.$clone()), sideOffset1, iv1);

                    if (np < FarseerPhysics.Settings.MaxManifoldPoints) {
                        return;
                    }

                    np = FarseerPhysics.Collision.Collision.ClipSegmentToLine(clipPoints2, clipPoints1, tangent.$clone(), sideOffset2, iv2);

                    if (np < FarseerPhysics.Settings.MaxManifoldPoints) {
                        return;
                    }

                    if (primaryAxis.Type === FarseerPhysics.Collision.EPAxisType.EdgeA) {
                        manifold.v.LocalNormal = normal.v.$clone();
                        manifold.v.LocalPoint = planePoint.v.$clone();
                    } else {
                        manifold.v.LocalNormal = FarseerPhysics.Common.MathUtils.MultiplyT$1(Bridge.ref(FarseerPhysics.Collision.Collision._xf, "R"), normal);
                        manifold.v.LocalPoint = FarseerPhysics.Common.MathUtils.MultiplyT$3(Bridge.ref(FarseerPhysics.Collision.Collision, "_xf"), planePoint);
                    }

                    var pointCount = 0;
                    for (var i1 = 0; i1 < FarseerPhysics.Settings.MaxManifoldPoints; i1 = (i1 + 1) | 0) {
                        var separation = Microsoft.Xna.Framework.Vector2.Dot(normal.v.$clone(), clipPoints2.v.getItem(i1).$clone().V.$clone()) - frontOffset;

                        if (separation <= FarseerPhysics.Collision.Collision._radius) {
                            var cp = manifold.v.Points.getItem(pointCount).$clone();

                            if (primaryAxis.Type === FarseerPhysics.Collision.EPAxisType.EdgeA) {
                                cp.LocalPoint = FarseerPhysics.Common.MathUtils.MultiplyT$2(Bridge.ref(FarseerPhysics.Collision.Collision, "_xf"), clipPoints2.v.getItem(i1).$clone().V.$clone());
                                cp.Id = clipPoints2.v.getItem(i1).$clone().ID.$clone();
                            } else {
                                cp.LocalPoint = clipPoints2.v.getItem(i1).$clone().V.$clone();
                                cp.Id.Features.TypeA = clipPoints2.v.getItem(i1).$clone().ID.Features.TypeB;
                                cp.Id.Features.TypeB = clipPoints2.v.getItem(i1).$clone().ID.Features.TypeA;
                                cp.Id.Features.IndexA = clipPoints2.v.getItem(i1).$clone().ID.Features.IndexB;
                                cp.Id.Features.IndexB = clipPoints2.v.getItem(i1).$clone().ID.Features.IndexA;
                            }

                            manifold.v.Points.setItem(pointCount, cp.$clone());

                            pointCount = (pointCount + 1) | 0;
                        }
                    }

                    manifold.v.PointCount = pointCount;

                },
                ComputeEdgeSeparation: function () {
                    var $t;
                    var bestAxis = new FarseerPhysics.Collision.EPAxis();
                    bestAxis.Type = FarseerPhysics.Collision.EPAxisType.Unknown;
                    bestAxis.Index = -1;
                    bestAxis.Separation = -3.40282347E+38;
                    FarseerPhysics.Collision.Collision._tmpNormals[System.Array.index(0, FarseerPhysics.Collision.Collision._tmpNormals)] = FarseerPhysics.Collision.Collision._edgeA.Normal.$clone();
                    FarseerPhysics.Collision.Collision._tmpNormals[System.Array.index(1, FarseerPhysics.Collision.Collision._tmpNormals)] = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(FarseerPhysics.Collision.Collision._edgeA.Normal.$clone());

                    for (var i = 0; i < 2; i = (i + 1) | 0) {
                        var n = FarseerPhysics.Collision.Collision._tmpNormals[System.Array.index(i, FarseerPhysics.Collision.Collision._tmpNormals)].$clone();

                        var valid1 = FarseerPhysics.Common.MathUtils.Cross$2(n.$clone(), FarseerPhysics.Collision.Collision._limit11.$clone()) >= -0.03490659 && FarseerPhysics.Common.MathUtils.Cross$2(FarseerPhysics.Collision.Collision._limit12.$clone(), n.$clone()) >= -0.03490659;
                        var valid2 = FarseerPhysics.Common.MathUtils.Cross$2(n.$clone(), FarseerPhysics.Collision.Collision._limit21.$clone()) >= -0.03490659 && FarseerPhysics.Common.MathUtils.Cross$2(FarseerPhysics.Collision.Collision._limit22.$clone(), n.$clone()) >= -0.03490659;

                        if (valid1 === false || valid2 === false) {
                            continue;
                        }

                        var axis = new FarseerPhysics.Collision.EPAxis();
                        axis.Type = FarseerPhysics.Collision.EPAxisType.EdgeA;
                        axis.Index = i;
                        axis.Separation = FarseerPhysics.Settings.MaxFloat;

                        for (var j = 0; j < FarseerPhysics.Collision.Collision._proxyB.Count; j = (j + 1) | 0) {
                            var s = Microsoft.Xna.Framework.Vector2.Dot(n.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(($t = FarseerPhysics.Collision.Collision._proxyB.Vertices)[System.Array.index(j, $t)].$clone(), FarseerPhysics.Collision.Collision._edgeA.V1.$clone()));
                            if (s < axis.Separation) {
                                axis.Separation = s;
                            }
                        }

                        if (axis.Separation > FarseerPhysics.Collision.Collision._radius) {
                            return axis.$clone();
                        }

                        if (axis.Separation > bestAxis.Separation) {
                            bestAxis = axis.$clone();
                        }
                    }

                    return bestAxis.$clone();
                },
                ComputePolygonSeparation: function () {
                    var $t, $t1, $t2;
                    var axis = new FarseerPhysics.Collision.EPAxis();
                    axis.Type = FarseerPhysics.Collision.EPAxisType.Unknown;
                    axis.Index = -1;
                    axis.Separation = -3.40282347E+38;
                    for (var i = 0; i < FarseerPhysics.Collision.Collision._proxyB.Count; i = (i + 1) | 0) {
                        var n = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(($t = FarseerPhysics.Collision.Collision._proxyB.Normals)[System.Array.index(i, $t)].$clone());

                        var valid1 = FarseerPhysics.Common.MathUtils.Cross$2(n.$clone(), FarseerPhysics.Collision.Collision._limit11.$clone()) >= -0.03490659 && FarseerPhysics.Common.MathUtils.Cross$2(FarseerPhysics.Collision.Collision._limit12.$clone(), n.$clone()) >= -0.03490659;
                        var valid2 = FarseerPhysics.Common.MathUtils.Cross$2(n.$clone(), FarseerPhysics.Collision.Collision._limit21.$clone()) >= -0.03490659 && FarseerPhysics.Common.MathUtils.Cross$2(FarseerPhysics.Collision.Collision._limit22.$clone(), n.$clone()) >= -0.03490659;

                        if (valid1 === false && valid2 === false) {
                            continue;
                        }

                        var s1 = Microsoft.Xna.Framework.Vector2.Dot(n.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(($t1 = FarseerPhysics.Collision.Collision._proxyB.Vertices)[System.Array.index(i, $t1)].$clone(), FarseerPhysics.Collision.Collision._edgeA.V1.$clone()));
                        var s2 = Microsoft.Xna.Framework.Vector2.Dot(n.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(($t2 = FarseerPhysics.Collision.Collision._proxyB.Vertices)[System.Array.index(i, $t2)].$clone(), FarseerPhysics.Collision.Collision._edgeA.V2.$clone()));
                        var s = Math.min(s1, s2);

                        if (s > FarseerPhysics.Collision.Collision._radius) {
                            axis.Type = FarseerPhysics.Collision.EPAxisType.EdgeB;
                            axis.Index = i;
                            axis.Separation = s;
                        }

                        if (s > axis.Separation) {
                            axis.Type = FarseerPhysics.Collision.EPAxisType.EdgeB;
                            axis.Index = i;
                            axis.Separation = s;
                        }
                    }

                    return axis.$clone();
                },
                FindIncidentEdge: function (c, proxy1, edge1, proxy2) {
                    var count2 = proxy2.Count;

                    System.Diagnostics.Debug.Assert(0 <= edge1 && edge1 < proxy1.Count);

                    var normal1 = proxy1.Normals[System.Array.index(edge1, proxy1.Normals)].$clone();

                    var index = 0;
                    var minDot = 3.40282347E+38;
                    for (var i = 0; i < count2; i = (i + 1) | 0) {
                        var dot = Microsoft.Xna.Framework.Vector2.Dot(normal1.$clone(), proxy2.Normals[System.Array.index(i, proxy2.Normals)].$clone());
                        if (dot < minDot) {
                            minDot = dot;
                            index = i;
                        }
                    }

                    var i1 = index;
                    var i2 = ((i1 + 1) | 0) < count2 ? ((i1 + 1) | 0) : 0;

                    var cTemp = new FarseerPhysics.Collision.ClipVertex();
                    cTemp.V = proxy2.Vertices[System.Array.index(i1, proxy2.Vertices)].$clone();
                    cTemp.ID.Features.IndexA = edge1 & 255;
                    cTemp.ID.Features.IndexB = i1 & 255;
                    cTemp.ID.Features.TypeA = FarseerPhysics.Collision.ContactFeatureType.Face;
                    cTemp.ID.Features.TypeB = FarseerPhysics.Collision.ContactFeatureType.Vertex;
                    c.v.setItem(0, cTemp.$clone());

                    cTemp.V = proxy2.Vertices[System.Array.index(i2, proxy2.Vertices)].$clone();
                    cTemp.ID.Features.IndexA = edge1 & 255;
                    cTemp.ID.Features.IndexB = i2 & 255;
                    cTemp.ID.Features.TypeA = FarseerPhysics.Collision.ContactFeatureType.Face;
                    cTemp.ID.Features.TypeB = FarseerPhysics.Collision.ContactFeatureType.Vertex;
                    c.v.setItem(1, cTemp.$clone());
                },
                FindIncidentEdge$1: function (c, poly1, xf1, edge1, poly2, xf2) {
                    c.v = new (FarseerPhysics.Common.FixedArray2$1(FarseerPhysics.Collision.ClipVertex))();

                    var count2 = poly2.Vertices.Count;

                    System.Diagnostics.Debug.Assert(0 <= edge1 && edge1 < poly1.Vertices.Count);

                    var v = poly1.Normals.getItem(edge1).$clone();
                    var tmpx = xf1.v.R.Col1.X * v.X + xf1.v.R.Col2.X * v.Y;
                    var tmpy = xf1.v.R.Col1.Y * v.X + xf1.v.R.Col2.Y * v.Y;
                    var normal1 = new Microsoft.Xna.Framework.Vector2.$ctor2(tmpx * xf2.v.R.Col1.X + tmpy * xf2.v.R.Col1.Y, tmpx * xf2.v.R.Col2.X + tmpy * xf2.v.R.Col2.Y);

                    var index = 0;
                    var minDot = FarseerPhysics.Settings.MaxFloat;
                    for (var i = 0; i < count2; i = (i + 1) | 0) {
                        var dot = Microsoft.Xna.Framework.Vector2.Dot(normal1.$clone(), poly2.Normals.getItem(i).$clone());
                        if (dot < minDot) {
                            minDot = dot;
                            index = i;
                        }
                    }

                    var i1 = index;
                    var i2 = ((i1 + 1) | 0) < count2 ? ((i1 + 1) | 0) : 0;

                    var cv0 = c.v.getItem(0).$clone();

                    var v1 = poly2.Vertices.getItem(i1).$clone();
                    cv0.V.X = xf2.v.Position.X + xf2.v.R.Col1.X * v1.X + xf2.v.R.Col2.X * v1.Y;
                    cv0.V.Y = xf2.v.Position.Y + xf2.v.R.Col1.Y * v1.X + xf2.v.R.Col2.Y * v1.Y;
                    cv0.ID.Features.IndexA = edge1 & 255;
                    cv0.ID.Features.IndexB = i1 & 255;
                    cv0.ID.Features.TypeA = FarseerPhysics.Collision.ContactFeatureType.Face;
                    cv0.ID.Features.TypeB = FarseerPhysics.Collision.ContactFeatureType.Vertex;

                    c.v.setItem(0, cv0.$clone());

                    var cv1 = c.v.getItem(1).$clone();
                    var v2 = poly2.Vertices.getItem(i2).$clone();
                    cv1.V.X = xf2.v.Position.X + xf2.v.R.Col1.X * v2.X + xf2.v.R.Col2.X * v2.Y;
                    cv1.V.Y = xf2.v.Position.Y + xf2.v.R.Col1.Y * v2.X + xf2.v.R.Col2.Y * v2.Y;
                    cv1.ID.Features.IndexA = edge1 & 255;
                    cv1.ID.Features.IndexB = i2 & 255;
                    cv1.ID.Features.TypeA = FarseerPhysics.Collision.ContactFeatureType.Face;
                    cv1.ID.Features.TypeB = FarseerPhysics.Collision.ContactFeatureType.Vertex;

                    c.v.setItem(1, cv1.$clone());
                },
                /**
                 * Clipping for contact manifolds.
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Collision.Collision
                 * @memberof FarseerPhysics.Collision.Collision
                 * @param   {FarseerPhysics.Common.FixedArray2}    vOut            The v out.
                 * @param   {FarseerPhysics.Common.FixedArray2}    vIn             The v in.
                 * @param   {Microsoft.Xna.Framework.Vector2}      normal          The normal.
                 * @param   {number}                               offset          The offset.
                 * @param   {number}                               vertexIndexA    The vertex index A.
                 * @return  {number}
                 */
                ClipSegmentToLine: function (vOut, vIn, normal, offset, vertexIndexA) {
                    vOut.v = new (FarseerPhysics.Common.FixedArray2$1(FarseerPhysics.Collision.ClipVertex))();

                    var v0 = vIn.v.getItem(0).$clone();
                    var v1 = vIn.v.getItem(1).$clone();

                    var numOut = 0;

                    var distance0 = normal.X * v0.V.X + normal.Y * v0.V.Y - offset;
                    var distance1 = normal.X * v1.V.X + normal.Y * v1.V.Y - offset;

                    if (distance0 <= 0.0) {
                        vOut.v.setItem(Bridge.identity(numOut, (numOut = (numOut + 1) | 0)), v0.$clone());
                    }
                    if (distance1 <= 0.0) {
                        vOut.v.setItem(Bridge.identity(numOut, (numOut = (numOut + 1) | 0)), v1.$clone());
                    }

                    if (distance0 * distance1 < 0.0) {
                        var interp = distance0 / (distance0 - distance1);

                        var cv = vOut.v.getItem(numOut).$clone();

                        cv.V.X = v0.V.X + interp * (v1.V.X - v0.V.X);
                        cv.V.Y = v0.V.Y + interp * (v1.V.Y - v0.V.Y);

                        cv.ID.Features.IndexA = vertexIndexA & 255;
                        cv.ID.Features.IndexB = v0.ID.Features.IndexB;
                        cv.ID.Features.TypeA = FarseerPhysics.Collision.ContactFeatureType.Vertex;
                        cv.ID.Features.TypeB = FarseerPhysics.Collision.ContactFeatureType.Face;

                        vOut.v.setItem(numOut, cv.$clone());

                        numOut = (numOut + 1) | 0;
                    }

                    return numOut;
                },
                /**
                 * Find the separation between poly1 and poly2 for a give edge normal on poly1.
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Collision.Collision
                 * @memberof FarseerPhysics.Collision.Collision
                 * @param   {FarseerPhysics.Collision.Shapes.PolygonShape}    poly1    The poly1.
                 * @param   {FarseerPhysics.Common.Transform}                 xf1      The XF1.
                 * @param   {number}                                          edge1    The edge1.
                 * @param   {FarseerPhysics.Collision.Shapes.PolygonShape}    poly2    The poly2.
                 * @param   {FarseerPhysics.Common.Transform}                 xf2      The XF2.
                 * @return  {number}
                 */
                EdgeSeparation: function (poly1, xf1, edge1, poly2, xf2) {
                    var count2 = poly2.Vertices.Count;

                    System.Diagnostics.Debug.Assert(0 <= edge1 && edge1 < poly1.Vertices.Count);

                    var p1n = poly1.Normals.getItem(edge1).$clone();

                    var normalWorldx = xf1.v.R.Col1.X * p1n.X + xf1.v.R.Col2.X * p1n.Y;
                    var normalWorldy = xf1.v.R.Col1.Y * p1n.X + xf1.v.R.Col2.Y * p1n.Y;

                    var normal = new Microsoft.Xna.Framework.Vector2.$ctor2(normalWorldx * xf2.v.R.Col1.X + normalWorldy * xf2.v.R.Col1.Y, normalWorldx * xf2.v.R.Col2.X + normalWorldy * xf2.v.R.Col2.Y);

                    var index = 0;
                    var minDot = FarseerPhysics.Settings.MaxFloat;

                    for (var i = 0; i < count2; i = (i + 1) | 0) {
                        var dot = Microsoft.Xna.Framework.Vector2.Dot(poly2.Vertices.getItem(i).$clone(), normal.$clone());

                        if (dot < minDot) {
                            minDot = dot;
                            index = i;
                        }
                    }

                    var p1ve = poly1.Vertices.getItem(edge1).$clone();
                    var p2vi = poly2.Vertices.getItem(index).$clone();

                    return ((xf2.v.Position.X + xf2.v.R.Col1.X * p2vi.X + xf2.v.R.Col2.X * p2vi.Y) - (xf1.v.Position.X + xf1.v.R.Col1.X * p1ve.X + xf1.v.R.Col2.X * p1ve.Y)) * normalWorldx + ((xf2.v.Position.Y + xf2.v.R.Col1.Y * p2vi.X + xf2.v.R.Col2.Y * p2vi.Y) - (xf1.v.Position.Y + xf1.v.R.Col1.Y * p1ve.X + xf1.v.R.Col2.Y * p1ve.Y)) * normalWorldy;
                },
                /**
                 * Find the max separation between poly1 and poly2 using edge normals from poly1.
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Collision.Collision
                 * @memberof FarseerPhysics.Collision.Collision
                 * @param   {System.Int32}                                    edgeIndex    Index of the edge.
                 * @param   {FarseerPhysics.Collision.Shapes.PolygonShape}    poly1        The poly1.
                 * @param   {FarseerPhysics.Common.Transform}                 xf1          The XF1.
                 * @param   {FarseerPhysics.Collision.Shapes.PolygonShape}    poly2        The poly2.
                 * @param   {FarseerPhysics.Common.Transform}                 xf2          The XF2.
                 * @return  {number}
                 */
                FindMaxSeparation: function (edgeIndex, poly1, xf1, poly2, xf2) {
                    var count1 = poly1.Vertices.Count;

                    var dx = (xf2.v.Position.X + xf2.v.R.Col1.X * poly2.MassData.Centroid.X + xf2.v.R.Col2.X * poly2.MassData.Centroid.Y) - (xf1.v.Position.X + xf1.v.R.Col1.X * poly1.MassData.Centroid.X + xf1.v.R.Col2.X * poly1.MassData.Centroid.Y);
                    var dy = (xf2.v.Position.Y + xf2.v.R.Col1.Y * poly2.MassData.Centroid.X + xf2.v.R.Col2.Y * poly2.MassData.Centroid.Y) - (xf1.v.Position.Y + xf1.v.R.Col1.Y * poly1.MassData.Centroid.X + xf1.v.R.Col2.Y * poly1.MassData.Centroid.Y);
                    var dLocal1 = new Microsoft.Xna.Framework.Vector2.$ctor2(dx * xf1.v.R.Col1.X + dy * xf1.v.R.Col1.Y, dx * xf1.v.R.Col2.X + dy * xf1.v.R.Col2.Y);

                    var edge = 0;
                    var maxDot = -3.40282347E+38;
                    for (var i = 0; i < count1; i = (i + 1) | 0) {
                        var dot = Microsoft.Xna.Framework.Vector2.Dot(poly1.Normals.getItem(i).$clone(), dLocal1.$clone());
                        if (dot > maxDot) {
                            maxDot = dot;
                            edge = i;
                        }
                    }

                    var s = FarseerPhysics.Collision.Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);

                    var prevEdge = ((edge - 1) | 0) >= 0 ? ((edge - 1) | 0) : ((count1 - 1) | 0);
                    var sPrev = FarseerPhysics.Collision.Collision.EdgeSeparation(poly1, xf1, prevEdge, poly2, xf2);

                    var nextEdge = ((edge + 1) | 0) < count1 ? ((edge + 1) | 0) : 0;
                    var sNext = FarseerPhysics.Collision.Collision.EdgeSeparation(poly1, xf1, nextEdge, poly2, xf2);

                    var bestEdge;
                    var bestSeparation;
                    var increment;
                    if (sPrev > s && sPrev > sNext) {
                        increment = -1;
                        bestEdge = prevEdge;
                        bestSeparation = sPrev;
                    } else if (sNext > s) {
                        increment = 1;
                        bestEdge = nextEdge;
                        bestSeparation = sNext;
                    } else {
                        edgeIndex.v = edge;
                        return s;
                    }

                    for (; ; ) {
                        if (increment === -1) {
                            edge = ((bestEdge - 1) | 0) >= 0 ? ((bestEdge - 1) | 0) : ((count1 - 1) | 0);
                        } else {
                            edge = ((bestEdge + 1) | 0) < count1 ? ((bestEdge + 1) | 0) : 0;
                        }

                        s = FarseerPhysics.Collision.Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);

                        if (s > bestSeparation) {
                            bestEdge = edge;
                            bestSeparation = s;
                        } else {
                            break;
                        }
                    }

                    edgeIndex.v = bestEdge;
                    return bestSeparation;
                }
            }
        }
    });

    /**
     * The features that intersect to form the contact point
     This must be 4 bytes or less.
     *
     * @public
     * @class FarseerPhysics.Collision.ContactFeature
     */
    Bridge.define("FarseerPhysics.Collision.ContactFeature", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.ContactFeature(); }
            }
        },
        fields: {
            /**
             * Feature index on ShapeA
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.ContactFeature
             * @type number
             */
            IndexA: 0,
            /**
             * Feature index on ShapeB
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.ContactFeature
             * @type number
             */
            IndexB: 0,
            /**
             * The feature type on ShapeA
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.ContactFeature
             * @type number
             */
            TypeA: 0,
            /**
             * The feature type on ShapeB
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.ContactFeature
             * @type number
             */
            TypeB: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5106014587, this.IndexA, this.IndexB, this.TypeA, this.TypeB]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.ContactFeature)) {
                    return false;
                }
                return Bridge.equals(this.IndexA, o.IndexA) && Bridge.equals(this.IndexB, o.IndexB) && Bridge.equals(this.TypeA, o.TypeA) && Bridge.equals(this.TypeB, o.TypeB);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.ContactFeature();
                s.IndexA = this.IndexA;
                s.IndexB = this.IndexB;
                s.TypeA = this.TypeA;
                s.TypeB = this.TypeB;
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.ContactFeatureType", {
        $kind: "enum",
        statics: {
            fields: {
                Vertex: 0,
                Face: 1
            }
        },
        $utype: System.Byte
    });

    /**
     * Contact ids to facilitate warm starting.
     *
     * @public
     * @class FarseerPhysics.Collision.ContactID
     */
    Bridge.define("FarseerPhysics.Collision.ContactID", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.ContactID(); }
            }
        },
        fields: {
            /**
             * The features that intersect to form the contact point
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.ContactID
             * @type FarseerPhysics.Collision.ContactFeature
             */
            Features: null,
            /**
             * Used to quickly compare contact ids.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.ContactID
             * @type number
             */
            Key: 0
        },
        ctors: {
            init: function () {
                this.Features = new FarseerPhysics.Collision.ContactFeature();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3185758952, this.Features, this.Key]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.ContactID)) {
                    return false;
                }
                return Bridge.equals(this.Features, o.Features) && Bridge.equals(this.Key, o.Key);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.ContactID();
                s.Features = this.Features.$clone();
                s.Key = this.Key;
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.Distance", {
        statics: {
            fields: {
                GJKCalls: 0,
                GJKIters: 0,
                GJKMaxIters: 0
            },
            methods: {
                ComputeDistance: function (output, cache, input) {
                    cache.v = new FarseerPhysics.Collision.SimplexCache();
                    FarseerPhysics.Collision.Distance.GJKCalls = (FarseerPhysics.Collision.Distance.GJKCalls + 1) | 0;

                    var simplex = new FarseerPhysics.Collision.Simplex();
                    simplex.ReadCache(cache, input.ProxyA, Bridge.ref(input, "TransformA"), input.ProxyB, Bridge.ref(input, "TransformB"));

                    var k_maxIters = 20;

                    var saveA = new (FarseerPhysics.Common.FixedArray3$1(System.Int32))();
                    var saveB = new (FarseerPhysics.Common.FixedArray3$1(System.Int32))();

                    var closestPoint = simplex.GetClosestPoint();
                    var distanceSqr1 = closestPoint.LengthSquared();
                    var distanceSqr2 = distanceSqr1;

                    var iter = 0;
                    while (iter < k_maxIters) {
                        var saveCount = simplex.Count;
                        for (var i = 0; i < saveCount; i = (i + 1) | 0) {
                            saveA.setItem(i, simplex.V.getItem(i).$clone().IndexA);
                            saveB.setItem(i, simplex.V.getItem(i).$clone().IndexB);
                        }

                        switch (simplex.Count) {
                            case 1: 
                                break;
                            case 2: 
                                simplex.Solve2();
                                break;
                            case 3: 
                                simplex.Solve3();
                                break;
                            default: 
                                System.Diagnostics.Debug.Assert(false);
                                break;
                        }

                        if (simplex.Count === 3) {
                            break;
                        }

                        var p = simplex.GetClosestPoint();
                        distanceSqr2 = p.LengthSquared();

                        if (distanceSqr2 >= distanceSqr1) {
                        }
                        distanceSqr1 = distanceSqr2;

                        var d = simplex.GetSearchDirection();

                        if (d.LengthSquared() < 1.42108547E-14) {

                            break;
                        }

                        var vertex = simplex.V.getItem(simplex.Count).$clone();
                        vertex.IndexA = input.ProxyA.GetSupport(FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(input.TransformA, "R"), Microsoft.Xna.Framework.Vector2.op_UnaryNegation(d.$clone())));
                        vertex.WA = FarseerPhysics.Common.MathUtils.Multiply$2(Bridge.ref(input, "TransformA"), input.ProxyA.Vertices.getItem(vertex.IndexA).$clone());

                        vertex.IndexB = input.ProxyB.GetSupport(FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(input.TransformB, "R"), d.$clone()));
                        vertex.WB = FarseerPhysics.Common.MathUtils.Multiply$2(Bridge.ref(input, "TransformB"), input.ProxyB.Vertices.getItem(vertex.IndexB).$clone());
                        vertex.W = Microsoft.Xna.Framework.Vector2.op_Subtraction(vertex.WB.$clone(), vertex.WA.$clone());
                        simplex.V.setItem(simplex.Count, vertex.$clone());

                        iter = (iter + 1) | 0;
                        FarseerPhysics.Collision.Distance.GJKIters = (FarseerPhysics.Collision.Distance.GJKIters + 1) | 0;

                        var duplicate = false;
                        for (var i1 = 0; i1 < saveCount; i1 = (i1 + 1) | 0) {
                            if (vertex.IndexA === saveA.getItem(i1) && vertex.IndexB === saveB.getItem(i1)) {
                                duplicate = true;
                                break;
                            }
                        }

                        if (duplicate) {
                            break;
                        }

                        simplex.Count = (simplex.Count + 1) | 0;
                    }

                    FarseerPhysics.Collision.Distance.GJKMaxIters = Math.max(FarseerPhysics.Collision.Distance.GJKMaxIters, iter);

                    simplex.GetWitnessPoints(Bridge.ref(output.v, "PointA"), Bridge.ref(output.v, "PointB"));
                    output.v.Distance = (Microsoft.Xna.Framework.Vector2.op_Subtraction(output.v.PointA.$clone(), output.v.PointB.$clone())).Length();
                    output.v.Iterations = iter;

                    simplex.WriteCache(cache);

                    if (input.UseRadii) {
                        var rA = input.ProxyA.Radius;
                        var rB = input.ProxyB.Radius;

                        if (output.v.Distance > rA + rB && output.v.Distance > FarseerPhysics.Settings.Epsilon) {
                            output.v.Distance -= rA + rB;
                            var normal = Microsoft.Xna.Framework.Vector2.op_Subtraction(output.v.PointB.$clone(), output.v.PointA.$clone());
                            normal.Normalize();
                            output.v.PointA = Microsoft.Xna.Framework.Vector2.op_Addition(output.v.PointA.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(rA, normal.$clone()));
                            output.v.PointB = Microsoft.Xna.Framework.Vector2.op_Subtraction(output.v.PointB.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(rB, normal.$clone()));
                        } else {
                            var p1 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, (Microsoft.Xna.Framework.Vector2.op_Addition(output.v.PointA.$clone(), output.v.PointB.$clone())));
                            output.v.PointA = p1.$clone();
                            output.v.PointB = p1.$clone();
                            output.v.Distance = 0.0;
                        }
                    }
                }
            }
        }
    });

    /**
     * Input for ComputeDistance.
     You have to option to use the shape radii
     in the computation.
     *
     * @public
     * @class FarseerPhysics.Collision.DistanceInput
     */
    Bridge.define("FarseerPhysics.Collision.DistanceInput", {
        fields: {
            ProxyA: null,
            ProxyB: null,
            TransformA: null,
            TransformB: null,
            UseRadii: false
        },
        ctors: {
            init: function () {
                this.TransformA = new FarseerPhysics.Common.Transform();
                this.TransformB = new FarseerPhysics.Common.Transform();
                this.ProxyA = new FarseerPhysics.Collision.DistanceProxy();
                this.ProxyB = new FarseerPhysics.Collision.DistanceProxy();
            }
        }
    });

    /**
     * Output for ComputeDistance.
     *
     * @public
     * @class FarseerPhysics.Collision.DistanceOutput
     */
    Bridge.define("FarseerPhysics.Collision.DistanceOutput", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.DistanceOutput(); }
            }
        },
        fields: {
            Distance: 0,
            /**
             * Number of GJK iterations used
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.DistanceOutput
             * @type number
             */
            Iterations: 0,
            /**
             * Closest point on shapeA
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.DistanceOutput
             * @type Microsoft.Xna.Framework.Vector2
             */
            PointA: null,
            /**
             * Closest point on shapeB
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.DistanceOutput
             * @type Microsoft.Xna.Framework.Vector2
             */
            PointB: null
        },
        ctors: {
            init: function () {
                this.PointA = new Microsoft.Xna.Framework.Vector2();
                this.PointB = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5541445993, this.Distance, this.Iterations, this.PointA, this.PointB]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.DistanceOutput)) {
                    return false;
                }
                return Bridge.equals(this.Distance, o.Distance) && Bridge.equals(this.Iterations, o.Iterations) && Bridge.equals(this.PointA, o.PointA) && Bridge.equals(this.PointB, o.PointB);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.DistanceOutput();
                s.Distance = this.Distance;
                s.Iterations = this.Iterations;
                s.PointA = this.PointA.$clone();
                s.PointB = this.PointB.$clone();
                return s;
            }
        }
    });

    /**
     * A distance proxy is used by the GJK algorithm.
     It encapsulates any shape.
     *
     * @public
     * @class FarseerPhysics.Collision.DistanceProxy
     */
    Bridge.define("FarseerPhysics.Collision.DistanceProxy", {
        fields: {
            Radius: 0,
            Vertices: null
        },
        ctors: {
            init: function () {
                this.Vertices = new FarseerPhysics.Common.Vertices.ctor();
            }
        },
        methods: {
            /**
             * Initialize the proxy using the given shape. The shape
             must remain in scope while the proxy is in use.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DistanceProxy
             * @memberof FarseerPhysics.Collision.DistanceProxy
             * @param   {FarseerPhysics.Collision.Shapes.Shape}    shape    The shape.
             * @param   {number}                                   index    The index.
             * @return  {void}
             */
            Set: function (shape, index) {
                switch (shape.ShapeType) {
                    case FarseerPhysics.Collision.Shapes.ShapeType.Circle: 
                        {
                            var circle = Bridge.cast(shape, FarseerPhysics.Collision.Shapes.CircleShape);
                            this.Vertices.clear();
                            this.Vertices.add(circle.Position.$clone());
                            this.Radius = circle.Radius;
                        }
                        break;
                    case FarseerPhysics.Collision.Shapes.ShapeType.Polygon: 
                        {
                            var polygon = Bridge.cast(shape, FarseerPhysics.Collision.Shapes.PolygonShape);
                            this.Vertices.clear();
                            for (var i = 0; i < polygon.Vertices.Count; i = (i + 1) | 0) {
                                this.Vertices.add(polygon.Vertices.getItem(i).$clone());
                            }
                            this.Radius = polygon.Radius;
                        }
                        break;
                    case FarseerPhysics.Collision.Shapes.ShapeType.Loop: 
                        {
                            var loop = Bridge.cast(shape, FarseerPhysics.Collision.Shapes.LoopShape);
                            System.Diagnostics.Debug.Assert(0 <= index && index < loop.Vertices.Count);
                            this.Vertices.clear();
                            this.Vertices.add(loop.Vertices.getItem(index).$clone());
                            this.Vertices.add(((index + 1) | 0) < loop.Vertices.Count ? loop.Vertices.getItem(((index + 1) | 0)).$clone() : loop.Vertices.getItem(0).$clone());

                            this.Radius = loop.Radius;
                        }
                        break;
                    case FarseerPhysics.Collision.Shapes.ShapeType.Edge: 
                        {
                            var edge = Bridge.cast(shape, FarseerPhysics.Collision.Shapes.EdgeShape);
                            this.Vertices.clear();
                            this.Vertices.add(edge.Vertex1.$clone());
                            this.Vertices.add(edge.Vertex2.$clone());
                            this.Radius = edge.Radius;
                        }
                        break;
                    default: 
                        System.Diagnostics.Debug.Assert(false);
                        break;
                }
            },
            /**
             * Get the supporting vertex index in the given direction.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DistanceProxy
             * @memberof FarseerPhysics.Collision.DistanceProxy
             * @param   {Microsoft.Xna.Framework.Vector2}    direction    The direction.
             * @return  {number}
             */
            GetSupport: function (direction) {
                var bestIndex = 0;
                var bestValue = Microsoft.Xna.Framework.Vector2.Dot(this.Vertices.getItem(0).$clone(), direction.$clone());
                for (var i = 1; i < this.Vertices.Count; i = (i + 1) | 0) {
                    var value = Microsoft.Xna.Framework.Vector2.Dot(this.Vertices.getItem(i).$clone(), direction.$clone());
                    if (value > bestValue) {
                        bestIndex = i;
                        bestValue = value;
                    }
                }

                return bestIndex;
            },
            /**
             * Get the supporting vertex in the given direction.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DistanceProxy
             * @memberof FarseerPhysics.Collision.DistanceProxy
             * @param   {Microsoft.Xna.Framework.Vector2}    direction    The direction.
             * @return  {Microsoft.Xna.Framework.Vector2}
             */
            GetSupportVertex: function (direction) {
                var bestIndex = 0;
                var bestValue = Microsoft.Xna.Framework.Vector2.Dot(this.Vertices.getItem(0).$clone(), direction.$clone());
                for (var i = 1; i < this.Vertices.Count; i = (i + 1) | 0) {
                    var value = Microsoft.Xna.Framework.Vector2.Dot(this.Vertices.getItem(i).$clone(), direction.$clone());
                    if (value > bestValue) {
                        bestIndex = i;
                        bestValue = value;
                    }
                }

                return this.Vertices.getItem(bestIndex).$clone();
            }
        }
    });

    /** @namespace System */

    /**
     * @memberof System
     * @callback System.Func
     * @param   {number}     arg
     * @return  {boolean}
     */

    /**
     * A dynamic tree arranges data in a binary tree to accelerate
     queries such as volume queries and ray casts. Leafs are proxies
     with an AABB. In the tree we expand the proxy AABB by Settings.b2_fatAABBFactor
     so that the proxy AABB is bigger than the client object. This allows the client
     object to move by small amounts without triggering a tree update.
     Nodes are pooled and relocatable, so we use node indices rather than pointers.
     *
     * @public
     * @class FarseerPhysics.Collision.DynamicTree$1
     */
    Bridge.define("FarseerPhysics.Collision.DynamicTree$1", function (T) { return {
        statics: {
            fields: {
                NullNode: 0,
                _stack: null
            },
            ctors: {
                init: function () {
                    this.NullNode = -1;
                    this._stack = new (System.Collections.Generic.Stack$1(System.Int32)).$ctor2(256);
                }
            }
        },
        fields: {
            _freeList: 0,
            _insertionCount: 0,
            _nodeCapacity: 0,
            _nodeCount: 0,
            _nodes: null,
            /**
             * This is used incrementally traverse the tree for re-balancing.
             *
             * @instance
             * @private
             * @memberof FarseerPhysics.Collision.DynamicTree$1
             * @type number
             */
            _path: 0,
            _root: 0
        },
        ctors: {
            /**
             * Constructing the tree initializes the node pool.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTree$1
             * @memberof FarseerPhysics.Collision.DynamicTree$1
             * @return  {void}
             */
            ctor: function () {
                this.$initialize();
                this._root = FarseerPhysics.Collision.DynamicTree$1(T).NullNode;

                this._nodeCapacity = 16;
                this._nodes = System.Array.init(this._nodeCapacity, function (){
                    return new (FarseerPhysics.Collision.DynamicTreeNode$1(T))();
                }, FarseerPhysics.Collision.DynamicTreeNode$1(T));

                for (var i = 0; i < ((this._nodeCapacity - 1) | 0); i = (i + 1) | 0) {
                    this._nodes[System.Array.index(i, this._nodes)].ParentOrNext = (i + 1) | 0;
                }
                this._nodes[System.Array.index(((this._nodeCapacity - 1) | 0), this._nodes)].ParentOrNext = FarseerPhysics.Collision.DynamicTree$1(T).NullNode;
            }
        },
        methods: {
            /**
             * Create a proxy in the tree as a leaf node. We return the index
             of the node instead of a pointer so that we can grow
             the node pool.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTree$1
             * @memberof FarseerPhysics.Collision.DynamicTree$1
             * @param   {FarseerPhysics.Collision.AABB}    aabb        The aabb.
             * @param   {T}                                userData    The user data.
             * @return  {number}                                       Index of the created proxy
             */
            AddProxy: function (aabb, userData) {
                var proxyId = this.AllocateNode();

                var r = new Microsoft.Xna.Framework.Vector2.$ctor2(FarseerPhysics.Settings.AABBExtension, FarseerPhysics.Settings.AABBExtension);
                this._nodes[System.Array.index(proxyId, this._nodes)].AABB.LowerBound = Microsoft.Xna.Framework.Vector2.op_Subtraction(aabb.v.LowerBound.$clone(), r.$clone());
                this._nodes[System.Array.index(proxyId, this._nodes)].AABB.UpperBound = Microsoft.Xna.Framework.Vector2.op_Addition(aabb.v.UpperBound.$clone(), r.$clone());
                this._nodes[System.Array.index(proxyId, this._nodes)].UserData = userData;
                this._nodes[System.Array.index(proxyId, this._nodes)].LeafCount = 1;

                this.InsertLeaf(proxyId);

                return proxyId;
            },
            /**
             * Destroy a proxy. This asserts if the id is invalid.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTree$1
             * @memberof FarseerPhysics.Collision.DynamicTree$1
             * @param   {number}    proxyId    The proxy id.
             * @return  {void}
             */
            RemoveProxy: function (proxyId) {
                System.Diagnostics.Debug.Assert(0 <= proxyId && proxyId < this._nodeCapacity);
                System.Diagnostics.Debug.Assert(this._nodes[System.Array.index(proxyId, this._nodes)].IsLeaf());

                this.RemoveLeaf(proxyId);
                this.FreeNode(proxyId);
            },
            /**
             * Move a proxy with a swepted AABB. If the proxy has moved outside of its fattened AABB,
             then the proxy is removed from the tree and re-inserted. Otherwise
             the function returns immediately.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTree$1
             * @memberof FarseerPhysics.Collision.DynamicTree$1
             * @param   {number}                             proxyId         The proxy id.
             * @param   {FarseerPhysics.Collision.AABB}      aabb            The aabb.
             * @param   {Microsoft.Xna.Framework.Vector2}    displacement    The displacement.
             * @return  {boolean}                                            true if the proxy was re-inserted.
             */
            MoveProxy: function (proxyId, aabb, displacement) {
                System.Diagnostics.Debug.Assert(0 <= proxyId && proxyId < this._nodeCapacity);

                System.Diagnostics.Debug.Assert(this._nodes[System.Array.index(proxyId, this._nodes)].IsLeaf());

                if (this._nodes[System.Array.index(proxyId, this._nodes)].AABB.Contains(aabb)) {
                    return false;
                }

                this.RemoveLeaf(proxyId);

                var b = aabb.v.$clone();
                var r = new Microsoft.Xna.Framework.Vector2.$ctor2(FarseerPhysics.Settings.AABBExtension, FarseerPhysics.Settings.AABBExtension);
                b.LowerBound = Microsoft.Xna.Framework.Vector2.op_Subtraction(b.LowerBound.$clone(), r.$clone());
                b.UpperBound = Microsoft.Xna.Framework.Vector2.op_Addition(b.UpperBound.$clone(), r.$clone());

                var d = Microsoft.Xna.Framework.Vector2.op_Multiply$2(FarseerPhysics.Settings.AABBMultiplier, displacement.$clone());

                if (d.X < 0.0) {
                    b.LowerBound.X += d.X;
                } else {
                    b.UpperBound.X += d.X;
                }

                if (d.Y < 0.0) {
                    b.LowerBound.Y += d.Y;
                } else {
                    b.UpperBound.Y += d.Y;
                }

                this._nodes[System.Array.index(proxyId, this._nodes)].AABB = b.$clone();

                this.InsertLeaf(proxyId);
                return true;
            },
            /**
             * Perform some iterations to re-balance the tree.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTree$1
             * @memberof FarseerPhysics.Collision.DynamicTree$1
             * @param   {number}    iterations    The iterations.
             * @return  {void}
             */
            Rebalance: function (iterations) {
                if (this._root === FarseerPhysics.Collision.DynamicTree$1(T).NullNode) {
                    return;
                }

                for (var i = 0; i < iterations; i = (i + 1) | 0) {
                    var node = this._root;

                    var bit = 0;
                    while (this._nodes[System.Array.index(node, this._nodes)].IsLeaf() === false) {
                        var selector = (this._path >> bit) & 1;

                        node = (selector === 0) ? this._nodes[System.Array.index(node, this._nodes)].Child1 : this._nodes[System.Array.index(node, this._nodes)].Child2;

                        bit = (((bit + 1) | 0)) & 31;
                    }
                    this._path = (this._path + 1) | 0;

                    this.RemoveLeaf(node);
                    this.InsertLeaf(node);
                }
            },
            /**
             * Get proxy user data.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTree$1
             * @memberof FarseerPhysics.Collision.DynamicTree$1
             * @param   {number}      proxyId    The proxy id.
             * @param   {Function}    [name]
             * @return  {T}                      the proxy user data or 0 if the id is invalid.
             */
            GetUserData: function (proxyId) {
                System.Diagnostics.Debug.Assert(0 <= proxyId && proxyId < this._nodeCapacity);
                return this._nodes[System.Array.index(proxyId, this._nodes)].UserData;
            },
            /**
             * Get the fat AABB for a proxy.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTree$1
             * @memberof FarseerPhysics.Collision.DynamicTree$1
             * @param   {number}                           proxyId    The proxy id.
             * @param   {FarseerPhysics.Collision.AABB}    fatAABB    The fat AABB.
             * @return  {void}
             */
            GetFatAABB: function (proxyId, fatAABB) {
                System.Diagnostics.Debug.Assert(0 <= proxyId && proxyId < this._nodeCapacity);
                fatAABB.v = this._nodes[System.Array.index(proxyId, this._nodes)].AABB.$clone();
            },
            /**
             * Compute the height of the binary tree in O(N) time. Should not be
             called often.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTree$1
             * @memberof FarseerPhysics.Collision.DynamicTree$1
             * @return  {number}
             */
            ComputeHeight: function () {
                return this.ComputeHeight$1(this._root);
            },
            ComputeHeight$1: function (nodeId) {
                if (nodeId === FarseerPhysics.Collision.DynamicTree$1(T).NullNode) {
                    return 0;
                }

                System.Diagnostics.Debug.Assert(0 <= nodeId && nodeId < this._nodeCapacity);
                var node = this._nodes[System.Array.index(nodeId, this._nodes)].$clone();
                var height1 = this.ComputeHeight$1(node.Child1);
                var height2 = this.ComputeHeight$1(node.Child2);
                return ((1 + Math.max(height1, height2)) | 0);
            },
            /**
             * Query an AABB for overlapping proxies. The callback class
             is called for each proxy that overlaps the supplied AABB.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTree$1
             * @memberof FarseerPhysics.Collision.DynamicTree$1
             * @param   {System.Func}                      callback    The callback.
             * @param   {FarseerPhysics.Collision.AABB}    aabb        The aabb.
             * @return  {void}
             */
            Query: function (callback, aabb) {
                FarseerPhysics.Collision.DynamicTree$1(T)._stack.Clear();
                FarseerPhysics.Collision.DynamicTree$1(T)._stack.Push(this._root);

                while (FarseerPhysics.Collision.DynamicTree$1(T)._stack.Count > 0) {
                    var nodeId = FarseerPhysics.Collision.DynamicTree$1(T)._stack.Pop();
                    if (nodeId === FarseerPhysics.Collision.DynamicTree$1(T).NullNode) {
                        continue;
                    }

                    var node = this._nodes[System.Array.index(nodeId, this._nodes)].$clone();

                    if (FarseerPhysics.Collision.AABB.TestOverlap$1(Bridge.ref(node, "AABB"), aabb)) {
                        if (node.IsLeaf()) {
                            var proceed = callback(nodeId);
                            if (proceed === false) {
                                return;
                            }
                        } else {
                            FarseerPhysics.Collision.DynamicTree$1(T)._stack.Push(node.Child1);
                            FarseerPhysics.Collision.DynamicTree$1(T)._stack.Push(node.Child2);
                        }
                    }
                }
            },
            /**
             * Ray-cast against the proxies in the tree. This relies on the callback
             to perform a exact ray-cast in the case were the proxy contains a Shape.
             The callback also performs the any collision filtering. This has performance
             roughly equal to k * log(n), where k is the number of collisions and n is the
             number of proxies in the tree.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTree$1
             * @memberof FarseerPhysics.Collision.DynamicTree$1
             * @param   {System.Func}                              callback    A callback class that is called for each proxy that is hit by the ray.
             * @param   {FarseerPhysics.Collision.RayCastInput}    input       The ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).
             * @return  {void}
             */
            RayCast: function (callback, input) {
                var p1 = { v : input.v.Point1.$clone() };
                var p2 = input.v.Point2.$clone();
                var r = Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.$clone(), p1.v.$clone());
                System.Diagnostics.Debug.Assert(r.LengthSquared() > 0.0);
                r.Normalize();

                var absV = FarseerPhysics.Common.MathUtils.Abs(new Microsoft.Xna.Framework.Vector2.$ctor2(-r.Y, r.X));


                var maxFraction = input.v.MaxFraction;

                var segmentAABB = { v : new FarseerPhysics.Collision.AABB.ctor() };
                {
                    var t = { v : Microsoft.Xna.Framework.Vector2.op_Addition(p1.v.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(maxFraction, (Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.$clone(), p1.v.$clone())))) };
                    Microsoft.Xna.Framework.Vector2.Min$1(p1, t, Bridge.ref(segmentAABB.v, "LowerBound"));
                    Microsoft.Xna.Framework.Vector2.Max$1(p1, t, Bridge.ref(segmentAABB.v, "UpperBound"));
                }

                FarseerPhysics.Collision.DynamicTree$1(T)._stack.Clear();
                FarseerPhysics.Collision.DynamicTree$1(T)._stack.Push(this._root);

                while (FarseerPhysics.Collision.DynamicTree$1(T)._stack.Count > 0) {
                    var nodeId = FarseerPhysics.Collision.DynamicTree$1(T)._stack.Pop();
                    if (nodeId === FarseerPhysics.Collision.DynamicTree$1(T).NullNode) {
                        continue;
                    }

                    var node = this._nodes[System.Array.index(nodeId, this._nodes)].$clone();

                    if (FarseerPhysics.Collision.AABB.TestOverlap$1(Bridge.ref(node, "AABB"), segmentAABB) === false) {
                        continue;
                    }

                    var c = node.AABB.Center.$clone();
                    var h = node.AABB.Extents.$clone();
                    var separation = Math.abs(Microsoft.Xna.Framework.Vector2.Dot(new Microsoft.Xna.Framework.Vector2.$ctor2(-r.Y, r.X), Microsoft.Xna.Framework.Vector2.op_Subtraction(p1.v.$clone(), c.$clone()))) - Microsoft.Xna.Framework.Vector2.Dot(absV.$clone(), h.$clone());
                    if (separation > 0.0) {
                        continue;
                    }

                    if (node.IsLeaf()) {
                        var subInput = new FarseerPhysics.Collision.RayCastInput();
                        subInput.Point1 = input.v.Point1.$clone();
                        subInput.Point2 = input.v.Point2.$clone();
                        subInput.MaxFraction = maxFraction;

                        var value = callback(subInput.$clone(), nodeId);

                        if (value === 0.0) {
                            return;
                        }

                        if (value > 0.0) {
                            maxFraction = value;
                            var t1 = Microsoft.Xna.Framework.Vector2.op_Addition(p1.v.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(maxFraction, (Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.$clone(), p1.v.$clone()))));
                            segmentAABB.v.LowerBound = Microsoft.Xna.Framework.Vector2.Min(p1.v.$clone(), t1.$clone());
                            segmentAABB.v.UpperBound = Microsoft.Xna.Framework.Vector2.Max(p1.v.$clone(), t1.$clone());
                        }
                    } else {
                        FarseerPhysics.Collision.DynamicTree$1(T)._stack.Push(node.Child1);
                        FarseerPhysics.Collision.DynamicTree$1(T)._stack.Push(node.Child2);
                    }
                }
            },
            CountLeaves: function (nodeId) {
                if (nodeId === FarseerPhysics.Collision.DynamicTree$1(T).NullNode) {
                    return 0;
                }

                System.Diagnostics.Debug.Assert(0 <= nodeId && nodeId < this._nodeCapacity);
                var node = this._nodes[System.Array.index(nodeId, this._nodes)].$clone();

                if (node.IsLeaf()) {
                    System.Diagnostics.Debug.Assert(node.LeafCount === 1);
                    return 1;
                }

                var count1 = this.CountLeaves(node.Child1);
                var count2 = this.CountLeaves(node.Child2);
                var count = (count1 + count2) | 0;
                System.Diagnostics.Debug.Assert(count === node.LeafCount);
                return count;
            },
            Validate: function () {
                this.CountLeaves(this._root);
            },
            AllocateNode: function () {
                if (this._freeList === FarseerPhysics.Collision.DynamicTree$1(T).NullNode) {
                    System.Diagnostics.Debug.Assert(this._nodeCount === this._nodeCapacity);

                    var oldNodes = this._nodes;
                    this._nodeCapacity = Bridge.Int.mul(this._nodeCapacity, 2);
                    this._nodes = System.Array.init(this._nodeCapacity, function (){
                        return new (FarseerPhysics.Collision.DynamicTreeNode$1(T))();
                    }, FarseerPhysics.Collision.DynamicTreeNode$1(T));
                    System.Array.copy(oldNodes, 0, this._nodes, 0, this._nodeCount);

                    for (var i = this._nodeCount; i < ((this._nodeCapacity - 1) | 0); i = (i + 1) | 0) {
                        this._nodes[System.Array.index(i, this._nodes)].ParentOrNext = (i + 1) | 0;
                    }
                    this._nodes[System.Array.index(((this._nodeCapacity - 1) | 0), this._nodes)].ParentOrNext = FarseerPhysics.Collision.DynamicTree$1(T).NullNode;
                    this._freeList = this._nodeCount;
                }

                var nodeId = this._freeList;
                this._freeList = this._nodes[System.Array.index(nodeId, this._nodes)].ParentOrNext;
                this._nodes[System.Array.index(nodeId, this._nodes)].ParentOrNext = FarseerPhysics.Collision.DynamicTree$1(T).NullNode;
                this._nodes[System.Array.index(nodeId, this._nodes)].Child1 = FarseerPhysics.Collision.DynamicTree$1(T).NullNode;
                this._nodes[System.Array.index(nodeId, this._nodes)].Child2 = FarseerPhysics.Collision.DynamicTree$1(T).NullNode;
                this._nodes[System.Array.index(nodeId, this._nodes)].LeafCount = 0;
                this._nodeCount = (this._nodeCount + 1) | 0;
                return nodeId;
            },
            FreeNode: function (nodeId) {
                System.Diagnostics.Debug.Assert(0 <= nodeId && nodeId < this._nodeCapacity);
                System.Diagnostics.Debug.Assert(0 < this._nodeCount);
                this._nodes[System.Array.index(nodeId, this._nodes)].ParentOrNext = this._freeList;
                this._freeList = nodeId;
                this._nodeCount = (this._nodeCount - 1) | 0;
            },
            InsertLeaf: function (leaf) {
                this._insertionCount = (this._insertionCount + 1) | 0;

                if (this._root === FarseerPhysics.Collision.DynamicTree$1(T).NullNode) {
                    this._root = leaf;
                    this._nodes[System.Array.index(this._root, this._nodes)].ParentOrNext = FarseerPhysics.Collision.DynamicTree$1(T).NullNode;
                    return;
                }

                var leafAABB = { v : this._nodes[System.Array.index(leaf, this._nodes)].AABB.$clone() };
                var sibling = this._root;
                while (this._nodes[System.Array.index(sibling, this._nodes)].IsLeaf() === false) {
                    var child1 = this._nodes[System.Array.index(sibling, this._nodes)].Child1;
                    var child2 = this._nodes[System.Array.index(sibling, this._nodes)].Child2;

                    this._nodes[System.Array.index(sibling, this._nodes)].AABB.Combine(leafAABB);
                    this._nodes[System.Array.index(sibling, this._nodes)].LeafCount = (this._nodes[System.Array.index(sibling, this._nodes)].LeafCount + 1) | 0;

                    var siblingArea = this._nodes[System.Array.index(sibling, this._nodes)].AABB.Perimeter;
                    var parentAABB = new FarseerPhysics.Collision.AABB.ctor();
                    parentAABB.Combine$1(Bridge.ref(this._nodes[System.Array.index(sibling, this._nodes)], "AABB"), leafAABB);
                    var parentArea = parentAABB.Perimeter;
                    var cost1 = 2.0 * parentArea;

                    var inheritanceCost = 2.0 * (parentArea - siblingArea);

                    var cost2;
                    if (this._nodes[System.Array.index(child1, this._nodes)].IsLeaf()) {
                        var aabb = new FarseerPhysics.Collision.AABB.ctor();
                        aabb.Combine$1(leafAABB, Bridge.ref(this._nodes[System.Array.index(child1, this._nodes)], "AABB"));
                        cost2 = aabb.Perimeter + inheritanceCost;
                    } else {
                        var aabb1 = new FarseerPhysics.Collision.AABB.ctor();
                        aabb1.Combine$1(leafAABB, Bridge.ref(this._nodes[System.Array.index(child1, this._nodes)], "AABB"));
                        var oldArea = this._nodes[System.Array.index(child1, this._nodes)].AABB.Perimeter;
                        var newArea = aabb1.Perimeter;
                        cost2 = (newArea - oldArea) + inheritanceCost;
                    }

                    var cost3;
                    if (this._nodes[System.Array.index(child2, this._nodes)].IsLeaf()) {
                        var aabb2 = new FarseerPhysics.Collision.AABB.ctor();
                        aabb2.Combine$1(leafAABB, Bridge.ref(this._nodes[System.Array.index(child2, this._nodes)], "AABB"));
                        cost3 = aabb2.Perimeter + inheritanceCost;
                    } else {
                        var aabb3 = new FarseerPhysics.Collision.AABB.ctor();
                        aabb3.Combine$1(leafAABB, Bridge.ref(this._nodes[System.Array.index(child2, this._nodes)], "AABB"));
                        var oldArea1 = this._nodes[System.Array.index(child2, this._nodes)].AABB.Perimeter;
                        var newArea1 = aabb3.Perimeter;
                        cost3 = newArea1 - oldArea1 + inheritanceCost;
                    }

                    if (cost1 < cost2 && cost1 < cost3) {
                        break;
                    }

                    this._nodes[System.Array.index(sibling, this._nodes)].AABB.Combine(leafAABB);

                    if (cost2 < cost3) {
                        sibling = child1;
                    } else {
                        sibling = child2;
                    }
                }

                var oldParent = this._nodes[System.Array.index(sibling, this._nodes)].ParentOrNext;
                var newParent = this.AllocateNode();
                this._nodes[System.Array.index(newParent, this._nodes)].ParentOrNext = oldParent;
                this._nodes[System.Array.index(newParent, this._nodes)].UserData = Bridge.getDefaultValue(T);
                this._nodes[System.Array.index(newParent, this._nodes)].AABB.Combine$1(leafAABB, Bridge.ref(this._nodes[System.Array.index(sibling, this._nodes)], "AABB"));
                this._nodes[System.Array.index(newParent, this._nodes)].LeafCount = (this._nodes[System.Array.index(sibling, this._nodes)].LeafCount + 1) | 0;

                if (oldParent !== FarseerPhysics.Collision.DynamicTree$1(T).NullNode) {
                    if (this._nodes[System.Array.index(oldParent, this._nodes)].Child1 === sibling) {
                        this._nodes[System.Array.index(oldParent, this._nodes)].Child1 = newParent;
                    } else {
                        this._nodes[System.Array.index(oldParent, this._nodes)].Child2 = newParent;
                    }

                    this._nodes[System.Array.index(newParent, this._nodes)].Child1 = sibling;
                    this._nodes[System.Array.index(newParent, this._nodes)].Child2 = leaf;
                    this._nodes[System.Array.index(sibling, this._nodes)].ParentOrNext = newParent;
                    this._nodes[System.Array.index(leaf, this._nodes)].ParentOrNext = newParent;
                } else {
                    this._nodes[System.Array.index(newParent, this._nodes)].Child1 = sibling;
                    this._nodes[System.Array.index(newParent, this._nodes)].Child2 = leaf;
                    this._nodes[System.Array.index(sibling, this._nodes)].ParentOrNext = newParent;
                    this._nodes[System.Array.index(leaf, this._nodes)].ParentOrNext = newParent;
                    this._root = newParent;
                }
            },
            RemoveLeaf: function (leaf) {
                if (leaf === this._root) {
                    this._root = FarseerPhysics.Collision.DynamicTree$1(T).NullNode;
                    return;
                }

                var parent = this._nodes[System.Array.index(leaf, this._nodes)].ParentOrNext;
                var grandParent = this._nodes[System.Array.index(parent, this._nodes)].ParentOrNext;
                var sibling;
                if (this._nodes[System.Array.index(parent, this._nodes)].Child1 === leaf) {
                    sibling = this._nodes[System.Array.index(parent, this._nodes)].Child2;
                } else {
                    sibling = this._nodes[System.Array.index(parent, this._nodes)].Child1;
                }

                if (grandParent !== FarseerPhysics.Collision.DynamicTree$1(T).NullNode) {
                    if (this._nodes[System.Array.index(grandParent, this._nodes)].Child1 === parent) {
                        this._nodes[System.Array.index(grandParent, this._nodes)].Child1 = sibling;
                    } else {
                        this._nodes[System.Array.index(grandParent, this._nodes)].Child2 = sibling;
                    }
                    this._nodes[System.Array.index(sibling, this._nodes)].ParentOrNext = grandParent;
                    this.FreeNode(parent);

                    parent = grandParent;
                    while (parent !== FarseerPhysics.Collision.DynamicTree$1(T).NullNode) {
                        this._nodes[System.Array.index(parent, this._nodes)].AABB.Combine$1(Bridge.ref(this._nodes[System.Array.index(this._nodes[System.Array.index(parent, this._nodes)].Child1, this._nodes)], "AABB"), Bridge.ref(this._nodes[System.Array.index(this._nodes[System.Array.index(parent, this._nodes)].Child2, this._nodes)], "AABB"));

                        System.Diagnostics.Debug.Assert(this._nodes[System.Array.index(parent, this._nodes)].LeafCount > 0);
                        this._nodes[System.Array.index(parent, this._nodes)].LeafCount = (this._nodes[System.Array.index(parent, this._nodes)].LeafCount - 1) | 0;

                        parent = this._nodes[System.Array.index(parent, this._nodes)].ParentOrNext;
                    }
                } else {
                    this._root = sibling;
                    this._nodes[System.Array.index(sibling, this._nodes)].ParentOrNext = FarseerPhysics.Collision.DynamicTree$1(T).NullNode;
                    this.FreeNode(parent);
                }
            }
        }
    }; });

    Bridge.define("FarseerPhysics.Collision.IBroadPhase", {
        $kind: "interface"
    });

    /**
     * A node in the dynamic tree. The client does not interact with this directly.
     *
     * @class FarseerPhysics.Collision.DynamicTreeNode$1
     */
    Bridge.define("FarseerPhysics.Collision.DynamicTreeNode$1", function (T) { return {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (FarseerPhysics.Collision.DynamicTreeNode$1(T))(); }
            }
        },
        fields: {
            /**
             * This is the fattened AABB.
             *
             * @instance
             * @memberof FarseerPhysics.Collision.DynamicTreeNode$1
             * @type FarseerPhysics.Collision.AABB
             */
            AABB: null,
            Child1: 0,
            Child2: 0,
            LeafCount: 0,
            ParentOrNext: 0,
            UserData: Bridge.getDefaultValue(T)
        },
        ctors: {
            init: function () {
                this.AABB = new FarseerPhysics.Collision.AABB();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            IsLeaf: function () {
                return this.Child1 === FarseerPhysics.Collision.DynamicTree$1(T).NullNode;
            },
            getHashCode: function () {
                var h = Bridge.addHash([4372343954, this.AABB, this.Child1, this.Child2, this.LeafCount, this.ParentOrNext, this.UserData]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.DynamicTreeNode$1(T))) {
                    return false;
                }
                return Bridge.equals(this.AABB, o.AABB) && Bridge.equals(this.Child1, o.Child1) && Bridge.equals(this.Child2, o.Child2) && Bridge.equals(this.LeafCount, o.LeafCount) && Bridge.equals(this.ParentOrNext, o.ParentOrNext) && Bridge.equals(this.UserData, o.UserData);
            },
            $clone: function (to) {
                var s = to || new (FarseerPhysics.Collision.DynamicTreeNode$1(T))();
                s.AABB = this.AABB.$clone();
                s.Child1 = this.Child1;
                s.Child2 = this.Child2;
                s.LeafCount = this.LeafCount;
                s.ParentOrNext = this.ParentOrNext;
                s.UserData = this.UserData;
                return s;
            }
        }
    }; });

    Bridge.define("FarseerPhysics.Collision.EPAxis", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.EPAxis(); }
            }
        },
        fields: {
            Index: 0,
            Separation: 0,
            Type: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([2017575854, this.Index, this.Separation, this.Type]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.EPAxis)) {
                    return false;
                }
                return Bridge.equals(this.Index, o.Index) && Bridge.equals(this.Separation, o.Separation) && Bridge.equals(this.Type, o.Type);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.EPAxis();
                s.Index = this.Index;
                s.Separation = this.Separation;
                s.Type = this.Type;
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.EPAxisType", {
        $kind: "enum",
        statics: {
            fields: {
                Unknown: 0,
                EdgeA: 1,
                EdgeB: 2
            }
        }
    });

    /**
     * This lets us treate and edge shape and a polygon in the same
     way in the SAT collider.
     *
     * @public
     * @class FarseerPhysics.Collision.EPProxy
     */
    Bridge.define("FarseerPhysics.Collision.EPProxy", {
        fields: {
            Centroid: null,
            Count: 0,
            Normals: null,
            Vertices: null
        },
        ctors: {
            init: function () {
                this.Centroid = new Microsoft.Xna.Framework.Vector2();
                this.Normals = System.Array.init(FarseerPhysics.Settings.MaxPolygonVertices, function (){
                    return new Microsoft.Xna.Framework.Vector2();
                }, Microsoft.Xna.Framework.Vector2);
                this.Vertices = System.Array.init(FarseerPhysics.Settings.MaxPolygonVertices, function (){
                    return new Microsoft.Xna.Framework.Vector2();
                }, Microsoft.Xna.Framework.Vector2);
            }
        }
    });

    /**
     * Edge shape plus more stuff.
     *
     * @public
     * @class FarseerPhysics.Collision.FatEdge
     */
    Bridge.define("FarseerPhysics.Collision.FatEdge", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.FatEdge(); }
            }
        },
        fields: {
            HasVertex0: false,
            HasVertex3: false,
            Normal: null,
            V0: null,
            V1: null,
            V2: null,
            V3: null
        },
        ctors: {
            init: function () {
                this.Normal = new Microsoft.Xna.Framework.Vector2();
                this.V0 = new Microsoft.Xna.Framework.Vector2();
                this.V1 = new Microsoft.Xna.Framework.Vector2();
                this.V2 = new Microsoft.Xna.Framework.Vector2();
                this.V3 = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1171900586, this.HasVertex0, this.HasVertex3, this.Normal, this.V0, this.V1, this.V2, this.V3]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.FatEdge)) {
                    return false;
                }
                return Bridge.equals(this.HasVertex0, o.HasVertex0) && Bridge.equals(this.HasVertex3, o.HasVertex3) && Bridge.equals(this.Normal, o.Normal) && Bridge.equals(this.V0, o.V0) && Bridge.equals(this.V1, o.V1) && Bridge.equals(this.V2, o.V2) && Bridge.equals(this.V3, o.V3);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.FatEdge();
                s.HasVertex0 = this.HasVertex0;
                s.HasVertex3 = this.HasVertex3;
                s.Normal = this.Normal.$clone();
                s.V0 = this.V0.$clone();
                s.V1 = this.V1.$clone();
                s.V2 = this.V2.$clone();
                s.V3 = this.V3.$clone();
                return s;
            }
        }
    });

    /**
     * A manifold for two touching convex Shapes.
     Box2D supports multiple types of contact:
     - clip point versus plane with radius
     - point versus point with radius (circles)
     The local point usage depends on the manifold type:
     -ShapeType.Circles: the local center of circleA
     -SeparationFunction.FaceA: the center of faceA
     -SeparationFunction.FaceB: the center of faceB
     Similarly the local normal usage:
     -ShapeType.Circles: not used
     -SeparationFunction.FaceA: the normal on polygonA
     -SeparationFunction.FaceB: the normal on polygonB
     We store contacts in this way so that position correction can
     account for movement, which is critical for continuous physics.
     All contact scenarios must be expressed in one of these types.
     This structure is stored across time steps, so we keep it small.
     *
     * @public
     * @class FarseerPhysics.Collision.Manifold
     */
    Bridge.define("FarseerPhysics.Collision.Manifold", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.Manifold(); }
            }
        },
        fields: {
            /**
             * Not use for Type.SeparationFunction.Points
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Manifold
             * @type Microsoft.Xna.Framework.Vector2
             */
            LocalNormal: null,
            /**
             * Usage depends on manifold type
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Manifold
             * @type Microsoft.Xna.Framework.Vector2
             */
            LocalPoint: null,
            /**
             * The number of manifold points
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Manifold
             * @type number
             */
            PointCount: 0,
            /**
             * The points of contact
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Manifold
             * @type FarseerPhysics.Common.FixedArray2$1
             */
            Points: null,
            Type: 0
        },
        ctors: {
            init: function () {
                this.LocalNormal = new Microsoft.Xna.Framework.Vector2();
                this.LocalPoint = new Microsoft.Xna.Framework.Vector2();
                this.Points = new (FarseerPhysics.Common.FixedArray2$1(FarseerPhysics.Collision.ManifoldPoint))();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3453669555, this.LocalNormal, this.LocalPoint, this.PointCount, this.Points, this.Type]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.Manifold)) {
                    return false;
                }
                return Bridge.equals(this.LocalNormal, o.LocalNormal) && Bridge.equals(this.LocalPoint, o.LocalPoint) && Bridge.equals(this.PointCount, o.PointCount) && Bridge.equals(this.Points, o.Points) && Bridge.equals(this.Type, o.Type);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.Manifold();
                s.LocalNormal = this.LocalNormal.$clone();
                s.LocalPoint = this.LocalPoint.$clone();
                s.PointCount = this.PointCount;
                s.Points = this.Points.$clone();
                s.Type = this.Type;
                return s;
            }
        }
    });

    /**
     * A manifold point is a contact point belonging to a contact
     manifold. It holds details related to the geometry and dynamics
     of the contact points.
     The local point usage depends on the manifold type:
     -ShapeType.Circles: the local center of circleB
     -SeparationFunction.FaceA: the local center of cirlceB or the clip point of polygonB
     -SeparationFunction.FaceB: the clip point of polygonA
     This structure is stored across time steps, so we keep it small.
     Note: the impulses are used for internal caching and may not
     provide reliable contact forces, especially for high speed collisions.
     *
     * @public
     * @class FarseerPhysics.Collision.ManifoldPoint
     */
    Bridge.define("FarseerPhysics.Collision.ManifoldPoint", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.ManifoldPoint(); }
            }
        },
        fields: {
            /**
             * Uniquely identifies a contact point between two Shapes
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.ManifoldPoint
             * @type FarseerPhysics.Collision.ContactID
             */
            Id: null,
            LocalPoint: null,
            NormalImpulse: 0,
            TangentImpulse: 0
        },
        ctors: {
            init: function () {
                this.Id = new FarseerPhysics.Collision.ContactID();
                this.LocalPoint = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5306073207, this.Id, this.LocalPoint, this.NormalImpulse, this.TangentImpulse]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.ManifoldPoint)) {
                    return false;
                }
                return Bridge.equals(this.Id, o.Id) && Bridge.equals(this.LocalPoint, o.LocalPoint) && Bridge.equals(this.NormalImpulse, o.NormalImpulse) && Bridge.equals(this.TangentImpulse, o.TangentImpulse);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.ManifoldPoint();
                s.Id = this.Id.$clone();
                s.LocalPoint = this.LocalPoint.$clone();
                s.NormalImpulse = this.NormalImpulse;
                s.TangentImpulse = this.TangentImpulse;
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.ManifoldType", {
        $kind: "enum",
        statics: {
            fields: {
                Circles: 0,
                FaceA: 1,
                FaceB: 2
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.Pair", {
        inherits: function () { return [System.IComparable$1(FarseerPhysics.Collision.Pair)]; },
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.Pair(); }
            }
        },
        fields: {
            ProxyIdA: 0,
            ProxyIdB: 0
        },
        alias: ["compareTo", ["System$IComparable$1$FarseerPhysics$Collision$Pair$compareTo", "System$IComparable$1$compareTo"]],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            compareTo: function (other) {
                if (this.ProxyIdA < other.ProxyIdA) {
                    return -1;
                }
                if (this.ProxyIdA === other.ProxyIdA) {
                    if (this.ProxyIdB < other.ProxyIdB) {
                        return -1;
                    }
                    if (this.ProxyIdB === other.ProxyIdB) {
                        return 0;
                    }
                }

                return 1;
            },
            getHashCode: function () {
                var h = Bridge.addHash([1919508816, this.ProxyIdA, this.ProxyIdB]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.Pair)) {
                    return false;
                }
                return Bridge.equals(this.ProxyIdA, o.ProxyIdA) && Bridge.equals(this.ProxyIdB, o.ProxyIdB);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.Pair();
                s.ProxyIdA = this.ProxyIdA;
                s.ProxyIdB = this.ProxyIdB;
                return s;
            }
        }
    });

    /**
     * This is used for determining the state of contact points.
     *
     * @public
     * @class FarseerPhysics.Collision.PointState
     */
    Bridge.define("FarseerPhysics.Collision.PointState", {
        $kind: "enum",
        statics: {
            fields: {
                /**
                 * Point does not exist
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Collision.PointState
                 * @constant
                 * @default 0
                 * @type FarseerPhysics.Collision.PointState
                 */
                Null: 0,
                /**
                 * Point was added in the update
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Collision.PointState
                 * @constant
                 * @default 1
                 * @type FarseerPhysics.Collision.PointState
                 */
                Add: 1,
                /**
                 * Point persisted across the update
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Collision.PointState
                 * @constant
                 * @default 2
                 * @type FarseerPhysics.Collision.PointState
                 */
                Persist: 2,
                /**
                 * Point was removed in the update
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Collision.PointState
                 * @constant
                 * @default 3
                 * @type FarseerPhysics.Collision.PointState
                 */
                Remove: 3
            }
        }
    });

    /**
     * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).
     *
     * @public
     * @class FarseerPhysics.Collision.RayCastInput
     */
    Bridge.define("FarseerPhysics.Collision.RayCastInput", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.RayCastInput(); }
            }
        },
        fields: {
            MaxFraction: 0,
            Point1: null,
            Point2: null
        },
        ctors: {
            init: function () {
                this.Point1 = new Microsoft.Xna.Framework.Vector2();
                this.Point2 = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([4318250273, this.MaxFraction, this.Point1, this.Point2]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.RayCastInput)) {
                    return false;
                }
                return Bridge.equals(this.MaxFraction, o.MaxFraction) && Bridge.equals(this.Point1, o.Point1) && Bridge.equals(this.Point2, o.Point2);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.RayCastInput();
                s.MaxFraction = this.MaxFraction;
                s.Point1 = this.Point1.$clone();
                s.Point2 = this.Point2.$clone();
                return s;
            }
        }
    });

    /**
     * Ray-cast output data.  The ray hits at p1 + fraction * (p2 - p1), where p1 and p2
     come from RayCastInput.
     *
     * @public
     * @class FarseerPhysics.Collision.RayCastOutput
     */
    Bridge.define("FarseerPhysics.Collision.RayCastOutput", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.RayCastOutput(); }
            }
        },
        fields: {
            Fraction: 0,
            Normal: null
        },
        ctors: {
            init: function () {
                this.Normal = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([4435364252, this.Fraction, this.Normal]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.RayCastOutput)) {
                    return false;
                }
                return Bridge.equals(this.Fraction, o.Fraction) && Bridge.equals(this.Normal, o.Normal);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.RayCastOutput();
                s.Fraction = this.Fraction;
                s.Normal = this.Normal.$clone();
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.SeparationFunction", {
        statics: {
            fields: {
                _axis: null,
                _localPoint: null,
                _proxyA: null,
                _proxyB: null,
                _sweepA: null,
                _sweepB: null,
                _type: 0
            },
            ctors: {
                init: function () {
                    this._axis = new Microsoft.Xna.Framework.Vector2();
                    this._localPoint = new Microsoft.Xna.Framework.Vector2();
                    this._sweepA = new FarseerPhysics.Common.Sweep();
                    this._sweepB = new FarseerPhysics.Common.Sweep();
                    this._proxyA = new FarseerPhysics.Collision.DistanceProxy();
                    this._proxyB = new FarseerPhysics.Collision.DistanceProxy();
                }
            },
            methods: {
                Set: function (cache, proxyA, sweepA, proxyB, sweepB, t1) {
                    FarseerPhysics.Collision.SeparationFunction._localPoint = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    FarseerPhysics.Collision.SeparationFunction._proxyA = proxyA;
                    FarseerPhysics.Collision.SeparationFunction._proxyB = proxyB;
                    var count = cache.v.Count;
                    System.Diagnostics.Debug.Assert(0 < count && count < 3);

                    FarseerPhysics.Collision.SeparationFunction._sweepA = sweepA.v.$clone();
                    FarseerPhysics.Collision.SeparationFunction._sweepB = sweepB.v.$clone();

                    var xfA = { v : new FarseerPhysics.Common.Transform() }, xfB = { v : new FarseerPhysics.Common.Transform() };
                    FarseerPhysics.Collision.SeparationFunction._sweepA.GetTransform(xfA, t1);
                    FarseerPhysics.Collision.SeparationFunction._sweepB.GetTransform(xfB, t1);

                    if (count === 1) {
                        FarseerPhysics.Collision.SeparationFunction._type = FarseerPhysics.Collision.SeparationFunctionType.Points;
                        var localPointA = FarseerPhysics.Collision.SeparationFunction._proxyA.Vertices.getItem(cache.v.IndexA.getItem(0)).$clone();
                        var localPointB = FarseerPhysics.Collision.SeparationFunction._proxyB.Vertices.getItem(cache.v.IndexB.getItem(0)).$clone();
                        var pointA = FarseerPhysics.Common.MathUtils.Multiply$2(xfA, localPointA.$clone());
                        var pointB = FarseerPhysics.Common.MathUtils.Multiply$2(xfB, localPointB.$clone());
                        FarseerPhysics.Collision.SeparationFunction._axis = Microsoft.Xna.Framework.Vector2.op_Subtraction(pointB.$clone(), pointA.$clone());
                        FarseerPhysics.Collision.SeparationFunction._axis.Normalize();
                        return;
                    } else if (cache.v.IndexA.getItem(0) === cache.v.IndexA.getItem(1)) {
                        FarseerPhysics.Collision.SeparationFunction._type = FarseerPhysics.Collision.SeparationFunctionType.FaceB;
                        var localPointB1 = proxyB.Vertices.getItem(cache.v.IndexB.getItem(0)).$clone();
                        var localPointB2 = proxyB.Vertices.getItem(cache.v.IndexB.getItem(1)).$clone();

                        var a = Microsoft.Xna.Framework.Vector2.op_Subtraction(localPointB2.$clone(), localPointB1.$clone());
                        FarseerPhysics.Collision.SeparationFunction._axis = new Microsoft.Xna.Framework.Vector2.$ctor2(a.Y, -a.X);
                        FarseerPhysics.Collision.SeparationFunction._axis.Normalize();
                        var normal = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfB.v, "R"), FarseerPhysics.Collision.SeparationFunction._axis.$clone());

                        FarseerPhysics.Collision.SeparationFunction._localPoint = Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, (Microsoft.Xna.Framework.Vector2.op_Addition(localPointB1.$clone(), localPointB2.$clone())));
                        var pointB1 = FarseerPhysics.Common.MathUtils.Multiply$2(xfB, FarseerPhysics.Collision.SeparationFunction._localPoint.$clone());

                        var localPointA1 = proxyA.Vertices.getItem(cache.v.IndexA.getItem(0)).$clone();
                        var pointA1 = FarseerPhysics.Common.MathUtils.Multiply$2(xfA, localPointA1.$clone());

                        var s = Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(pointA1.$clone(), pointB1.$clone()), normal.$clone());
                        if (s < 0.0) {
                            FarseerPhysics.Collision.SeparationFunction._axis = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(FarseerPhysics.Collision.SeparationFunction._axis.$clone());
                            s = -s;
                        }
                        return;
                    } else {
                        FarseerPhysics.Collision.SeparationFunction._type = FarseerPhysics.Collision.SeparationFunctionType.FaceA;
                        var localPointA11 = FarseerPhysics.Collision.SeparationFunction._proxyA.Vertices.getItem(cache.v.IndexA.getItem(0)).$clone();
                        var localPointA2 = FarseerPhysics.Collision.SeparationFunction._proxyA.Vertices.getItem(cache.v.IndexA.getItem(1)).$clone();

                        var a1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(localPointA2.$clone(), localPointA11.$clone());
                        FarseerPhysics.Collision.SeparationFunction._axis = new Microsoft.Xna.Framework.Vector2.$ctor2(a1.Y, -a1.X);
                        FarseerPhysics.Collision.SeparationFunction._axis.Normalize();
                        var normal1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfA.v, "R"), FarseerPhysics.Collision.SeparationFunction._axis.$clone());

                        FarseerPhysics.Collision.SeparationFunction._localPoint = Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, (Microsoft.Xna.Framework.Vector2.op_Addition(localPointA11.$clone(), localPointA2.$clone())));
                        var pointA2 = FarseerPhysics.Common.MathUtils.Multiply$2(xfA, FarseerPhysics.Collision.SeparationFunction._localPoint.$clone());

                        var localPointB3 = FarseerPhysics.Collision.SeparationFunction._proxyB.Vertices.getItem(cache.v.IndexB.getItem(0)).$clone();
                        var pointB2 = FarseerPhysics.Common.MathUtils.Multiply$2(xfB, localPointB3.$clone());

                        var s1 = Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(pointB2.$clone(), pointA2.$clone()), normal1.$clone());
                        if (s1 < 0.0) {
                            FarseerPhysics.Collision.SeparationFunction._axis = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(FarseerPhysics.Collision.SeparationFunction._axis.$clone());
                            s1 = -s1;
                        }
                        return;
                    }
                },
                FindMinSeparation: function (indexA, indexB, t) {
                    var xfA = { v : new FarseerPhysics.Common.Transform() }, xfB = { v : new FarseerPhysics.Common.Transform() };
                    FarseerPhysics.Collision.SeparationFunction._sweepA.GetTransform(xfA, t);
                    FarseerPhysics.Collision.SeparationFunction._sweepB.GetTransform(xfB, t);

                    switch (FarseerPhysics.Collision.SeparationFunction._type) {
                        case FarseerPhysics.Collision.SeparationFunctionType.Points: 
                            {
                                var axisA = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(xfA.v, "R"), FarseerPhysics.Collision.SeparationFunction._axis.$clone());
                                var axisB = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(xfB.v, "R"), Microsoft.Xna.Framework.Vector2.op_UnaryNegation(FarseerPhysics.Collision.SeparationFunction._axis.$clone()));

                                indexA.v = FarseerPhysics.Collision.SeparationFunction._proxyA.GetSupport(axisA.$clone());
                                indexB.v = FarseerPhysics.Collision.SeparationFunction._proxyB.GetSupport(axisB.$clone());

                                var localPointA = FarseerPhysics.Collision.SeparationFunction._proxyA.Vertices.getItem(indexA.v).$clone();
                                var localPointB = FarseerPhysics.Collision.SeparationFunction._proxyB.Vertices.getItem(indexB.v).$clone();

                                var pointA = FarseerPhysics.Common.MathUtils.Multiply$2(xfA, localPointA.$clone());
                                var pointB = FarseerPhysics.Common.MathUtils.Multiply$2(xfB, localPointB.$clone());

                                var separation = Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(pointB.$clone(), pointA.$clone()), FarseerPhysics.Collision.SeparationFunction._axis.$clone());
                                return separation;
                            }
                        case FarseerPhysics.Collision.SeparationFunctionType.FaceA: 
                            {
                                var normal = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfA.v, "R"), FarseerPhysics.Collision.SeparationFunction._axis.$clone());
                                var pointA1 = FarseerPhysics.Common.MathUtils.Multiply$2(xfA, FarseerPhysics.Collision.SeparationFunction._localPoint.$clone());

                                var axisB1 = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(xfB.v, "R"), Microsoft.Xna.Framework.Vector2.op_UnaryNegation(normal.$clone()));

                                indexA.v = -1;
                                indexB.v = FarseerPhysics.Collision.SeparationFunction._proxyB.GetSupport(axisB1.$clone());

                                var localPointB1 = FarseerPhysics.Collision.SeparationFunction._proxyB.Vertices.getItem(indexB.v).$clone();
                                var pointB1 = FarseerPhysics.Common.MathUtils.Multiply$2(xfB, localPointB1.$clone());

                                var separation1 = Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(pointB1.$clone(), pointA1.$clone()), normal.$clone());
                                return separation1;
                            }
                        case FarseerPhysics.Collision.SeparationFunctionType.FaceB: 
                            {
                                var normal1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfB.v, "R"), FarseerPhysics.Collision.SeparationFunction._axis.$clone());
                                var pointB2 = FarseerPhysics.Common.MathUtils.Multiply$2(xfB, FarseerPhysics.Collision.SeparationFunction._localPoint.$clone());

                                var axisA1 = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(xfA.v, "R"), Microsoft.Xna.Framework.Vector2.op_UnaryNegation(normal1.$clone()));

                                indexB.v = -1;
                                indexA.v = FarseerPhysics.Collision.SeparationFunction._proxyA.GetSupport(axisA1.$clone());

                                var localPointA1 = FarseerPhysics.Collision.SeparationFunction._proxyA.Vertices.getItem(indexA.v).$clone();
                                var pointA2 = FarseerPhysics.Common.MathUtils.Multiply$2(xfA, localPointA1.$clone());

                                var separation2 = Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(pointA2.$clone(), pointB2.$clone()), normal1.$clone());
                                return separation2;
                            }
                        default: 
                            System.Diagnostics.Debug.Assert(false);
                            indexA.v = -1;
                            indexB.v = -1;
                            return 0.0;
                    }
                },
                Evaluate: function (indexA, indexB, t) {
                    var xfA = { v : new FarseerPhysics.Common.Transform() }, xfB = { v : new FarseerPhysics.Common.Transform() };
                    FarseerPhysics.Collision.SeparationFunction._sweepA.GetTransform(xfA, t);
                    FarseerPhysics.Collision.SeparationFunction._sweepB.GetTransform(xfB, t);

                    switch (FarseerPhysics.Collision.SeparationFunction._type) {
                        case FarseerPhysics.Collision.SeparationFunctionType.Points: 
                            {
                                var axisA = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(xfA.v, "R"), FarseerPhysics.Collision.SeparationFunction._axis.$clone());
                                var axisB = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(xfB.v, "R"), Microsoft.Xna.Framework.Vector2.op_UnaryNegation(FarseerPhysics.Collision.SeparationFunction._axis.$clone()));

                                var localPointA = FarseerPhysics.Collision.SeparationFunction._proxyA.Vertices.getItem(indexA).$clone();
                                var localPointB = FarseerPhysics.Collision.SeparationFunction._proxyB.Vertices.getItem(indexB).$clone();

                                var pointA = FarseerPhysics.Common.MathUtils.Multiply$2(xfA, localPointA.$clone());
                                var pointB = FarseerPhysics.Common.MathUtils.Multiply$2(xfB, localPointB.$clone());
                                var separation = Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(pointB.$clone(), pointA.$clone()), FarseerPhysics.Collision.SeparationFunction._axis.$clone());

                                return separation;
                            }
                        case FarseerPhysics.Collision.SeparationFunctionType.FaceA: 
                            {
                                var normal = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfA.v, "R"), FarseerPhysics.Collision.SeparationFunction._axis.$clone());
                                var pointA1 = FarseerPhysics.Common.MathUtils.Multiply$2(xfA, FarseerPhysics.Collision.SeparationFunction._localPoint.$clone());

                                var axisB1 = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(xfB.v, "R"), Microsoft.Xna.Framework.Vector2.op_UnaryNegation(normal.$clone()));

                                var localPointB1 = FarseerPhysics.Collision.SeparationFunction._proxyB.Vertices.getItem(indexB).$clone();
                                var pointB1 = FarseerPhysics.Common.MathUtils.Multiply$2(xfB, localPointB1.$clone());

                                var separation1 = Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(pointB1.$clone(), pointA1.$clone()), normal.$clone());
                                return separation1;
                            }
                        case FarseerPhysics.Collision.SeparationFunctionType.FaceB: 
                            {
                                var normal1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfB.v, "R"), FarseerPhysics.Collision.SeparationFunction._axis.$clone());
                                var pointB2 = FarseerPhysics.Common.MathUtils.Multiply$2(xfB, FarseerPhysics.Collision.SeparationFunction._localPoint.$clone());

                                var axisA1 = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(xfA.v, "R"), Microsoft.Xna.Framework.Vector2.op_UnaryNegation(normal1.$clone()));

                                var localPointA1 = FarseerPhysics.Collision.SeparationFunction._proxyA.Vertices.getItem(indexA).$clone();
                                var pointA2 = FarseerPhysics.Common.MathUtils.Multiply$2(xfA, localPointA1.$clone());

                                var separation2 = Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(pointA2.$clone(), pointB2.$clone()), normal1.$clone());
                                return separation2;
                            }
                        default: 
                            System.Diagnostics.Debug.Assert(false);
                            return 0.0;
                    }
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.SeparationFunctionType", {
        $kind: "enum",
        statics: {
            fields: {
                Points: 0,
                FaceA: 1,
                FaceB: 2
            }
        }
    });

    /** @namespace FarseerPhysics.Collision.Shapes */

    /**
     * A shape is used for collision detection. You can create a shape however you like.
     Shapes used for simulation in World are created automatically when a Fixture
     is created. Shapes may encapsulate a one or more child shapes.
     *
     * @abstract
     * @public
     * @class FarseerPhysics.Collision.Shapes.Shape
     */
    Bridge.define("FarseerPhysics.Collision.Shapes.Shape", {
        statics: {
            fields: {
                _shapeIdCounter: 0
            }
        },
        fields: {
            MassData: null,
            ShapeId: 0,
            _density: 0,
            _radius: 0,
            /**
             * Get the type of this shape.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Shapes.Shape
             * @function ShapeType
             * @type FarseerPhysics.Collision.Shapes.ShapeType
             */
            ShapeType: 0
        },
        props: {
            /**
             * Gets or sets the density.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Shapes.Shape
             * @function Density
             * @type number
             */
            Density: {
                get: function () {
                    return this._density;
                },
                set: function (value) {
                    this._density = value;
                    this.ComputeProperties();
                }
            },
            /**
             * Radius of the Shape
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Shapes.Shape
             * @function Radius
             * @type number
             */
            Radius: {
                get: function () {
                    return this._radius;
                },
                set: function (value) {
                    this._radius = value;
                    this.ComputeProperties();
                }
            }
        },
        ctors: {
            init: function () {
                this.MassData = new FarseerPhysics.Collision.Shapes.MassData();
            },
            ctor: function (density) {
                var $t;
                this.$initialize();
                this._density = density;
                this.ShapeType = FarseerPhysics.Collision.Shapes.ShapeType.Unknown;
                this.ShapeId = Bridge.identity(FarseerPhysics.Collision.Shapes.Shape._shapeIdCounter, ($t = (FarseerPhysics.Collision.Shapes.Shape._shapeIdCounter + 1) | 0, FarseerPhysics.Collision.Shapes.Shape._shapeIdCounter = $t, $t));
            }
        },
        methods: {
            CompareTo: function (shape) {
                if (Bridge.is(shape, FarseerPhysics.Collision.Shapes.PolygonShape) && Bridge.is(this, FarseerPhysics.Collision.Shapes.PolygonShape)) {
                    return Bridge.cast(this, FarseerPhysics.Collision.Shapes.PolygonShape).CompareTo$1(Bridge.cast(shape, FarseerPhysics.Collision.Shapes.PolygonShape));
                }

                if (Bridge.is(shape, FarseerPhysics.Collision.Shapes.CircleShape) && Bridge.is(this, FarseerPhysics.Collision.Shapes.CircleShape)) {
                    return Bridge.cast(this, FarseerPhysics.Collision.Shapes.CircleShape).CompareTo$1(Bridge.cast(shape, FarseerPhysics.Collision.Shapes.CircleShape));
                }

                if (Bridge.is(shape, FarseerPhysics.Collision.Shapes.EdgeShape) && Bridge.is(this, FarseerPhysics.Collision.Shapes.EdgeShape)) {
                    return Bridge.cast(this, FarseerPhysics.Collision.Shapes.EdgeShape).CompareTo$1(Bridge.cast(shape, FarseerPhysics.Collision.Shapes.EdgeShape));
                }

                return false;
            }
        }
    });

    /**
     * This holds the mass data computed for a shape.
     *
     * @public
     * @class FarseerPhysics.Collision.Shapes.MassData
     * @implements  System.IEquatable$1
     */
    Bridge.define("FarseerPhysics.Collision.Shapes.MassData", {
        inherits: function () { return [System.IEquatable$1(FarseerPhysics.Collision.Shapes.MassData)]; },
        $kind: "struct",
        statics: {
            methods: {
                op_Equality: function (left, right) {
                    return (left.Area === right.Area && left.Mass === right.Mass && Microsoft.Xna.Framework.Vector2.op_Equality(left.Centroid.$clone(), right.Centroid.$clone()) && left.Inertia === right.Inertia);
                },
                op_Inequality: function (left, right) {
                    return !(FarseerPhysics.Collision.Shapes.MassData.op_Equality(left.$clone(), right.$clone()));
                },
                getDefaultValue: function () { return new FarseerPhysics.Collision.Shapes.MassData(); }
            }
        },
        fields: {
            /**
             * The area of the shape
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Shapes.MassData
             * @type number
             */
            Area: 0,
            /**
             * The position of the shape's centroid relative to the shape's origin.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Shapes.MassData
             * @type Microsoft.Xna.Framework.Vector2
             */
            Centroid: null,
            /**
             * The rotational inertia of the shape about the local origin.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Shapes.MassData
             * @type number
             */
            Inertia: 0,
            /**
             * The mass of the shape, usually in kilograms.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Shapes.MassData
             * @type number
             */
            Mass: 0
        },
        alias: ["equalsT", "System$IEquatable$1$FarseerPhysics$Collision$Shapes$MassData$equalsT"],
        ctors: {
            init: function () {
                this.Centroid = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equalsT: function (other) {
                return FarseerPhysics.Collision.Shapes.MassData.op_Equality(this, other.$clone());
            },
            equals: function (obj) {
                if (Bridge.referenceEquals(null, obj)) {
                    return false;
                }
                if (!Bridge.referenceEquals(Bridge.getType(obj), FarseerPhysics.Collision.Shapes.MassData)) {
                    return false;
                }
                return this.equalsT(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, FarseerPhysics.Collision.Shapes.MassData), FarseerPhysics.Collision.Shapes.MassData)));
            },
            getHashCode: function () {
                var result = System.Single.getHashCode(this.Area);
                result = (Bridge.Int.mul(result, 397)) ^ this.Centroid.getHashCode();
                result = (Bridge.Int.mul(result, 397)) ^ System.Single.getHashCode(this.Inertia);
                result = (Bridge.Int.mul(result, 397)) ^ System.Single.getHashCode(this.Mass);
                return result;
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.Shapes.MassData();
                s.Area = this.Area;
                s.Centroid = this.Centroid.$clone();
                s.Inertia = this.Inertia;
                s.Mass = this.Mass;
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.Shapes.ShapeType", {
        $kind: "enum",
        statics: {
            fields: {
                Unknown: -1,
                Circle: 0,
                Edge: 1,
                Polygon: 2,
                Loop: 3,
                TypeCount: 4
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.Simplex", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.Simplex(); }
            }
        },
        fields: {
            Count: 0,
            V: null
        },
        ctors: {
            init: function () {
                this.V = new (FarseerPhysics.Common.FixedArray3$1(FarseerPhysics.Collision.SimplexVertex))();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            ReadCache: function (cache, proxyA, transformA, proxyB, transformB) {
                System.Diagnostics.Debug.Assert(cache.v.Count <= 3);

                this.Count = cache.v.Count;
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    var v = this.V.getItem(i).$clone();
                    v.IndexA = cache.v.IndexA.getItem(i);
                    v.IndexB = cache.v.IndexB.getItem(i);
                    var wALocal = proxyA.Vertices.getItem(v.IndexA).$clone();
                    var wBLocal = proxyB.Vertices.getItem(v.IndexB).$clone();
                    v.WA = FarseerPhysics.Common.MathUtils.Multiply$2(transformA, wALocal.$clone());
                    v.WB = FarseerPhysics.Common.MathUtils.Multiply$2(transformB, wBLocal.$clone());
                    v.W = Microsoft.Xna.Framework.Vector2.op_Subtraction(v.WB.$clone(), v.WA.$clone());
                    v.A = 0.0;
                    this.V.setItem(i, v.$clone());
                }

                if (this.Count > 1) {
                    var metric1 = cache.v.Metric;
                    var metric2 = this.GetMetric();
                    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2 || metric2 < FarseerPhysics.Settings.Epsilon) {
                        this.Count = 0;
                    }
                }

                if (this.Count === 0) {
                    var v1 = this.V.getItem(0).$clone();
                    v1.IndexA = 0;
                    v1.IndexB = 0;
                    var wALocal1 = proxyA.Vertices.getItem(0).$clone();
                    var wBLocal1 = proxyB.Vertices.getItem(0).$clone();
                    v1.WA = FarseerPhysics.Common.MathUtils.Multiply$2(transformA, wALocal1.$clone());
                    v1.WB = FarseerPhysics.Common.MathUtils.Multiply$2(transformB, wBLocal1.$clone());
                    v1.W = Microsoft.Xna.Framework.Vector2.op_Subtraction(v1.WB.$clone(), v1.WA.$clone());
                    this.V.setItem(0, v1.$clone());
                    this.Count = 1;
                }
            },
            WriteCache: function (cache) {
                cache.v.Metric = this.GetMetric();
                cache.v.Count = this.Count & 65535;
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    cache.v.IndexA.setItem(i, (this.V.getItem(i).$clone().IndexA) & 255);
                    cache.v.IndexB.setItem(i, (this.V.getItem(i).$clone().IndexB) & 255);
                }
            },
            GetSearchDirection: function () {
                switch (this.Count) {
                    case 1: 
                        return Microsoft.Xna.Framework.Vector2.op_UnaryNegation(this.V.getItem(0).$clone().W.$clone());
                    case 2: 
                        {
                            var e12 = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.V.getItem(1).$clone().W.$clone(), this.V.getItem(0).$clone().W.$clone());
                            var sgn = FarseerPhysics.Common.MathUtils.Cross$2(e12.$clone(), Microsoft.Xna.Framework.Vector2.op_UnaryNegation(this.V.getItem(0).$clone().W.$clone()));
                            if (sgn > 0.0) {
                                return new Microsoft.Xna.Framework.Vector2.$ctor2(-e12.Y, e12.X);
                            } else {
                                return new Microsoft.Xna.Framework.Vector2.$ctor2(e12.Y, -e12.X);
                            }
                        }
                    default: 
                        System.Diagnostics.Debug.Assert(false);
                        return Microsoft.Xna.Framework.Vector2.Zero.$clone();
                }
            },
            GetClosestPoint: function () {
                switch (this.Count) {
                    case 0: 
                        System.Diagnostics.Debug.Assert(false);
                        return Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    case 1: 
                        return this.V.getItem(0).$clone().W.$clone();
                    case 2: 
                        return Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.V.getItem(0).$clone().A, this.V.getItem(0).$clone().W.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.V.getItem(1).$clone().A, this.V.getItem(1).$clone().W.$clone()));
                    case 3: 
                        return Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    default: 
                        System.Diagnostics.Debug.Assert(false);
                        return Microsoft.Xna.Framework.Vector2.Zero.$clone();
                }
            },
            GetWitnessPoints: function (pA, pB) {
                switch (this.Count) {
                    case 0: 
                        pA.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                        pB.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                        System.Diagnostics.Debug.Assert(false);
                        break;
                    case 1: 
                        pA.v = this.V.getItem(0).$clone().WA.$clone();
                        pB.v = this.V.getItem(0).$clone().WB.$clone();
                        break;
                    case 2: 
                        pA.v = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.V.getItem(0).$clone().A, this.V.getItem(0).$clone().WA.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.V.getItem(1).$clone().A, this.V.getItem(1).$clone().WA.$clone()));
                        pB.v = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.V.getItem(0).$clone().A, this.V.getItem(0).$clone().WB.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.V.getItem(1).$clone().A, this.V.getItem(1).$clone().WB.$clone()));
                        break;
                    case 3: 
                        pA.v = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.V.getItem(0).$clone().A, this.V.getItem(0).$clone().WA.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.V.getItem(1).$clone().A, this.V.getItem(1).$clone().WA.$clone())), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.V.getItem(2).$clone().A, this.V.getItem(2).$clone().WA.$clone()));
                        pB.v = pA.v.$clone();
                        break;
                    default: 
                        throw new System.Exception();
                }
            },
            GetMetric: function () {
                switch (this.Count) {
                    case 0: 
                        System.Diagnostics.Debug.Assert(false);
                        return 0.0;
                    case 1: 
                        return 0.0;
                    case 2: 
                        return (Microsoft.Xna.Framework.Vector2.op_Subtraction(this.V.getItem(0).$clone().W.$clone(), this.V.getItem(1).$clone().W.$clone())).Length();
                    case 3: 
                        return FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Subtraction(this.V.getItem(1).$clone().W.$clone(), this.V.getItem(0).$clone().W.$clone()), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.V.getItem(2).$clone().W.$clone(), this.V.getItem(0).$clone().W.$clone()));
                    default: 
                        System.Diagnostics.Debug.Assert(false);
                        return 0.0;
                }
            },
            Solve2: function () {
                var w1 = this.V.getItem(0).$clone().W.$clone();
                var w2 = this.V.getItem(1).$clone().W.$clone();
                var e12 = Microsoft.Xna.Framework.Vector2.op_Subtraction(w2.$clone(), w1.$clone());

                var d12_2 = -Microsoft.Xna.Framework.Vector2.Dot(w1.$clone(), e12.$clone());
                if (d12_2 <= 0.0) {
                    var v0 = this.V.getItem(0).$clone();
                    v0.A = 1.0;
                    this.V.setItem(0, v0.$clone());
                    this.Count = 1;
                    return;
                }

                var d12_1 = Microsoft.Xna.Framework.Vector2.Dot(w2.$clone(), e12.$clone());
                if (d12_1 <= 0.0) {
                    var v1 = this.V.getItem(1).$clone();
                    v1.A = 1.0;
                    this.V.setItem(1, v1.$clone());
                    this.Count = 1;
                    this.V.setItem(0, this.V.getItem(1).$clone());
                    return;
                }

                var inv_d12 = 1.0 / (d12_1 + d12_2);
                var v0_2 = this.V.getItem(0).$clone();
                var v1_2 = this.V.getItem(1).$clone();
                v0_2.A = d12_1 * inv_d12;
                v1_2.A = d12_2 * inv_d12;
                this.V.setItem(0, v0_2.$clone());
                this.V.setItem(1, v1_2.$clone());
                this.Count = 2;
            },
            Solve3: function () {
                var w1 = this.V.getItem(0).$clone().W.$clone();
                var w2 = this.V.getItem(1).$clone().W.$clone();
                var w3 = this.V.getItem(2).$clone().W.$clone();

                var e12 = Microsoft.Xna.Framework.Vector2.op_Subtraction(w2.$clone(), w1.$clone());
                var w1e12 = Microsoft.Xna.Framework.Vector2.Dot(w1.$clone(), e12.$clone());
                var w2e12 = Microsoft.Xna.Framework.Vector2.Dot(w2.$clone(), e12.$clone());
                var d12_1 = w2e12;
                var d12_2 = -w1e12;

                var e13 = Microsoft.Xna.Framework.Vector2.op_Subtraction(w3.$clone(), w1.$clone());
                var w1e13 = Microsoft.Xna.Framework.Vector2.Dot(w1.$clone(), e13.$clone());
                var w3e13 = Microsoft.Xna.Framework.Vector2.Dot(w3.$clone(), e13.$clone());
                var d13_1 = w3e13;
                var d13_2 = -w1e13;

                var e23 = Microsoft.Xna.Framework.Vector2.op_Subtraction(w3.$clone(), w2.$clone());
                var w2e23 = Microsoft.Xna.Framework.Vector2.Dot(w2.$clone(), e23.$clone());
                var w3e23 = Microsoft.Xna.Framework.Vector2.Dot(w3.$clone(), e23.$clone());
                var d23_1 = w3e23;
                var d23_2 = -w2e23;

                var n123 = FarseerPhysics.Common.MathUtils.Cross$2(e12.$clone(), e13.$clone());

                var d123_1 = n123 * FarseerPhysics.Common.MathUtils.Cross$2(w2.$clone(), w3.$clone());
                var d123_2 = n123 * FarseerPhysics.Common.MathUtils.Cross$2(w3.$clone(), w1.$clone());
                var d123_3 = n123 * FarseerPhysics.Common.MathUtils.Cross$2(w1.$clone(), w2.$clone());

                if (d12_2 <= 0.0 && d13_2 <= 0.0) {
                    var v0_1 = this.V.getItem(0).$clone();
                    v0_1.A = 1.0;
                    this.V.setItem(0, v0_1.$clone());
                    this.Count = 1;
                    return;
                }

                if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {
                    var inv_d12 = 1.0 / (d12_1 + d12_2);
                    var v0_2 = this.V.getItem(0).$clone();
                    var v1_2 = this.V.getItem(1).$clone();
                    v0_2.A = d12_1 * inv_d12;
                    v1_2.A = d12_2 * inv_d12;
                    this.V.setItem(0, v0_2.$clone());
                    this.V.setItem(1, v1_2.$clone());
                    this.Count = 2;
                    return;
                }

                if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {
                    var inv_d13 = 1.0 / (d13_1 + d13_2);
                    var v0_3 = this.V.getItem(0).$clone();
                    var v2_3 = this.V.getItem(2).$clone();
                    v0_3.A = d13_1 * inv_d13;
                    v2_3.A = d13_2 * inv_d13;
                    this.V.setItem(0, v0_3.$clone());
                    this.V.setItem(2, v2_3.$clone());
                    this.Count = 2;
                    this.V.setItem(1, this.V.getItem(2).$clone());
                    return;
                }

                if (d12_1 <= 0.0 && d23_2 <= 0.0) {
                    var v1_4 = this.V.getItem(1).$clone();
                    v1_4.A = 1.0;
                    this.V.setItem(1, v1_4.$clone());
                    this.Count = 1;
                    this.V.setItem(0, this.V.getItem(1).$clone());
                    return;
                }

                if (d13_1 <= 0.0 && d23_1 <= 0.0) {
                    var v2_5 = this.V.getItem(2).$clone();
                    v2_5.A = 1.0;
                    this.V.setItem(2, v2_5.$clone());
                    this.Count = 1;
                    this.V.setItem(0, this.V.getItem(2).$clone());
                    return;
                }

                if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {
                    var inv_d23 = 1.0 / (d23_1 + d23_2);
                    var v1_6 = this.V.getItem(1).$clone();
                    var v2_6 = this.V.getItem(2).$clone();
                    v1_6.A = d23_1 * inv_d23;
                    v2_6.A = d23_2 * inv_d23;
                    this.V.setItem(1, v1_6.$clone());
                    this.V.setItem(2, v2_6.$clone());
                    this.Count = 2;
                    this.V.setItem(0, this.V.getItem(2).$clone());
                    return;
                }

                var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);
                var v0_7 = this.V.getItem(0).$clone();
                var v1_7 = this.V.getItem(1).$clone();
                var v2_7 = this.V.getItem(2).$clone();
                v0_7.A = d123_1 * inv_d123;
                v1_7.A = d123_2 * inv_d123;
                v2_7.A = d123_3 * inv_d123;
                this.V.setItem(0, v0_7.$clone());
                this.V.setItem(1, v1_7.$clone());
                this.V.setItem(2, v2_7.$clone());
                this.Count = 3;
            },
            getHashCode: function () {
                var h = Bridge.addHash([1894108863, this.Count, this.V]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.Simplex)) {
                    return false;
                }
                return Bridge.equals(this.Count, o.Count) && Bridge.equals(this.V, o.V);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.Simplex();
                s.Count = this.Count;
                s.V = this.V.$clone();
                return s;
            }
        }
    });

    /**
     * Used to warm start ComputeDistance.
     Set count to zero on first call.
     *
     * @public
     * @class FarseerPhysics.Collision.SimplexCache
     */
    Bridge.define("FarseerPhysics.Collision.SimplexCache", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.SimplexCache(); }
            }
        },
        fields: {
            /**
             * Length or area
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.SimplexCache
             * @type number
             */
            Count: 0,
            /**
             * Vertices on shape A
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.SimplexCache
             * @type FarseerPhysics.Common.FixedArray3$1
             */
            IndexA: null,
            /**
             * Vertices on shape B
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.SimplexCache
             * @type FarseerPhysics.Common.FixedArray3$1
             */
            IndexB: null,
            Metric: 0
        },
        ctors: {
            init: function () {
                this.IndexA = new (FarseerPhysics.Common.FixedArray3$1(System.Byte))();
                this.IndexB = new (FarseerPhysics.Common.FixedArray3$1(System.Byte))();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([4719522336, this.Count, this.IndexA, this.IndexB, this.Metric]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.SimplexCache)) {
                    return false;
                }
                return Bridge.equals(this.Count, o.Count) && Bridge.equals(this.IndexA, o.IndexA) && Bridge.equals(this.IndexB, o.IndexB) && Bridge.equals(this.Metric, o.Metric);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.SimplexCache();
                s.Count = this.Count;
                s.IndexA = this.IndexA.$clone();
                s.IndexB = this.IndexB.$clone();
                s.Metric = this.Metric;
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.SimplexVertex", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.SimplexVertex(); }
            }
        },
        fields: {
            /**
             * Barycentric coordinate for closest point
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.SimplexVertex
             * @type number
             */
            A: 0,
            /**
             * wA index
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.SimplexVertex
             * @type number
             */
            IndexA: 0,
            /**
             * wB index
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.SimplexVertex
             * @type number
             */
            IndexB: 0,
            /**
             * wB - wA
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.SimplexVertex
             * @type Microsoft.Xna.Framework.Vector2
             */
            W: null,
            /**
             * Support point in proxyA
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.SimplexVertex
             * @type Microsoft.Xna.Framework.Vector2
             */
            WA: null,
            /**
             * Support point in proxyB
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.SimplexVertex
             * @type Microsoft.Xna.Framework.Vector2
             */
            WB: null
        },
        ctors: {
            init: function () {
                this.W = new Microsoft.Xna.Framework.Vector2();
                this.WA = new Microsoft.Xna.Framework.Vector2();
                this.WB = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5039079836, this.A, this.IndexA, this.IndexB, this.W, this.WA, this.WB]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.SimplexVertex)) {
                    return false;
                }
                return Bridge.equals(this.A, o.A) && Bridge.equals(this.IndexA, o.IndexA) && Bridge.equals(this.IndexB, o.IndexB) && Bridge.equals(this.W, o.W) && Bridge.equals(this.WA, o.WA) && Bridge.equals(this.WB, o.WB);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.SimplexVertex();
                s.A = this.A;
                s.IndexA = this.IndexA;
                s.IndexB = this.IndexB;
                s.W = this.W.$clone();
                s.WA = this.WA.$clone();
                s.WB = this.WB.$clone();
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.TimeOfImpact", {
        statics: {
            fields: {
                TOICalls: 0,
                TOIIters: 0,
                TOIMaxIters: 0,
                TOIRootIters: 0,
                TOIMaxRootIters: 0,
                _distanceInput: null
            },
            ctors: {
                init: function () {
                    this._distanceInput = new FarseerPhysics.Collision.DistanceInput();
                }
            },
            methods: {
                /**
                 * Compute the upper bound on time before two shapes penetrate. Time is represented as
                 a fraction between [0,tMax]. This uses a swept separating axis and may miss some intermediate,
                 non-tunneling collision. If you change the time interval, you should call this function
                 again.
                 Note: use Distance() to compute the contact point and normal at the time of impact.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Collision.TimeOfImpact
                 * @memberof FarseerPhysics.Collision.TimeOfImpact
                 * @param   {FarseerPhysics.Collision.TOIOutput}    output    The output.
                 * @param   {FarseerPhysics.Collision.TOIInput}     input     The input.
                 * @return  {void}
                 */
                CalculateTimeOfImpact: function (output, input) {
                    FarseerPhysics.Collision.TimeOfImpact.TOICalls = (FarseerPhysics.Collision.TimeOfImpact.TOICalls + 1) | 0;

                    output.v = new FarseerPhysics.Collision.TOIOutput();
                    output.v.State = FarseerPhysics.Collision.TOIOutputState.Unknown;
                    output.v.T = input.TMax;

                    var sweepA = { v : input.SweepA.$clone() };
                    var sweepB = { v : input.SweepB.$clone() };

                    sweepA.v.Normalize();
                    sweepB.v.Normalize();

                    var tMax = input.TMax;

                    var totalRadius = input.ProxyA.Radius + input.ProxyB.Radius;
                    var target = Math.max(FarseerPhysics.Settings.LinearSlop, totalRadius - 0.015);
                    var tolerance = 0.00125;
                    System.Diagnostics.Debug.Assert(target > tolerance);

                    var t1 = 0.0;
                    var k_maxIterations = 20;
                    var iter = 0;

                    var cache = { v : new FarseerPhysics.Collision.SimplexCache() };
                    FarseerPhysics.Collision.TimeOfImpact._distanceInput.ProxyA = input.ProxyA;
                    FarseerPhysics.Collision.TimeOfImpact._distanceInput.ProxyB = input.ProxyB;
                    FarseerPhysics.Collision.TimeOfImpact._distanceInput.UseRadii = false;

                    for (; ; ) {
                        var xfA = { v : new FarseerPhysics.Common.Transform() }, xfB = { v : new FarseerPhysics.Common.Transform() };
                        sweepA.v.GetTransform(xfA, t1);
                        sweepB.v.GetTransform(xfB, t1);

                        FarseerPhysics.Collision.TimeOfImpact._distanceInput.TransformA = xfA.v.$clone();
                        FarseerPhysics.Collision.TimeOfImpact._distanceInput.TransformB = xfB.v.$clone();
                        var distanceOutput = { v : new FarseerPhysics.Collision.DistanceOutput() };
                        FarseerPhysics.Collision.Distance.ComputeDistance(distanceOutput, cache, FarseerPhysics.Collision.TimeOfImpact._distanceInput);

                        if (distanceOutput.v.Distance <= 0.0) {
                            output.v.State = FarseerPhysics.Collision.TOIOutputState.Overlapped;
                            output.v.T = 0.0;
                            break;
                        }

                        if (distanceOutput.v.Distance < target + tolerance) {
                            output.v.State = FarseerPhysics.Collision.TOIOutputState.Touching;
                            output.v.T = t1;
                            break;
                        }

                        FarseerPhysics.Collision.SeparationFunction.Set(cache, input.ProxyA, sweepA, input.ProxyB, sweepB, t1);

                        var done = false;
                        var t2 = tMax;
                        var pushBackIter = 0;
                        for (; ; ) {
                            var indexA = { }, indexB = { };
                            var s2 = FarseerPhysics.Collision.SeparationFunction.FindMinSeparation(indexA, indexB, t2);

                            if (s2 > target + tolerance) {
                                output.v.State = FarseerPhysics.Collision.TOIOutputState.Seperated;
                                output.v.T = tMax;
                                done = true;
                                break;
                            }

                            if (s2 > target - tolerance) {
                                t1 = t2;
                                break;
                            }

                            var s1 = FarseerPhysics.Collision.SeparationFunction.Evaluate(indexA.v, indexB.v, t1);

                            if (s1 < target - tolerance) {
                                output.v.State = FarseerPhysics.Collision.TOIOutputState.Failed;
                                output.v.T = t1;
                                done = true;
                                break;
                            }

                            if (s1 <= target + tolerance) {
                                output.v.State = FarseerPhysics.Collision.TOIOutputState.Touching;
                                output.v.T = t1;
                                done = true;
                                break;
                            }

                            var rootIterCount = 0;
                            var a1 = t1, a2 = t2;
                            for (; ; ) {
                                var t;
                                if ((rootIterCount & 1) !== 0) {
                                    t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);
                                } else {
                                    t = 0.5 * (a1 + a2);
                                }

                                var s = FarseerPhysics.Collision.SeparationFunction.Evaluate(indexA.v, indexB.v, t);

                                if (Math.abs(s - target) < tolerance) {
                                    t2 = t;
                                    break;
                                }

                                if (s > target) {
                                    a1 = t;
                                    s1 = s;
                                } else {
                                    a2 = t;
                                    s2 = s;
                                }

                                rootIterCount = (rootIterCount + 1) | 0;
                                FarseerPhysics.Collision.TimeOfImpact.TOIRootIters = (FarseerPhysics.Collision.TimeOfImpact.TOIRootIters + 1) | 0;

                                if (rootIterCount === 50) {
                                    break;
                                }
                            }

                            FarseerPhysics.Collision.TimeOfImpact.TOIMaxRootIters = Math.max(FarseerPhysics.Collision.TimeOfImpact.TOIMaxRootIters, rootIterCount);

                            pushBackIter = (pushBackIter + 1) | 0;

                            if (pushBackIter === FarseerPhysics.Settings.MaxPolygonVertices) {
                                break;
                            }
                        }

                        iter = (iter + 1) | 0;
                        FarseerPhysics.Collision.TimeOfImpact.TOIIters = (FarseerPhysics.Collision.TimeOfImpact.TOIIters + 1) | 0;

                        if (done) {
                            break;
                        }

                        if (iter === k_maxIterations) {
                            output.v.State = FarseerPhysics.Collision.TOIOutputState.Failed;
                            output.v.T = t1;
                            break;
                        }
                    }

                    FarseerPhysics.Collision.TimeOfImpact.TOIMaxIters = Math.max(FarseerPhysics.Collision.TimeOfImpact.TOIMaxIters, iter);
                }
            }
        }
    });

    /**
     * Input parameters for CalculateTimeOfImpact
     *
     * @public
     * @class FarseerPhysics.Collision.TOIInput
     */
    Bridge.define("FarseerPhysics.Collision.TOIInput", {
        fields: {
            ProxyA: null,
            ProxyB: null,
            SweepA: null,
            SweepB: null,
            TMax: 0
        },
        ctors: {
            init: function () {
                this.SweepA = new FarseerPhysics.Common.Sweep();
                this.SweepB = new FarseerPhysics.Common.Sweep();
                this.ProxyA = new FarseerPhysics.Collision.DistanceProxy();
                this.ProxyB = new FarseerPhysics.Collision.DistanceProxy();
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.TOIOutput", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Collision.TOIOutput(); }
            }
        },
        fields: {
            State: 0,
            T: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3300508733, this.State, this.T]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Collision.TOIOutput)) {
                    return false;
                }
                return Bridge.equals(this.State, o.State) && Bridge.equals(this.T, o.T);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Collision.TOIOutput();
                s.State = this.State;
                s.T = this.T;
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.TOIOutputState", {
        $kind: "enum",
        statics: {
            fields: {
                Unknown: 0,
                Failed: 1,
                Overlapped: 2,
                Touching: 3,
                Seperated: 4
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.ConvexHull.ChainHull", {
        statics: {
            methods: {
                /**
                 * Gets the convex hull.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.ConvexHull.ChainHull
                 * @memberof FarseerPhysics.Common.ConvexHull.ChainHull
                 * @param   {FarseerPhysics.Common.Vertices}    P
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                GetConvexHull: function (P) {
                    P.Sort$1(new FarseerPhysics.Common.ConvexHull.ChainHull.PointComparer());

                    var H = System.Array.init(P.Count, function (){
                        return new Microsoft.Xna.Framework.Vector2();
                    }, Microsoft.Xna.Framework.Vector2);
                    var res = new FarseerPhysics.Common.Vertices.ctor();

                    var n = P.Count;

                    var bot, top = -1;
                    var i;

                    var minmin = 0, minmax;
                    var xmin = P.getItem(0).$clone().X;
                    for (i = 1; i < n; i = (i + 1) | 0) {
                        if (P.getItem(i).$clone().X !== xmin) {
                            break;
                        }
                    }
                    minmax = (i - 1) | 0;
                    if (minmax === ((n - 1) | 0)) {
                        H[System.Array.index(((top = (top + 1) | 0)), H)] = P.getItem(minmin).$clone();
                        if (P.getItem(minmax).$clone().Y !== P.getItem(minmin).$clone().Y) {
                            H[System.Array.index(((top = (top + 1) | 0)), H)] = P.getItem(minmax).$clone();
                        }
                        H[System.Array.index(((top = (top + 1) | 0)), H)] = P.getItem(minmin).$clone();

                        for (var j = 0; j < ((top + 1) | 0); j = (j + 1) | 0) {
                            res.add(H[System.Array.index(j, H)].$clone());
                        }

                        return res;
                    }

                    top = (res.Count - 1) | 0;

                    var maxmin, maxmax = (n - 1) | 0;
                    var xmax = P.getItem(((n - 1) | 0)).$clone().X;
                    for (i = (n - 2) | 0; i >= 0; i = (i - 1) | 0) {
                        if (P.getItem(i).$clone().X !== xmax) {
                            break;
                        }
                    }
                    maxmin = (i + 1) | 0;

                    H[System.Array.index(((top = (top + 1) | 0)), H)] = P.getItem(minmin).$clone();
                    i = minmax;
                    while (((i = (i + 1) | 0)) <= maxmin) {
                        if (FarseerPhysics.Common.MathUtils.Area(P.getItem(minmin).$clone(), P.getItem(maxmin).$clone(), P.getItem(i).$clone()) >= 0 && i < maxmin) {
                            continue;
                        }

                        while (top > 0) {
                            if (FarseerPhysics.Common.MathUtils.Area(H[System.Array.index(((top - 1) | 0), H)].$clone(), H[System.Array.index(top, H)].$clone(), P.getItem(i).$clone()) > 0) {
                                break;
                            } else {
                                top = (top - 1) | 0;
                            }
                        }
                        H[System.Array.index(((top = (top + 1) | 0)), H)] = P.getItem(i).$clone();
                    }

                    if (maxmax !== maxmin) {
                        H[System.Array.index(((top = (top + 1) | 0)), H)] = P.getItem(maxmax).$clone();
                    }
                    bot = top;
                    i = maxmin;
                    while (((i = (i - 1) | 0)) >= minmax) {
                        if (FarseerPhysics.Common.MathUtils.Area(P.getItem(maxmax).$clone(), P.getItem(minmax).$clone(), P.getItem(i).$clone()) >= 0 && i > minmax) {
                            continue;
                        }

                        while (top > bot) {
                            if (FarseerPhysics.Common.MathUtils.Area(H[System.Array.index(((top - 1) | 0), H)].$clone(), H[System.Array.index(top, H)].$clone(), P.getItem(i).$clone()) > 0) {
                                break;
                            } else {
                                top = (top - 1) | 0;
                            }
                        }
                        H[System.Array.index(((top = (top + 1) | 0)), H)] = P.getItem(i).$clone();
                    }
                    if (minmax !== minmin) {
                        H[System.Array.index(((top = (top + 1) | 0)), H)] = P.getItem(minmin).$clone();
                    }

                    for (var j1 = 0; j1 < ((top + 1) | 0); j1 = (j1 + 1) | 0) {
                        res.add(H[System.Array.index(j1, H)].$clone());
                    }

                    return res;
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.ConvexHull.ChainHull.PointComparer", {
        inherits: [System.Collections.Generic.Comparer$1(Microsoft.Xna.Framework.Vector2)],
        $kind: "nested class",
        alias: ["compare", ["System$Collections$Generic$IComparer$1$Microsoft$Xna$Framework$Vector2$compare", "System$Collections$Generic$IComparer$1$compare"]],
        methods: {
            compare: function (a, b) {
                var f = Bridge.compare(a.X, b.X);
                return f !== 0 ? f : Bridge.compare(a.Y, b.Y);
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.ConvexHull.GiftWrap", {
        statics: {
            methods: {
                /**
                 * Find the convex hull of a point cloud using "Gift-wrap" algorithm - start
                 with an extremal point, and walk around the outside edge by testing
                 angles.
                 Runs in O(N*S) time where S is number of sides of resulting polygon.
                 Worst case: point cloud is all vertices of convex polygon: O(N^2).
                 There may be faster algorithms to do this, should you need one -
                 this is just the simplest. You can get O(N log N) expected time if you
                 try, I think, and O(N) if you restrict inputs to simple polygons.
                 Returns null if number of vertices passed is less than 3.
                 Results should be passed through convex decomposition afterwards
                 to ensure that each shape has few enough points to be used in Box2d.
                 Warning: May be buggy with colinear points on hull.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.ConvexHull.GiftWrap
                 * @memberof FarseerPhysics.Common.ConvexHull.GiftWrap
                 * @param   {FarseerPhysics.Common.Vertices}    vertices    The vertices.
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                GetConvexHull: function (vertices) {
                    if (vertices.Count < 3) {
                        return vertices;
                    }

                    var edgeList = System.Array.init(vertices.Count, 0, System.Int32);
                    var numEdges = 0;

                    var minY = 3.40282347E+38;
                    var minYIndex = vertices.Count;
                    for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                        if (vertices.getItem(i).$clone().Y < minY) {
                            minY = vertices.getItem(i).$clone().Y;
                            minYIndex = i;
                        }
                    }

                    var startIndex = minYIndex;
                    var winIndex = -1;
                    var dx = -1.0;
                    var dy = 0.0;
                    while (winIndex !== minYIndex) {
                        var maxDot = -2.0;
                        var nrm;

                        for (var i1 = 0; i1 < vertices.Count; i1 = (i1 + 1) | 0) {
                            if (i1 === startIndex) {
                                continue;
                            }
                            var newdx = vertices.getItem(i1).$clone().X - vertices.getItem(startIndex).$clone().X;
                            var newdy = vertices.getItem(i1).$clone().Y - vertices.getItem(startIndex).$clone().Y;
                            nrm = Math.sqrt(newdx * newdx + newdy * newdy);
                            nrm = (nrm === 0.0) ? 1.0 : nrm;
                            newdx /= nrm;
                            newdy /= nrm;

                            var newDot = newdx * dx + newdy * dy;
                            if (newDot > maxDot) {
                                maxDot = newDot;
                                winIndex = i1;
                            }
                        }
                        edgeList[System.Array.index(Bridge.identity(numEdges, (numEdges = (numEdges + 1) | 0)), edgeList)] = winIndex;
                        dx = vertices.getItem(winIndex).$clone().X - vertices.getItem(startIndex).$clone().X;
                        dy = vertices.getItem(winIndex).$clone().Y - vertices.getItem(startIndex).$clone().Y;
                        nrm = Math.sqrt(dx * dx + dy * dy);
                        nrm = (nrm === 0.0) ? 1.0 : nrm;
                        dx /= nrm;
                        dy /= nrm;
                        startIndex = winIndex;
                    }

                    var returnVal = new FarseerPhysics.Common.Vertices.$ctor3(numEdges);

                    for (var i2 = 0; i2 < numEdges; i2 = (i2 + 1) | 0) {
                        returnVal.add(vertices.getItem(edgeList[System.Array.index(i2, edgeList)]).$clone());
                    }


                    return returnVal;
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.ConvexHull.Melkman", {
        statics: {
            methods: {
                /**
                 * Creates a convex hull.
                 Note:
                 1. Vertices must be of a simple polygon, i.e. edges do not overlap.
                 2. Melkman does not work on point clouds
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.ConvexHull.Melkman
                 * @memberof FarseerPhysics.Common.ConvexHull.Melkman
                 * @param   {FarseerPhysics.Common.Vertices}    vertices
                 * @return  {FarseerPhysics.Common.Vertices}                A convex hull in counterclockwise winding order.
                 */
                GetConvexHull: function (vertices) {
                    var $t;
                    if (vertices.Count < 3) {
                        return vertices;
                    }

                    var deque = System.Array.init(((vertices.Count + 1) | 0), function (){
                        return new Microsoft.Xna.Framework.Vector2();
                    }, Microsoft.Xna.Framework.Vector2);
                    var qf = 3, qb = 0;
                    var qfm1, qbm1;

                    var startIndex = 3;
                    var k = FarseerPhysics.Common.MathUtils.Area(vertices.getItem(0).$clone(), vertices.getItem(1).$clone(), vertices.getItem(2).$clone());
                    if (k === 0) {
                        deque[System.Array.index(0, deque)] = vertices.getItem(0).$clone();
                        deque[System.Array.index(1, deque)] = vertices.getItem(2).$clone();
                        deque[System.Array.index(2, deque)] = vertices.getItem(0).$clone();
                        qf = 2;

                        for (startIndex = 3; startIndex < vertices.Count; startIndex = (startIndex + 1) | 0) {
                            var tmp = { v : vertices.getItem(startIndex).$clone() };
                            if (FarseerPhysics.Common.MathUtils.Area$1(Bridge.ref(deque, 0), Bridge.ref(deque, 1), tmp) === 0) {
                                deque[System.Array.index(1, deque)] = vertices.getItem(startIndex).$clone();
                            } else {
                                break;
                            }
                        }
                    } else {
                        deque[System.Array.index(0, deque)] = ($t = vertices.getItem(2).$clone(), deque[System.Array.index(3, deque)] = $t.$clone(), $t);
                        if (k > 0) {
                            deque[System.Array.index(1, deque)] = vertices.getItem(0).$clone();
                            deque[System.Array.index(2, deque)] = vertices.getItem(1).$clone();
                        } else {
                            deque[System.Array.index(1, deque)] = vertices.getItem(1).$clone();
                            deque[System.Array.index(2, deque)] = vertices.getItem(0).$clone();
                        }
                    }

                    qfm1 = qf === 0 ? ((deque.length - 1) | 0) : ((qf - 1) | 0);
                    qbm1 = qb === ((deque.length - 1) | 0) ? 0 : ((qb + 1) | 0);

                    for (var i = startIndex; i < vertices.Count; i = (i + 1) | 0) {
                        var nextPt = { v : vertices.getItem(i).$clone() };

                        if (FarseerPhysics.Common.MathUtils.Area$1(Bridge.ref(deque, qfm1), Bridge.ref(deque, qf), nextPt) > 0 && FarseerPhysics.Common.MathUtils.Area$1(Bridge.ref(deque, qb), Bridge.ref(deque, qbm1), nextPt) > 0) {
                            continue;
                        }

                        while (!(FarseerPhysics.Common.MathUtils.Area$1(Bridge.ref(deque, qfm1), Bridge.ref(deque, qf), nextPt) > 0)) {
                            qf = qfm1;
                            qfm1 = qf === 0 ? ((deque.length - 1) | 0) : ((qf - 1) | 0);
                        }
                        qf = qf === ((deque.length - 1) | 0) ? 0 : ((qf + 1) | 0);
                        qfm1 = qf === 0 ? ((deque.length - 1) | 0) : ((qf - 1) | 0);
                        deque[System.Array.index(qf, deque)] = nextPt.v.$clone();

                        while (!(FarseerPhysics.Common.MathUtils.Area$1(Bridge.ref(deque, qb), Bridge.ref(deque, qbm1), nextPt) > 0)) {
                            qb = qbm1;
                            qbm1 = qb === ((deque.length - 1) | 0) ? 0 : ((qb + 1) | 0);
                        }
                        qb = qb === 0 ? ((deque.length - 1) | 0) : ((qb - 1) | 0);
                        qbm1 = qb === ((deque.length - 1) | 0) ? 0 : ((qb + 1) | 0);
                        deque[System.Array.index(qb, deque)] = nextPt.v.$clone();
                    }

                    var convexHull = new FarseerPhysics.Common.Vertices.$ctor3(((vertices.Count + 1) | 0));
                    if (qb < qf) {
                        for (var i1 = qb; i1 < qf; i1 = (i1 + 1) | 0) {
                            convexHull.add(deque[System.Array.index(i1, deque)].$clone());
                        }
                    } else {
                        for (var i2 = 0; i2 < qf; i2 = (i2 + 1) | 0) {
                            convexHull.add(deque[System.Array.index(i2, deque)].$clone());
                        }
                        for (var i3 = qb; i3 < deque.length; i3 = (i3 + 1) | 0) {
                            convexHull.add(deque[System.Array.index(i3, deque)].$clone());
                        }
                    }
                    return convexHull;
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposer", {
        $kind: "enum",
        statics: {
            fields: {
                Bayazit: 0,
                CDT: 1,
                Earclip: 2,
                Flipcode: 3,
                Seidel: 4
            }
        }
    });

    /** @namespace FarseerPhysics.Common.Decomposition */

    /**
     * Convex decomposition algorithm created by Mark Bayazit (http://mnbayazit.com/)
     For more information about this algorithm, see http://mnbayazit.com/406/bayazit
     *
     * @static
     * @abstract
     * @public
     * @class FarseerPhysics.Common.Decomposition.BayazitDecomposer
     */
    Bridge.define("FarseerPhysics.Common.Decomposition.BayazitDecomposer", {
        statics: {
            methods: {
                At: function (i, vertices) {
                    var s = vertices.Count;
                    return vertices.getItem(i < 0 ? ((s - (((-i) | 0) % s)) | 0) : i % s).$clone();
                },
                Copy: function (i, j, vertices) {
                    var p = new FarseerPhysics.Common.Vertices.ctor();
                    while (j < i) {
                        j = (j + vertices.Count) | 0;
                    }
                    for (; i <= j; i = (i + 1) | 0) {
                        p.add(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices));
                    }
                    return p;
                },
                /**
                 * Decompose the polygon into several smaller non-concave polygon.
                 If the polygon is already convex, it will return the original polygon, unless it is over Settings.MaxPolygonVertices.
                 Precondition: Counter Clockwise polygon
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.Decomposition.BayazitDecomposer
                 * @memberof FarseerPhysics.Common.Decomposition.BayazitDecomposer
                 * @param   {FarseerPhysics.Common.Vertices}       vertices
                 * @return  {System.Collections.Generic.List$1}
                 */
                ConvexPartition: function (vertices) {
                    vertices.ForceCounterClockWise();

                    var list = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();
                    var d, lowerDist, upperDist;
                    var p = new Microsoft.Xna.Framework.Vector2();
                    var lowerInt = new Microsoft.Xna.Framework.Vector2.ctor();
                    var upperInt = new Microsoft.Xna.Framework.Vector2.ctor();
                    var lowerIndex = 0, upperIndex = 0;
                    var lowerPoly, upperPoly;

                    for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                        if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.Reflex(i, vertices)) {
                            lowerDist = (upperDist = 3.40282347E+38);
                            for (var j = 0; j < vertices.Count; j = (j + 1) | 0) {
                                if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.Left(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i - 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j, vertices)) && FarseerPhysics.Common.Decomposition.BayazitDecomposer.RightOn(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i - 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((j - 1) | 0), vertices))) {
                                    p = FarseerPhysics.Common.LineTools.LineIntersect(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i - 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((j - 1) | 0), vertices));
                                    if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.Right(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i + 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), p.$clone())) {
                                        d = FarseerPhysics.Common.Decomposition.BayazitDecomposer.SquareDist(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), p.$clone());
                                        if (d < lowerDist) {
                                            lowerDist = d;
                                            lowerInt = p.$clone();
                                            lowerIndex = j;
                                        }
                                    }
                                }

                                if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.Left(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i + 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((j + 1) | 0), vertices)) && FarseerPhysics.Common.Decomposition.BayazitDecomposer.RightOn(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i + 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j, vertices))) {
                                    p = FarseerPhysics.Common.LineTools.LineIntersect(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i + 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((j + 1) | 0), vertices));
                                    if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.Left(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i - 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), p.$clone())) {
                                        d = FarseerPhysics.Common.Decomposition.BayazitDecomposer.SquareDist(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), p.$clone());
                                        if (d < upperDist) {
                                            upperDist = d;
                                            upperIndex = j;
                                            upperInt = p.$clone();
                                        }
                                    }
                                }
                            }

                            if (lowerIndex === (((upperIndex + 1) | 0)) % vertices.Count) {
                                var sp = (Microsoft.Xna.Framework.Vector2.op_Division$1((Microsoft.Xna.Framework.Vector2.op_Addition(lowerInt.$clone(), upperInt.$clone())), 2));

                                lowerPoly = FarseerPhysics.Common.Decomposition.BayazitDecomposer.Copy(i, upperIndex, vertices);
                                lowerPoly.add(sp.$clone());
                                upperPoly = FarseerPhysics.Common.Decomposition.BayazitDecomposer.Copy(lowerIndex, i, vertices);
                                upperPoly.add(sp.$clone());
                            } else {
                                var highestScore = 0, bestIndex = lowerIndex;
                                while (upperIndex < lowerIndex) {
                                    upperIndex = (upperIndex + vertices.Count) | 0;
                                }
                                for (var j1 = lowerIndex; j1 <= upperIndex; j1 = (j1 + 1) | 0) {
                                    if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.CanSee(i, j1, vertices)) {
                                        var score = 1 / (FarseerPhysics.Common.Decomposition.BayazitDecomposer.SquareDist(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j1, vertices)) + 1);
                                        if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.Reflex(j1, vertices)) {
                                            if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.RightOn(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((j1 - 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j1, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices)) && FarseerPhysics.Common.Decomposition.BayazitDecomposer.LeftOn(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((j1 + 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j1, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices))) {
                                                score += 3;
                                            } else {
                                                score += 2;
                                            }
                                        } else {
                                            score += 1;
                                        }
                                        if (score > highestScore) {
                                            bestIndex = j1;
                                            highestScore = score;
                                        }
                                    }
                                }
                                lowerPoly = FarseerPhysics.Common.Decomposition.BayazitDecomposer.Copy(i, Bridge.Int.clip32(bestIndex), vertices);
                                upperPoly = FarseerPhysics.Common.Decomposition.BayazitDecomposer.Copy(Bridge.Int.clip32(bestIndex), i, vertices);
                            }
                            list.AddRange(FarseerPhysics.Common.Decomposition.BayazitDecomposer.ConvexPartition(lowerPoly));
                            list.AddRange(FarseerPhysics.Common.Decomposition.BayazitDecomposer.ConvexPartition(upperPoly));
                            return list;
                        }
                    }

                    if (vertices.Count > FarseerPhysics.Settings.MaxPolygonVertices) {
                        lowerPoly = FarseerPhysics.Common.Decomposition.BayazitDecomposer.Copy(0, ((Bridge.Int.div(vertices.Count, 2)) | 0), vertices);
                        upperPoly = FarseerPhysics.Common.Decomposition.BayazitDecomposer.Copy(((Bridge.Int.div(vertices.Count, 2)) | 0), 0, vertices);
                        list.AddRange(FarseerPhysics.Common.Decomposition.BayazitDecomposer.ConvexPartition(lowerPoly));
                        list.AddRange(FarseerPhysics.Common.Decomposition.BayazitDecomposer.ConvexPartition(upperPoly));
                    } else {
                        list.add(vertices);
                    }

                    for (var i1 = 0; i1 < list.Count; i1 = (i1 + 1) | 0) {
                        list.setItem(i1, FarseerPhysics.Common.PolygonManipulation.SimplifyTools.CollinearSimplify$1(list.getItem(i1), 0));
                    }

                    for (var i2 = (list.Count - 1) | 0; i2 >= 0; i2 = (i2 - 1) | 0) {
                        if (list.getItem(i2).Count === 0) {
                            list.removeAt(i2);
                        }
                    }

                    return list;
                },
                CanSee: function (i, j, vertices) {
                    if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.Reflex(i, vertices)) {
                        if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.LeftOn(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i - 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j, vertices)) && FarseerPhysics.Common.Decomposition.BayazitDecomposer.RightOn(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i + 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j, vertices))) {
                            return false;
                        }
                    } else {
                        if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.RightOn(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i + 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j, vertices)) || FarseerPhysics.Common.Decomposition.BayazitDecomposer.LeftOn(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i - 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j, vertices))) {
                            return false;
                        }
                    }
                    if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.Reflex(j, vertices)) {
                        if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.LeftOn(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((j - 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices)) && FarseerPhysics.Common.Decomposition.BayazitDecomposer.RightOn(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((j + 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices))) {
                            return false;
                        }
                    } else {
                        if (FarseerPhysics.Common.Decomposition.BayazitDecomposer.RightOn(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((j + 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices)) || FarseerPhysics.Common.Decomposition.BayazitDecomposer.LeftOn(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((j - 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices))) {
                            return false;
                        }
                    }
                    for (var k = 0; k < vertices.Count; k = (k + 1) | 0) {
                        if ((((k + 1) | 0)) % vertices.Count === i || k === i || (((k + 1) | 0)) % vertices.Count === j || k === j) {
                            continue;
                        }
                        var intersectionPoint = { v : new Microsoft.Xna.Framework.Vector2() };
                        if (FarseerPhysics.Common.LineTools.LineIntersect$1(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(j, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(k, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((k + 1) | 0), vertices), intersectionPoint)) {
                            return false;
                        }
                    }
                    return true;
                },
                Reflex: function (i, vertices) {
                    return FarseerPhysics.Common.Decomposition.BayazitDecomposer.Right$1(i, vertices);
                },
                Right$1: function (i, vertices) {
                    return FarseerPhysics.Common.Decomposition.BayazitDecomposer.Right(FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i - 1) | 0), vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(i, vertices), FarseerPhysics.Common.Decomposition.BayazitDecomposer.At(((i + 1) | 0), vertices));
                },
                Right: function (a, b, c) {
                    a = {v:a};
                    b = {v:b};
                    c = {v:c};
                    return FarseerPhysics.Common.MathUtils.Area$1(a, b, c) < 0;
                },
                Left: function (a, b, c) {
                    a = {v:a};
                    b = {v:b};
                    c = {v:c};
                    return FarseerPhysics.Common.MathUtils.Area$1(a, b, c) > 0;
                },
                LeftOn: function (a, b, c) {
                    a = {v:a};
                    b = {v:b};
                    c = {v:c};
                    return FarseerPhysics.Common.MathUtils.Area$1(a, b, c) >= 0;
                },
                RightOn: function (a, b, c) {
                    a = {v:a};
                    b = {v:b};
                    c = {v:c};
                    return FarseerPhysics.Common.MathUtils.Area$1(a, b, c) <= 0;
                },
                SquareDist: function (a, b) {
                    var dx = b.X - a.X;
                    var dy = b.Y - a.Y;
                    return dx * dx + dy * dy;
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.CDT.Orientation", {
        $kind: "enum",
        statics: {
            fields: {
                CW: 0,
                CCW: 1,
                Collinear: 2
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.CDTDecomposer", {
        statics: {
            methods: {
                ConvexPartition$1: function (vertices) {
                    var $t, $t1, $t2;
                    var poly = new Poly2Tri.Triangulation.Polygon.Polygon.ctor();

                    $t = Bridge.getEnumerator(vertices);
                    try {
                        while ($t.moveNext()) {
                            var vertex = $t.Current.$clone();
                            System.Array.add(poly.Points, new Poly2Tri.Triangulation.TriangulationPoint(vertex.X, vertex.Y), Poly2Tri.Triangulation.TriangulationPoint);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    var tcx = new Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext();
                    tcx.PrepareTriangulation(poly);
                    Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Triangulate(tcx);

                    var results = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();

                    $t1 = Bridge.getEnumerator(poly.Triangles, Poly2Tri.Triangulation.Delaunay.DelaunayTriangle);
                    try {
                        while ($t1.moveNext()) {
                            var triangle = $t1.Current;
                            var v = new FarseerPhysics.Common.Vertices.ctor();
                            $t2 = Bridge.getEnumerator(triangle.Points);
                            try {
                                while ($t2.moveNext()) {
                                    var p = $t2.Current;
                                    v.add(new Microsoft.Xna.Framework.Vector2.$ctor2(p.X, p.Y));
                                }
                            } finally {
                                if (Bridge.is($t2, System.IDisposable)) {
                                    $t2.System$IDisposable$Dispose();
                                }
                            }results.add(v);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    return results;
                },
                ConvexPartition: function (vertices) {
                    var $t, $t1, $t2, $t3, $t4;
                    var poly = new Poly2Tri.Triangulation.Polygon.Polygon.ctor();
                    $t = Bridge.getEnumerator(vertices);
                    try {
                        while ($t.moveNext()) {
                            var vertex = $t.Current.$clone();
                            System.Array.add(poly.Points, new Poly2Tri.Triangulation.TriangulationPoint(vertex.X, vertex.Y), Poly2Tri.Triangulation.TriangulationPoint);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    if (vertices.Holes != null) {
                        $t1 = Bridge.getEnumerator(vertices.Holes);
                        try {
                            while ($t1.moveNext()) {
                                var holeVertices = $t1.Current;
                                var hole = new Poly2Tri.Triangulation.Polygon.Polygon.ctor();
                                $t2 = Bridge.getEnumerator(holeVertices);
                                try {
                                    while ($t2.moveNext()) {
                                        var vertex1 = $t2.Current.$clone();
                                        System.Array.add(hole.Points, new Poly2Tri.Triangulation.TriangulationPoint(vertex1.X, vertex1.Y), Poly2Tri.Triangulation.TriangulationPoint);
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$Dispose();
                                    }
                                }
                                poly.AddHole(hole);
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }}

                    var tcx = new Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext();
                    tcx.PrepareTriangulation(poly);
                    Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Triangulate(tcx);

                    var results = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();

                    $t3 = Bridge.getEnumerator(poly.Triangles, Poly2Tri.Triangulation.Delaunay.DelaunayTriangle);
                    try {
                        while ($t3.moveNext()) {
                            var triangle = $t3.Current;
                            var v = new FarseerPhysics.Common.Vertices.ctor();
                            $t4 = Bridge.getEnumerator(triangle.Points);
                            try {
                                while ($t4.moveNext()) {
                                    var p = $t4.Current;
                                    v.add(new Microsoft.Xna.Framework.Vector2.$ctor2(p.X, p.Y));
                                }
                            } finally {
                                if (Bridge.is($t4, System.IDisposable)) {
                                    $t4.System$IDisposable$Dispose();
                                }
                            }results.add(v);
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }
                    return results;
                }
            }
        }
    });

    /**
     * Ported from jBox2D. Original author: ewjordan 
     Triangulates a polygon using simple ear-clipping algorithm.
     Only works on simple polygons.
     Triangles may be degenerate, especially if you have identical points
     in the input to the algorithm.  Check this before you use them.
     *
     * @static
     * @abstract
     * @public
     * @class FarseerPhysics.Common.Decomposition.EarclipDecomposer
     */
    Bridge.define("FarseerPhysics.Common.Decomposition.EarclipDecomposer", {
        statics: {
            fields: {
                Tol: 0
            },
            ctors: {
                init: function () {
                    this.Tol = 0.001;
                }
            },
            methods: {
                /**
                 * Decomposes a non-convex polygon into a number of convex polygons, up
                 to maxPolys (remaining pieces are thrown out).
                 Each resulting polygon will have no more than Settings.MaxPolygonVertices
                 vertices.
                 Warning: Only works on simple polygons
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @memberof FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @param   {FarseerPhysics.Common.Vertices}       vertices    The vertices.
                 * @return  {System.Collections.Generic.List$1}
                 */
                ConvexPartition: function (vertices) {
                    return FarseerPhysics.Common.Decomposition.EarclipDecomposer.ConvexPartition$1(vertices, 2147483647, 0);
                },
                /**
                 * Decomposes a non-convex polygon into a number of convex polygons, up
                 to maxPolys (remaining pieces are thrown out).
                 Each resulting polygon will have no more than Settings.MaxPolygonVertices
                 vertices.
                 Warning: Only works on simple polygons
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @memberof FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @param   {FarseerPhysics.Common.Vertices}       vertices     The vertices.
                 * @param   {number}                               maxPolys     The maximum number of polygons.
                 * @param   {number}                               tolerance    The tolerance.
                 * @return  {System.Collections.Generic.List$1}
                 */
                ConvexPartition$1: function (vertices, maxPolys, tolerance) {
                    if (vertices.Count < 3) {
                        return function (_o1) {
                                _o1.add(vertices);
                                return _o1;
                            }(new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor());
                    }
                    /* 
                    if (vertices.IsConvex() && vertices.Count <= Settings.MaxPolygonVertices)
                    {
                       if (vertices.IsCounterClockWise())
                       {
                           Vertices tempP = new Vertices(vertices);
                           tempP.Reverse();
                           tempP = SimplifyTools.CollinearSimplify(tempP);
                           tempP.ForceCounterClockWise();
                           return new List<Vertices> { tempP };
                       }
                       vertices = SimplifyTools.CollinearSimplify(vertices);
                       vertices.ForceCounterClockWise();
                       return new List<Vertices> { vertices };
                    }
                    */
                    var triangulated;

                    if (vertices.IsCounterClockWise()) {
                        var tempP = new FarseerPhysics.Common.Vertices.$ctor2(vertices);
                        tempP.Reverse();
                        triangulated = FarseerPhysics.Common.Decomposition.EarclipDecomposer.TriangulatePolygon(tempP);
                    } else {
                        triangulated = FarseerPhysics.Common.Decomposition.EarclipDecomposer.TriangulatePolygon(vertices);
                    }
                    if (triangulated.Count < 1) {
                        throw new System.Exception("Can't triangulate your polygon.");
                    }

                    var polygonizedTriangles = FarseerPhysics.Common.Decomposition.EarclipDecomposer.PolygonizeTriangles(triangulated, maxPolys, tolerance);

                    for (var i = 0; i < polygonizedTriangles.Count; i = (i + 1) | 0) {
                        polygonizedTriangles.setItem(i, FarseerPhysics.Common.PolygonManipulation.SimplifyTools.CollinearSimplify$1(polygonizedTriangles.getItem(i), 0));
                    }

                    for (var i1 = (polygonizedTriangles.Count - 1) | 0; i1 >= 0; i1 = (i1 - 1) | 0) {
                        if (polygonizedTriangles.getItem(i1).Count === 0) {
                            polygonizedTriangles.removeAt(i1);
                        }
                    }

                    return polygonizedTriangles;
                },
                /**
                 * Turns a list of triangles into a list of convex polygons. Very simple
                 method - start with a seed triangle, keep adding triangles to it until
                 you can't add any more without making the polygon non-convex.
                 Returns an integer telling how many polygons were created.  Will fill
                 polys array up to polysLength entries, which may be smaller or larger
                 than the return value.
                 Takes O(NP) where P is the number of resultant polygons, N is triangle
                 count.
                 The final polygon list will not necessarily be minimal, though in
                 practice it works fairly well.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @memberof FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @param   {System.Collections.Generic.List$1}    triangulated    The triangulated.
                 * @param   {number}                               maxPolys        The maximun number of polygons
                 * @param   {number}                               tolerance       The tolerance
                 * @return  {System.Collections.Generic.List$1}
                 */
                PolygonizeTriangles: function (triangulated, maxPolys, tolerance) {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13;
                    var polys = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).$ctor2(50);

                    var polyIndex = 0;

                    if (triangulated.Count <= 0) {
                        return polys;
                    }

                    var covered = System.Array.init(triangulated.Count, false, System.Boolean);
                    for (var i = 0; i < triangulated.Count; i = (i + 1) | 0) {
                        covered[System.Array.index(i, covered)] = false;

                        if (((($t = triangulated.getItem(i).X)[System.Array.index(0, $t)] === ($t1 = triangulated.getItem(i).X)[System.Array.index(1, $t1)]) && (($t2 = triangulated.getItem(i).Y)[System.Array.index(0, $t2)] === ($t3 = triangulated.getItem(i).Y)[System.Array.index(1, $t3)])) || ((($t4 = triangulated.getItem(i).X)[System.Array.index(1, $t4)] === ($t5 = triangulated.getItem(i).X)[System.Array.index(2, $t5)]) && (($t6 = triangulated.getItem(i).Y)[System.Array.index(1, $t6)] === ($t7 = triangulated.getItem(i).Y)[System.Array.index(2, $t7)])) || ((($t8 = triangulated.getItem(i).X)[System.Array.index(0, $t8)] === ($t9 = triangulated.getItem(i).X)[System.Array.index(2, $t9)]) && (($t10 = triangulated.getItem(i).Y)[System.Array.index(0, $t10)] === ($t11 = triangulated.getItem(i).Y)[System.Array.index(2, $t11)]))) {
                            covered[System.Array.index(i, covered)] = true;
                        }
                    }

                    var notDone = true;
                    while (notDone) {
                        var currTri = -1;
                        for (var i1 = 0; i1 < triangulated.Count; i1 = (i1 + 1) | 0) {
                            if (covered[System.Array.index(i1, covered)]) {
                                continue;
                            }
                            currTri = i1;
                            break;
                        }
                        if (currTri === -1) {
                            notDone = false;
                        } else {
                            var poly = new FarseerPhysics.Common.Vertices.$ctor3(3);

                            for (var i2 = 0; i2 < 3; i2 = (i2 + 1) | 0) {
                                poly.add(new Microsoft.Xna.Framework.Vector2.$ctor2(($t12 = triangulated.getItem(currTri).X)[System.Array.index(i2, $t12)], ($t13 = triangulated.getItem(currTri).Y)[System.Array.index(i2, $t13)]));
                            }

                            covered[System.Array.index(currTri, covered)] = true;
                            var index = 0;
                            for (var i3 = 0; i3 < Bridge.Int.mul(2, triangulated.Count); i3 = (i3 + 1) | 0, index = (index + 1) | 0) {
                                while (index >= triangulated.Count) {
                                    index = (index - triangulated.Count) | 0;
                                }
                                if (covered[System.Array.index(index, covered)]) {
                                    continue;
                                }
                                var newP = FarseerPhysics.Common.Decomposition.EarclipDecomposer.AddTriangle(triangulated.getItem(index), poly);
                                if (newP == null) {
                                    continue;
                                }

                                if (newP.Count > FarseerPhysics.Settings.MaxPolygonVertices) {
                                    continue;
                                }

                                if (newP.IsConvex()) {
                                    poly = new FarseerPhysics.Common.Vertices.$ctor2(newP);
                                    covered[System.Array.index(index, covered)] = true;
                                }
                            }

                            if (polyIndex < maxPolys) {

                                if (poly.Count >= 3) {
                                    polys.add(new FarseerPhysics.Common.Vertices.$ctor2(poly));
                                }
                            }
                            if (poly.Count >= 3) {
                                polyIndex = (polyIndex + 1) | 0;
                            }
                        }
                    }

                    return polys;
                },
                /**
                 * Triangulates a polygon using simple ear-clipping algorithm. Returns
                 size of Triangle array unless the polygon can't be triangulated.
                 This should only happen if the polygon self-intersects,
                 though it will not _always_ return null for a bad polygon - it is the
                 caller's responsibility to check for self-intersection, and if it
                 doesn't, it should at least check that the return value is non-null
                 before using. You're warned!
                 Triangles may be degenerate, especially if you have identical points
                 in the input to the algorithm.  Check this before you use them.
                 This is totally unoptimized, so for large polygons it should not be part
                 of the simulation loop.
                 Warning: Only works on simple polygons.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @memberof FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @param   {FarseerPhysics.Common.Vertices}       vertices
                 * @return  {System.Collections.Generic.List$1}
                 */
                TriangulatePolygon: function (vertices) {
                    var results = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Triangle)).ctor();
                    if (vertices.Count < 3) {
                        return new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Triangle)).ctor();
                    }

                    var pA = { }, pB = { };
                    var pin = new FarseerPhysics.Common.Vertices.$ctor2(vertices);
                    if (FarseerPhysics.Common.Decomposition.EarclipDecomposer.ResolvePinchPoint(pin, pA, pB)) {
                        var mergeA = FarseerPhysics.Common.Decomposition.EarclipDecomposer.TriangulatePolygon(pA.v);
                        var mergeB = FarseerPhysics.Common.Decomposition.EarclipDecomposer.TriangulatePolygon(pB.v);

                        if (mergeA.Count === -1 || mergeB.Count === -1) {
                            throw new System.Exception("Can't triangulate your polygon.");
                        }

                        for (var i = 0; i < mergeA.Count; i = (i + 1) | 0) {
                            results.add(new FarseerPhysics.Common.Decomposition.Triangle.ctor(mergeA.getItem(i)));
                        }
                        for (var i1 = 0; i1 < mergeB.Count; i1 = (i1 + 1) | 0) {
                            results.add(new FarseerPhysics.Common.Decomposition.Triangle.ctor(mergeB.getItem(i1)));
                        }

                        return results;
                    }

                    var buffer = System.Array.init(((vertices.Count - 2) | 0), null, FarseerPhysics.Common.Decomposition.Triangle);
                    var bufferSize = 0;
                    var xrem = System.Array.init(vertices.Count, 0, System.Single);
                    var yrem = System.Array.init(vertices.Count, 0, System.Single);
                    for (var i2 = 0; i2 < vertices.Count; i2 = (i2 + 1) | 0) {
                        xrem[System.Array.index(i2, xrem)] = vertices.getItem(i2).$clone().X;
                        yrem[System.Array.index(i2, yrem)] = vertices.getItem(i2).$clone().Y;
                    }

                    var vNum = vertices.Count;

                    while (vNum > 3) {
                        var earIndex = -1;
                        var earMaxMinCross = -10.0;
                        for (var i3 = 0; i3 < vNum; i3 = (i3 + 1) | 0) {
                            if (FarseerPhysics.Common.Decomposition.EarclipDecomposer.IsEar(i3, xrem, yrem, vNum)) {
                                var lower = FarseerPhysics.Common.Decomposition.EarclipDecomposer.Remainder(((i3 - 1) | 0), vNum);
                                var upper = FarseerPhysics.Common.Decomposition.EarclipDecomposer.Remainder(((i3 + 1) | 0), vNum);
                                var d1 = { v : new Microsoft.Xna.Framework.Vector2.$ctor2(xrem[System.Array.index(upper, xrem)] - xrem[System.Array.index(i3, xrem)], yrem[System.Array.index(upper, yrem)] - yrem[System.Array.index(i3, yrem)]) };
                                var d2 = { v : new Microsoft.Xna.Framework.Vector2.$ctor2(xrem[System.Array.index(i3, xrem)] - xrem[System.Array.index(lower, xrem)], yrem[System.Array.index(i3, yrem)] - yrem[System.Array.index(lower, yrem)]) };
                                var d3 = { v : new Microsoft.Xna.Framework.Vector2.$ctor2(xrem[System.Array.index(lower, xrem)] - xrem[System.Array.index(upper, xrem)], yrem[System.Array.index(lower, yrem)] - yrem[System.Array.index(upper, yrem)]) };

                                d1.v.Normalize();
                                d2.v.Normalize();
                                d3.v.Normalize();
                                var cross12 = { };
                                FarseerPhysics.Common.MathUtils.Cross$3(d1, d2, cross12);
                                cross12.v = Math.abs(cross12.v);

                                var cross23 = { };
                                FarseerPhysics.Common.MathUtils.Cross$3(d2, d3, cross23);
                                cross23.v = Math.abs(cross23.v);

                                var cross31 = { };
                                FarseerPhysics.Common.MathUtils.Cross$3(d3, d1, cross31);
                                cross31.v = Math.abs(cross31.v);

                                var minCross = Math.min(cross12.v, Math.min(cross23.v, cross31.v));
                                if (minCross > earMaxMinCross) {
                                    earIndex = i3;
                                    earMaxMinCross = minCross;
                                }
                            }
                        }

                        if (earIndex === -1) {
                            for (var i4 = 0; i4 < bufferSize; i4 = (i4 + 1) | 0) {
                                results.add(new FarseerPhysics.Common.Decomposition.Triangle.ctor(buffer[System.Array.index(i4, buffer)]));
                            }

                            return results;
                        }


                        vNum = (vNum - 1) | 0;
                        var newx = System.Array.init(vNum, 0, System.Single);
                        var newy = System.Array.init(vNum, 0, System.Single);
                        var currDest = 0;
                        for (var i5 = 0; i5 < vNum; i5 = (i5 + 1) | 0) {
                            if (currDest === earIndex) {
                                currDest = (currDest + 1) | 0;
                            }
                            newx[System.Array.index(i5, newx)] = xrem[System.Array.index(currDest, xrem)];
                            newy[System.Array.index(i5, newy)] = yrem[System.Array.index(currDest, yrem)];
                            currDest = (currDest + 1) | 0;
                        }

                        var under = (earIndex === 0) ? (vNum) : (((earIndex - 1) | 0));
                        var over = (earIndex === vNum) ? 0 : (((earIndex + 1) | 0));
                        var toAdd = new FarseerPhysics.Common.Decomposition.Triangle.$ctor1(xrem[System.Array.index(earIndex, xrem)], yrem[System.Array.index(earIndex, yrem)], xrem[System.Array.index(over, xrem)], yrem[System.Array.index(over, yrem)], xrem[System.Array.index(under, xrem)], yrem[System.Array.index(under, yrem)]);
                        buffer[System.Array.index(bufferSize, buffer)] = toAdd;
                        bufferSize = (bufferSize + 1) | 0;

                        xrem = newx;
                        yrem = newy;
                    }

                    var tooAdd = new FarseerPhysics.Common.Decomposition.Triangle.$ctor1(xrem[System.Array.index(1, xrem)], yrem[System.Array.index(1, yrem)], xrem[System.Array.index(2, xrem)], yrem[System.Array.index(2, yrem)], xrem[System.Array.index(0, xrem)], yrem[System.Array.index(0, yrem)]);
                    buffer[System.Array.index(bufferSize, buffer)] = tooAdd;
                    bufferSize = (bufferSize + 1) | 0;

                    for (var i6 = 0; i6 < bufferSize; i6 = (i6 + 1) | 0) {
                        results.add(new FarseerPhysics.Common.Decomposition.Triangle.ctor(buffer[System.Array.index(i6, buffer)]));
                    }

                    return results;
                },
                /**
                 * Finds and fixes "pinch points," points where two polygon
                 vertices are at the same point.
                 If a pinch point is found, pin is broken up into poutA and poutB
                 and true is returned; otherwise, returns false.
                 Mostly for internal use.
                 O(N^2) time, which sucks...
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @memberof FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @param   {FarseerPhysics.Common.Vertices}    pin      The pin.
                 * @param   {FarseerPhysics.Common.Vertices}    poutA    The pout A.
                 * @param   {FarseerPhysics.Common.Vertices}    poutB    The pout B.
                 * @return  {boolean}
                 */
                ResolvePinchPoint: function (pin, poutA, poutB) {
                    poutA.v = new FarseerPhysics.Common.Vertices.ctor();
                    poutB.v = new FarseerPhysics.Common.Vertices.ctor();

                    if (pin.Count < 3) {
                        return false;
                    }

                    var hasPinchPoint = false;
                    var pinchIndexA = -1;
                    var pinchIndexB = -1;
                    for (var i = 0; i < pin.Count; i = (i + 1) | 0) {
                        for (var j = (i + 1) | 0; j < pin.Count; j = (j + 1) | 0) {
                            if (Math.abs(pin.getItem(i).$clone().X - pin.getItem(j).$clone().X) < FarseerPhysics.Common.Decomposition.EarclipDecomposer.Tol && Math.abs(pin.getItem(i).$clone().Y - pin.getItem(j).$clone().Y) < FarseerPhysics.Common.Decomposition.EarclipDecomposer.Tol && j !== ((i + 1) | 0)) {
                                pinchIndexA = i;
                                pinchIndexB = j;
                                hasPinchPoint = true;
                                break;
                            }
                        }
                        if (hasPinchPoint) {
                            break;
                        }
                    }
                    if (hasPinchPoint) {
                        var sizeA = (pinchIndexB - pinchIndexA) | 0;
                        if (sizeA === pin.Count) {
                            return false;
                        }
                        for (var i1 = 0; i1 < sizeA; i1 = (i1 + 1) | 0) {
                            var ind = FarseerPhysics.Common.Decomposition.EarclipDecomposer.Remainder(((pinchIndexA + i1) | 0), pin.Count);
                            poutA.v.add(pin.getItem(ind).$clone());
                        }

                        var sizeB = (pin.Count - sizeA) | 0;
                        for (var i2 = 0; i2 < sizeB; i2 = (i2 + 1) | 0) {
                            var ind1 = FarseerPhysics.Common.Decomposition.EarclipDecomposer.Remainder(((pinchIndexB + i2) | 0), pin.Count);
                            poutB.v.add(pin.getItem(ind1).$clone());
                        }
                    }
                    return hasPinchPoint;
                },
                /**
                 * Fix for obnoxious behavior for the % operator for negative numbers...
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @memberof FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @param   {number}    x          The x.
                 * @param   {number}    modulus    The modulus.
                 * @return  {number}
                 */
                Remainder: function (x, modulus) {
                    var rem = x % modulus;
                    while (rem < 0) {
                        rem = (rem + modulus) | 0;
                    }
                    return rem;
                },
                AddTriangle: function (t, vertices) {
                    var firstP = -1;
                    var firstT = -1;
                    var secondP = -1;
                    var secondT = -1;
                    for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                        if (t.X[System.Array.index(0, t.X)] === vertices.getItem(i).$clone().X && t.Y[System.Array.index(0, t.Y)] === vertices.getItem(i).$clone().Y) {
                            if (firstP === -1) {
                                firstP = i;
                                firstT = 0;
                            } else {
                                secondP = i;
                                secondT = 0;
                            }
                        } else if (t.X[System.Array.index(1, t.X)] === vertices.getItem(i).$clone().X && t.Y[System.Array.index(1, t.Y)] === vertices.getItem(i).$clone().Y) {
                            if (firstP === -1) {
                                firstP = i;
                                firstT = 1;
                            } else {
                                secondP = i;
                                secondT = 1;
                            }
                        } else if (t.X[System.Array.index(2, t.X)] === vertices.getItem(i).$clone().X && t.Y[System.Array.index(2, t.Y)] === vertices.getItem(i).$clone().Y) {
                            if (firstP === -1) {
                                firstP = i;
                                firstT = 2;
                            } else {
                                secondP = i;
                                secondT = 2;
                            }
                        }
                    }
                    if (firstP === 0 && secondP === ((vertices.Count - 1) | 0)) {
                        firstP = (vertices.Count - 1) | 0;
                        secondP = 0;
                    }

                    if (secondP === -1) {
                        return null;
                    }

                    var tipT = 0;
                    if (tipT === firstT || tipT === secondT) {
                        tipT = 1;
                    }
                    if (tipT === firstT || tipT === secondT) {
                        tipT = 2;
                    }

                    var result = new FarseerPhysics.Common.Vertices.$ctor3(((vertices.Count + 1) | 0));
                    for (var i1 = 0; i1 < vertices.Count; i1 = (i1 + 1) | 0) {
                        result.add(vertices.getItem(i1).$clone());

                        if (i1 === firstP) {
                            result.add(new Microsoft.Xna.Framework.Vector2.$ctor2(t.X[System.Array.index(tipT, t.X)], t.Y[System.Array.index(tipT, t.Y)]));
                        }
                    }

                    return result;
                },
                /**
                 * Checks if vertex i is the tip of an ear in polygon defined by xv[] and
                 yv[].
                 Assumes clockwise orientation of polygon...ick
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @memberof FarseerPhysics.Common.Decomposition.EarclipDecomposer
                 * @param   {number}            i           The i.
                 * @param   {Array.<number>}    xv          The xv.
                 * @param   {Array.<number>}    yv          The yv.
                 * @param   {number}            xvLength    Length of the xv.
                 * @return  {boolean}                       <pre><code>true</code></pre> if the specified i is ear; otherwise, <pre><code>false</code></pre>.
                 */
                IsEar: function (i, xv, yv, xvLength) {
                    var dx0, dy0, dx1, dy1;
                    if (i >= xvLength || i < 0 || xvLength < 3) {
                        return false;
                    }
                    var upper = (i + 1) | 0;
                    var lower = (i - 1) | 0;
                    if (i === 0) {
                        dx0 = xv[System.Array.index(0, xv)] - xv[System.Array.index(((xvLength - 1) | 0), xv)];
                        dy0 = yv[System.Array.index(0, yv)] - yv[System.Array.index(((xvLength - 1) | 0), yv)];
                        dx1 = xv[System.Array.index(1, xv)] - xv[System.Array.index(0, xv)];
                        dy1 = yv[System.Array.index(1, yv)] - yv[System.Array.index(0, yv)];
                        lower = (xvLength - 1) | 0;
                    } else if (i === ((xvLength - 1) | 0)) {
                        dx0 = xv[System.Array.index(i, xv)] - xv[System.Array.index(((i - 1) | 0), xv)];
                        dy0 = yv[System.Array.index(i, yv)] - yv[System.Array.index(((i - 1) | 0), yv)];
                        dx1 = xv[System.Array.index(0, xv)] - xv[System.Array.index(i, xv)];
                        dy1 = yv[System.Array.index(0, yv)] - yv[System.Array.index(i, yv)];
                        upper = 0;
                    } else {
                        dx0 = xv[System.Array.index(i, xv)] - xv[System.Array.index(((i - 1) | 0), xv)];
                        dy0 = yv[System.Array.index(i, yv)] - yv[System.Array.index(((i - 1) | 0), yv)];
                        dx1 = xv[System.Array.index(((i + 1) | 0), xv)] - xv[System.Array.index(i, xv)];
                        dy1 = yv[System.Array.index(((i + 1) | 0), yv)] - yv[System.Array.index(i, yv)];
                    }
                    var cross = dx0 * dy1 - dx1 * dy0;
                    if (cross > 0) {
                        return false;
                    }
                    var myTri = new FarseerPhysics.Common.Decomposition.Triangle.$ctor1(xv[System.Array.index(i, xv)], yv[System.Array.index(i, yv)], xv[System.Array.index(upper, xv)], yv[System.Array.index(upper, yv)], xv[System.Array.index(lower, xv)], yv[System.Array.index(lower, yv)]);
                    for (var j = 0; j < xvLength; j = (j + 1) | 0) {
                        if (j === i || j === lower || j === upper) {
                            continue;
                        }
                        if (myTri.IsInside(xv[System.Array.index(j, xv)], yv[System.Array.index(j, yv)])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.Edge", {
        fields: {
            Above: null,
            B: 0,
            Below: null,
            MPoints: null,
            P: null,
            Q: null,
            Slope: 0
        },
        ctors: {
            ctor: function (p, q) {
                this.$initialize();
                this.P = p;
                this.Q = q;

                if (q.X - p.X !== 0) {
                    this.Slope = (q.Y - p.Y) / (q.X - p.X);
                } else {
                    this.Slope = 0;
                }

                this.B = p.Y - (p.X * this.Slope);
                this.Above = null;
                this.Below = null;
                this.MPoints = new (System.Collections.Generic.HashSet$1(FarseerPhysics.Common.Decomposition.Point)).ctor();
                this.MPoints.add(p);
                this.MPoints.add(q);
            }
        },
        methods: {
            IsAbove: function (point) {
                return this.P.Orient2D(this.Q, point) < 0;
            },
            IsBelow: function (point) {
                return this.P.Orient2D(this.Q, point) > 0;
            },
            AddMpoint: function (point) {
                var $t;
                $t = Bridge.getEnumerator(this.MPoints);
                try {
                    while ($t.moveNext()) {
                        var mp = $t.Current;
                        if (!mp.Neq(point)) {
                            return;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.MPoints.add(point);
            }
        }
    });

    /**
     * Triangulates a polygon into triangles.
     Doesn't handle holes.
     *
     * @static
     * @abstract
     * @public
     * @class FarseerPhysics.Common.Decomposition.FlipcodeDecomposer
     */
    Bridge.define("FarseerPhysics.Common.Decomposition.FlipcodeDecomposer", {
        statics: {
            fields: {
                _tmpA: null,
                _tmpB: null,
                _tmpC: null
            },
            ctors: {
                init: function () {
                    this._tmpA = new Microsoft.Xna.Framework.Vector2();
                    this._tmpB = new Microsoft.Xna.Framework.Vector2();
                    this._tmpC = new Microsoft.Xna.Framework.Vector2();
                }
            },
            methods: {
                /**
                 * Check if the point P is inside the triangle defined by
                 the points A, B, C
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.Decomposition.FlipcodeDecomposer
                 * @memberof FarseerPhysics.Common.Decomposition.FlipcodeDecomposer
                 * @param   {Microsoft.Xna.Framework.Vector2}    a    The A point.
                 * @param   {Microsoft.Xna.Framework.Vector2}    b    The B point.
                 * @param   {Microsoft.Xna.Framework.Vector2}    c    The C point.
                 * @param   {Microsoft.Xna.Framework.Vector2}    p    The point to be tested.
                 * @return  {boolean}                                 True if the point is inside the triangle
                 */
                InsideTriangle: function (a, b, c, p) {
                    var abp = (c.v.X - b.v.X) * (p.v.Y - b.v.Y) - (c.v.Y - b.v.Y) * (p.v.X - b.v.X);

                    var aap = (b.v.X - a.v.X) * (p.v.Y - a.v.Y) - (b.v.Y - a.v.Y) * (p.v.X - a.v.X);

                    var bcp = (a.v.X - c.v.X) * (p.v.Y - c.v.Y) - (a.v.Y - c.v.Y) * (p.v.X - c.v.X);

                    return ((abp >= 0.0) && (bcp >= 0.0) && (aap >= 0.0));
                },
                /**
                 * Cut a the contour and add a triangle into V to describe the 
                 location of the cut
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.Decomposition.FlipcodeDecomposer
                 * @memberof FarseerPhysics.Common.Decomposition.FlipcodeDecomposer
                 * @param   {FarseerPhysics.Common.Vertices}    contour    The list of points defining the polygon
                 * @param   {number}                            u          The index of the first point
                 * @param   {number}                            v          The index of the second point
                 * @param   {number}                            w          The index of the third point
                 * @param   {number}                            n          The number of elements in the array.
                 * @param   {Array.<number>}                    V          The array to populate with indicies of triangles.
                 * @return  {boolean}                                      True if a triangle was found
                 */
                Snip: function (contour, u, v, w, n, V) {
                    if (FarseerPhysics.Settings.Epsilon > FarseerPhysics.Common.MathUtils.Area$1(Bridge.ref(FarseerPhysics.Common.Decomposition.FlipcodeDecomposer, "_tmpA"), Bridge.ref(FarseerPhysics.Common.Decomposition.FlipcodeDecomposer, "_tmpB"), Bridge.ref(FarseerPhysics.Common.Decomposition.FlipcodeDecomposer, "_tmpC"))) {
                        return false;
                    }

                    for (var p = 0; p < n; p = (p + 1) | 0) {
                        if ((p === u) || (p === v) || (p === w)) {
                            continue;
                        }

                        var point = { v : contour.getItem(V[System.Array.index(p, V)]).$clone() };

                        if (FarseerPhysics.Common.Decomposition.FlipcodeDecomposer.InsideTriangle(Bridge.ref(FarseerPhysics.Common.Decomposition.FlipcodeDecomposer, "_tmpA"), Bridge.ref(FarseerPhysics.Common.Decomposition.FlipcodeDecomposer, "_tmpB"), Bridge.ref(FarseerPhysics.Common.Decomposition.FlipcodeDecomposer, "_tmpC"), point)) {
                            return false;
                        }
                    }

                    return true;
                },
                /**
                 * Decompose the polygon into triangles
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.Decomposition.FlipcodeDecomposer
                 * @memberof FarseerPhysics.Common.Decomposition.FlipcodeDecomposer
                 * @param   {FarseerPhysics.Common.Vertices}       contour    The list of points describing the polygon
                 * @return  {System.Collections.Generic.List$1}
                 */
                ConvexPartition: function (contour) {
                    var n = contour.Count;
                    if (n < 3) {
                        return new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();
                    }

                    var V = System.Array.init(n, 0, System.Int32);

                    if (contour.IsCounterClockWise()) {
                        for (var v = 0; v < n; v = (v + 1) | 0) {
                            V[System.Array.index(v, V)] = v;
                        }
                    } else {
                        for (var v1 = 0; v1 < n; v1 = (v1 + 1) | 0) {
                            V[System.Array.index(v1, V)] = ((((n - 1) | 0)) - v1) | 0;
                        }
                    }

                    var nv = n;

                    var count = Bridge.Int.mul(2, nv); /* error detection */

                    var result = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();

                    for (var v2 = (nv - 1) | 0; nv > 2; ) {
                        if (0 >= (Bridge.identity(count, (count = (count - 1) | 0)))) {
                            return new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();
                        }

                        var u = v2;
                        if (nv <= u) {
                            u = 0;
                        }
                        v2 = (u + 1) | 0;
                        if (nv <= v2) {
                            v2 = 0;
                        }
                        var w = (v2 + 1) | 0;
                        if (nv <= w) {
                            w = 0;
                        }

                        FarseerPhysics.Common.Decomposition.FlipcodeDecomposer._tmpA = contour.getItem(V[System.Array.index(u, V)]).$clone();
                        FarseerPhysics.Common.Decomposition.FlipcodeDecomposer._tmpB = contour.getItem(V[System.Array.index(v2, V)]).$clone();
                        FarseerPhysics.Common.Decomposition.FlipcodeDecomposer._tmpC = contour.getItem(V[System.Array.index(w, V)]).$clone();

                        if (FarseerPhysics.Common.Decomposition.FlipcodeDecomposer.Snip(contour, u, v2, w, nv, V)) {
                            var s, t;

                            var triangle = new FarseerPhysics.Common.Vertices.$ctor3(3);
                            triangle.add(FarseerPhysics.Common.Decomposition.FlipcodeDecomposer._tmpA.$clone());
                            triangle.add(FarseerPhysics.Common.Decomposition.FlipcodeDecomposer._tmpB.$clone());
                            triangle.add(FarseerPhysics.Common.Decomposition.FlipcodeDecomposer._tmpC.$clone());
                            result.add(triangle);

                            for (s = v2, t = (v2 + 1) | 0; t < nv; s = (s + 1) | 0, t = (t + 1) | 0) {
                                V[System.Array.index(s, V)] = V[System.Array.index(t, V)];
                            }
                            nv = (nv - 1) | 0;

                            count = Bridge.Int.mul(2, nv);
                        }
                    }

                    return result;
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.MonotoneMountain", {
        statics: {
            fields: {
                PiSlop: 0
            },
            ctors: {
                init: function () {
                    this.PiSlop = 3.1;
                }
            }
        },
        fields: {
            Triangles: null,
            _convexPoints: null,
            _head: null,
            _monoPoly: null,
            _positive: false,
            _size: 0,
            _tail: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this._size = 0;
                this._tail = null;
                this._head = null;
                this._positive = false;
                this._convexPoints = new (System.Collections.Generic.HashSet$1(FarseerPhysics.Common.Decomposition.Point)).ctor();
                this._monoPoly = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Point)).ctor();
                this.Triangles = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Point))).ctor();
            }
        },
        methods: {
            Add: function (point) {
                if (this._size === 0) {
                    this._head = point;
                    this._size = 1;
                } else if (this._size === 1) {
                    this._tail = point;
                    this._tail.Prev = this._head;
                    this._head.Next = this._tail;
                    this._size = 2;
                } else {
                    this._tail.Next = point;
                    point.Prev = this._tail;
                    this._tail = point;
                    this._size = (this._size + 1) | 0;
                }
            },
            Remove: function (point) {
                var next = point.Next;
                var prev = point.Prev;
                point.Prev.Next = next;
                point.Next.Prev = prev;
                this._size = (this._size - 1) | 0;
            },
            Process: function () {
                this._positive = this.AngleSign();
                this.GenMonoPoly();

                var p = this._head.Next;
                while (p.Neq(this._tail)) {
                    var a = this.Angle(p);
                    if (a >= FarseerPhysics.Common.Decomposition.MonotoneMountain.PiSlop || a <= -3.1 || a === 0.0) {
                        this.Remove(p);
                    } else {
                        if (this.IsConvex(p)) {
                            this._convexPoints.add(p);
                        }
                    }
                    p = p.Next;
                }

                this.Triangulate();
            },
            Triangulate: function () {
                while (this._convexPoints.Count !== 0) {
                    var e = this._convexPoints.GetEnumerator().$clone();
                    e.System$Collections$IEnumerator$moveNext();
                    var ear = e[Bridge.geti(e, "System$Collections$Generic$IEnumerator$1$FarseerPhysics$Common$Decomposition$Point$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")];

                    this._convexPoints.remove(ear);
                    var a = ear.Prev;
                    var b = ear;
                    var c = ear.Next;
                    var triangle = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Point)).$ctor2(3);
                    triangle.add(a);
                    triangle.add(b);
                    triangle.add(c);

                    this.Triangles.add(triangle);

                    this.Remove(ear);
                    if (this.Valid(a)) {
                        this._convexPoints.add(a);
                    }
                    if (this.Valid(c)) {
                        this._convexPoints.add(c);
                    }
                }

                System.Diagnostics.Debug.Assert$1(this._size <= 3, "Triangulation bug, please report");
            },
            Valid: function (p) {
                return p.Neq(this._head) && p.Neq(this._tail) && this.IsConvex(p);
            },
            GenMonoPoly: function () {
                var p = this._head;
                while (p != null) {
                    this._monoPoly.add(p);
                    p = p.Next;
                }
            },
            Angle: function (p) {
                var a = (FarseerPhysics.Common.Decomposition.Point.op_Subtraction(p.Next, p));
                var b = (FarseerPhysics.Common.Decomposition.Point.op_Subtraction(p.Prev, p));
                return Math.atan2(a.Cross(b), a.Dot(b));
            },
            AngleSign: function () {
                var a = (FarseerPhysics.Common.Decomposition.Point.op_Subtraction(this._head.Next, this._head));
                var b = (FarseerPhysics.Common.Decomposition.Point.op_Subtraction(this._tail, this._head));
                return Math.atan2(a.Cross(b), a.Dot(b)) >= 0;
            },
            IsConvex: function (p) {
                if (this._positive !== (this.Angle(p) >= 0)) {
                    return false;
                }
                return true;
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.Node", {
        fields: {
            LeftChild: null,
            ParentList: null,
            RightChild: null
        },
        ctors: {
            ctor: function (left, right) {
                this.$initialize();
                this.ParentList = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Node)).ctor();
                this.LeftChild = left;
                this.RightChild = right;

                if (left != null) {
                    left.ParentList.add(this);
                }
                if (right != null) {
                    right.ParentList.add(this);
                }
            }
        },
        methods: {
            Replace: function (node) {
                var $t;
                $t = Bridge.getEnumerator(node.ParentList);
                try {
                    while ($t.moveNext()) {
                        var parent = $t.Current;
                        if (Bridge.referenceEquals(parent.LeftChild, node)) {
                            parent.LeftChild = this;
                        } else {
                            parent.RightChild = this;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }this.ParentList.AddRange(node.ParentList);
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.Point", {
        statics: {
            methods: {
                op_Subtraction: function (p1, p2) {
                    return new FarseerPhysics.Common.Decomposition.Point(p1.X - p2.X, p1.Y - p2.Y);
                },
                op_Subtraction$1: function (p1, f) {
                    return new FarseerPhysics.Common.Decomposition.Point(p1.X - f, p1.Y - f);
                },
                op_Addition: function (p1, p2) {
                    return new FarseerPhysics.Common.Decomposition.Point(p1.X + p2.X, p1.Y + p2.Y);
                },
                op_Addition$1: function (p1, f) {
                    return new FarseerPhysics.Common.Decomposition.Point(p1.X + f, p1.Y + f);
                }
            }
        },
        fields: {
            Next: null,
            Prev: null,
            X: 0,
            Y: 0
        },
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                this.X = x;
                this.Y = y;
                this.Next = null;
                this.Prev = null;
            }
        },
        methods: {
            Cross: function (p) {
                return this.X * p.Y - this.Y * p.X;
            },
            Dot: function (p) {
                return this.X * p.X + this.Y * p.Y;
            },
            Neq: function (p) {
                return p.X !== this.X || p.Y !== this.Y;
            },
            Orient2D: function (pb, pc) {
                var acx = this.X - pc.X;
                var bcx = pb.X - pc.X;
                var acy = this.Y - pc.Y;
                var bcy = pb.Y - pc.Y;
                return acx * bcy - acy * bcx;
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.QueryGraph", {
        fields: {
            _head: null
        },
        ctors: {
            ctor: function (head) {
                this.$initialize();
                this._head = head;
            }
        },
        methods: {
            Locate: function (edge) {
                return this._head.Locate(edge).Trapezoid;
            },
            FollowEdge: function (edge) {
                var trapezoids = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Trapezoid)).ctor();
                trapezoids.add(this.Locate(edge));
                var j = 0;

                while (edge.Q.X > trapezoids.getItem(j).RightPoint.X) {
                    if (edge.IsAbove(trapezoids.getItem(j).RightPoint)) {
                        trapezoids.add(trapezoids.getItem(j).UpperRight);
                    } else {
                        trapezoids.add(trapezoids.getItem(j).LowerRight);
                    }
                    j = (j + 1) | 0;
                }
                return trapezoids;
            },
            Replace: function (sink, node) {
                if (sink.ParentList.Count === 0) {
                    this._head = node;
                } else {
                    node.Replace(sink);
                }
            },
            Case1: function (sink, edge, tList) {
                var yNode = new FarseerPhysics.Common.Decomposition.YNode(edge, FarseerPhysics.Common.Decomposition.Sink.Isink(tList[System.Array.index(1, tList)]), FarseerPhysics.Common.Decomposition.Sink.Isink(tList[System.Array.index(2, tList)]));
                var qNode = new FarseerPhysics.Common.Decomposition.XNode(edge.Q, yNode, FarseerPhysics.Common.Decomposition.Sink.Isink(tList[System.Array.index(3, tList)]));
                var pNode = new FarseerPhysics.Common.Decomposition.XNode(edge.P, FarseerPhysics.Common.Decomposition.Sink.Isink(tList[System.Array.index(0, tList)]), qNode);
                this.Replace(sink, pNode);
            },
            Case2: function (sink, edge, tList) {
                var yNode = new FarseerPhysics.Common.Decomposition.YNode(edge, FarseerPhysics.Common.Decomposition.Sink.Isink(tList[System.Array.index(1, tList)]), FarseerPhysics.Common.Decomposition.Sink.Isink(tList[System.Array.index(2, tList)]));
                var pNode = new FarseerPhysics.Common.Decomposition.XNode(edge.P, FarseerPhysics.Common.Decomposition.Sink.Isink(tList[System.Array.index(0, tList)]), yNode);
                this.Replace(sink, pNode);
            },
            Case3: function (sink, edge, tList) {
                var yNode = new FarseerPhysics.Common.Decomposition.YNode(edge, FarseerPhysics.Common.Decomposition.Sink.Isink(tList[System.Array.index(0, tList)]), FarseerPhysics.Common.Decomposition.Sink.Isink(tList[System.Array.index(1, tList)]));
                this.Replace(sink, yNode);
            },
            Case4: function (sink, edge, tList) {
                var yNode = new FarseerPhysics.Common.Decomposition.YNode(edge, FarseerPhysics.Common.Decomposition.Sink.Isink(tList[System.Array.index(0, tList)]), FarseerPhysics.Common.Decomposition.Sink.Isink(tList[System.Array.index(1, tList)]));
                var qNode = new FarseerPhysics.Common.Decomposition.XNode(edge.Q, yNode, FarseerPhysics.Common.Decomposition.Sink.Isink(tList[System.Array.index(2, tList)]));
                this.Replace(sink, qNode);
            }
        }
    });

    /**
     * Convex decomposition algorithm based on Raimund Seidel's paper "A simple and fast incremental randomized
     algorithm for computing trapezoidal decompositions and for triangulating polygons"
     See also: "Computational Geometry", 3rd edition, by Mark de Berg et al, Chapter 6.2
               "Computational Geometry in C", 2nd edition, by Joseph O'Rourke
     *
     * @static
     * @abstract
     * @public
     * @class FarseerPhysics.Common.Decomposition.SeidelDecomposer
     */
    Bridge.define("FarseerPhysics.Common.Decomposition.SeidelDecomposer", {
        statics: {
            methods: {
                /**
                 * Decompose the polygon into several smaller non-concave polygon.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.Decomposition.SeidelDecomposer
                 * @memberof FarseerPhysics.Common.Decomposition.SeidelDecomposer
                 * @param   {FarseerPhysics.Common.Vertices}       vertices    The polygon to decompose.
                 * @param   {number}                               sheer       The sheer to use. If you get bad results, try using a higher value. The default value is 0.001
                 * @return  {System.Collections.Generic.List$1}                A list of triangles
                 */
                ConvexPartition: function (vertices, sheer) {
                    var $t, $t1, $t2;
                    var compatList = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Point)).$ctor2(vertices.Count);

                    $t = Bridge.getEnumerator(vertices);
                    try {
                        while ($t.moveNext()) {
                            var vertex = $t.Current.$clone();
                            compatList.add(new FarseerPhysics.Common.Decomposition.Point(vertex.X, vertex.Y));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    var t = new FarseerPhysics.Common.Decomposition.Triangulator(compatList, sheer);

                    var list = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();

                    $t1 = Bridge.getEnumerator(t.Triangles);
                    try {
                        while ($t1.moveNext()) {
                            var triangle = $t1.Current;
                            var verts = new FarseerPhysics.Common.Vertices.$ctor3(triangle.Count);

                            $t2 = Bridge.getEnumerator(triangle);
                            try {
                                while ($t2.moveNext()) {
                                    var point = $t2.Current;
                                    verts.add(new Microsoft.Xna.Framework.Vector2.$ctor2(point.X, point.Y));
                                }
                            } finally {
                                if (Bridge.is($t2, System.IDisposable)) {
                                    $t2.System$IDisposable$Dispose();
                                }
                            }
                            list.add(verts);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    return list;
                },
                /**
                 * Decompose the polygon into several smaller non-concave polygon.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.Decomposition.SeidelDecomposer
                 * @memberof FarseerPhysics.Common.Decomposition.SeidelDecomposer
                 * @param   {FarseerPhysics.Common.Vertices}       vertices    The polygon to decompose.
                 * @param   {number}                               sheer       The sheer to use. If you get bad results, try using a higher value. The default value is 0.001
                 * @return  {System.Collections.Generic.List$1}                A list of trapezoids
                 */
                ConvexPartitionTrapezoid: function (vertices, sheer) {
                    var $t, $t1, $t2;
                    var compatList = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Point)).$ctor2(vertices.Count);

                    $t = Bridge.getEnumerator(vertices);
                    try {
                        while ($t.moveNext()) {
                            var vertex = $t.Current.$clone();
                            compatList.add(new FarseerPhysics.Common.Decomposition.Point(vertex.X, vertex.Y));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    var t = new FarseerPhysics.Common.Decomposition.Triangulator(compatList, sheer);

                    var list = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();

                    $t1 = Bridge.getEnumerator(t.Trapezoids);
                    try {
                        while ($t1.moveNext()) {
                            var trapezoid = $t1.Current;
                            var verts = new FarseerPhysics.Common.Vertices.ctor();

                            var points = trapezoid.Vertices();
                            $t2 = Bridge.getEnumerator(points);
                            try {
                                while ($t2.moveNext()) {
                                    var point = $t2.Current;
                                    verts.add(new Microsoft.Xna.Framework.Vector2.$ctor2(point.X, point.Y));
                                }
                            } finally {
                                if (Bridge.is($t2, System.IDisposable)) {
                                    $t2.System$IDisposable$Dispose();
                                }
                            }
                            list.add(verts);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    return list;
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.Trapezoid", {
        fields: {
            Bottom: null,
            Inside: false,
            LeftPoint: null,
            LowerLeft: null,
            LowerRight: null,
            RightPoint: null,
            Sink: null,
            Top: null,
            UpperLeft: null,
            UpperRight: null
        },
        ctors: {
            ctor: function (leftPoint, rightPoint, top, bottom) {
                this.$initialize();
                this.LeftPoint = leftPoint;
                this.RightPoint = rightPoint;
                this.Top = top;
                this.Bottom = bottom;
                this.UpperLeft = null;
                this.UpperRight = null;
                this.LowerLeft = null;
                this.LowerRight = null;
                this.Inside = true;
                this.Sink = null;
            }
        },
        methods: {
            UpdateLeft: function (ul, ll) {
                this.UpperLeft = ul;
                if (ul != null) {
                    ul.UpperRight = this;
                }
                this.LowerLeft = ll;
                if (ll != null) {
                    ll.LowerRight = this;
                }
            },
            UpdateRight: function (ur, lr) {
                this.UpperRight = ur;
                if (ur != null) {
                    ur.UpperLeft = this;
                }
                this.LowerRight = lr;
                if (lr != null) {
                    lr.LowerLeft = this;
                }
            },
            UpdateLeftRight: function (ul, ll, ur, lr) {
                this.UpperLeft = ul;
                if (ul != null) {
                    ul.UpperRight = this;
                }
                this.LowerLeft = ll;
                if (ll != null) {
                    ll.LowerRight = this;
                }
                this.UpperRight = ur;
                if (ur != null) {
                    ur.UpperLeft = this;
                }
                this.LowerRight = lr;
                if (lr != null) {
                    lr.LowerLeft = this;
                }
            },
            TrimNeighbors: function () {
                if (this.Inside) {
                    this.Inside = false;
                    if (this.UpperLeft != null) {
                        this.UpperLeft.TrimNeighbors();
                    }
                    if (this.LowerLeft != null) {
                        this.LowerLeft.TrimNeighbors();
                    }
                    if (this.UpperRight != null) {
                        this.UpperRight.TrimNeighbors();
                    }
                    if (this.LowerRight != null) {
                        this.LowerRight.TrimNeighbors();
                    }
                }
            },
            Contains: function (point) {
                return (point.X > this.LeftPoint.X && point.X < this.RightPoint.X && this.Top.IsAbove(point) && this.Bottom.IsBelow(point));
            },
            Vertices: function () {
                var verts = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Point)).$ctor2(4);
                verts.add(this.LineIntersect(this.Top, this.LeftPoint.X));
                verts.add(this.LineIntersect(this.Bottom, this.LeftPoint.X));
                verts.add(this.LineIntersect(this.Bottom, this.RightPoint.X));
                verts.add(this.LineIntersect(this.Top, this.RightPoint.X));
                return verts;
            },
            LineIntersect: function (edge, x) {
                var y = edge.Slope * x + edge.B;
                return new FarseerPhysics.Common.Decomposition.Point(x, y);
            },
            AddPoints: function () {
                if (!Bridge.referenceEquals(this.LeftPoint, this.Bottom.P)) {
                    this.Bottom.AddMpoint(this.LeftPoint);
                }
                if (!Bridge.referenceEquals(this.RightPoint, this.Bottom.Q)) {
                    this.Bottom.AddMpoint(this.RightPoint);
                }
                if (!Bridge.referenceEquals(this.LeftPoint, this.Top.P)) {
                    this.Top.AddMpoint(this.LeftPoint);
                }
                if (!Bridge.referenceEquals(this.RightPoint, this.Top.Q)) {
                    this.Top.AddMpoint(this.RightPoint);
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.TrapezoidalMap", {
        fields: {
            Map: null,
            _bCross: null,
            _cross: null,
            _margin: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Map = new (System.Collections.Generic.HashSet$1(FarseerPhysics.Common.Decomposition.Trapezoid)).ctor();
                this._margin = 50.0;
                this._bCross = null;
                this._cross = null;
            }
        },
        methods: {
            Clear: function () {
                this._bCross = null;
                this._cross = null;
            },
            Case1: function (t, e) {
                var trapezoids = System.Array.init(4, null, FarseerPhysics.Common.Decomposition.Trapezoid);
                trapezoids[System.Array.index(0, trapezoids)] = new FarseerPhysics.Common.Decomposition.Trapezoid(t.LeftPoint, e.P, t.Top, t.Bottom);
                trapezoids[System.Array.index(1, trapezoids)] = new FarseerPhysics.Common.Decomposition.Trapezoid(e.P, e.Q, t.Top, e);
                trapezoids[System.Array.index(2, trapezoids)] = new FarseerPhysics.Common.Decomposition.Trapezoid(e.P, e.Q, e, t.Bottom);
                trapezoids[System.Array.index(3, trapezoids)] = new FarseerPhysics.Common.Decomposition.Trapezoid(e.Q, t.RightPoint, t.Top, t.Bottom);

                trapezoids[System.Array.index(0, trapezoids)].UpdateLeft(t.UpperLeft, t.LowerLeft);
                trapezoids[System.Array.index(1, trapezoids)].UpdateLeftRight(trapezoids[System.Array.index(0, trapezoids)], null, trapezoids[System.Array.index(3, trapezoids)], null);
                trapezoids[System.Array.index(2, trapezoids)].UpdateLeftRight(null, trapezoids[System.Array.index(0, trapezoids)], null, trapezoids[System.Array.index(3, trapezoids)]);
                trapezoids[System.Array.index(3, trapezoids)].UpdateRight(t.UpperRight, t.LowerRight);

                return trapezoids;
            },
            Case2: function (t, e) {
                var rp;
                if (e.Q.X === t.RightPoint.X) {
                    rp = e.Q;
                } else {
                    rp = t.RightPoint;
                }

                var trapezoids = System.Array.init(3, null, FarseerPhysics.Common.Decomposition.Trapezoid);
                trapezoids[System.Array.index(0, trapezoids)] = new FarseerPhysics.Common.Decomposition.Trapezoid(t.LeftPoint, e.P, t.Top, t.Bottom);
                trapezoids[System.Array.index(1, trapezoids)] = new FarseerPhysics.Common.Decomposition.Trapezoid(e.P, rp, t.Top, e);
                trapezoids[System.Array.index(2, trapezoids)] = new FarseerPhysics.Common.Decomposition.Trapezoid(e.P, rp, e, t.Bottom);

                trapezoids[System.Array.index(0, trapezoids)].UpdateLeft(t.UpperLeft, t.LowerLeft);
                trapezoids[System.Array.index(1, trapezoids)].UpdateLeftRight(trapezoids[System.Array.index(0, trapezoids)], null, t.UpperRight, null);
                trapezoids[System.Array.index(2, trapezoids)].UpdateLeftRight(null, trapezoids[System.Array.index(0, trapezoids)], null, t.LowerRight);

                this._bCross = t.Bottom;
                this._cross = t.Top;

                e.Above = trapezoids[System.Array.index(1, trapezoids)];
                e.Below = trapezoids[System.Array.index(2, trapezoids)];

                return trapezoids;
            },
            Case3: function (t, e) {
                var lp;
                if (e.P.X === t.LeftPoint.X) {
                    lp = e.P;
                } else {
                    lp = t.LeftPoint;
                }

                var rp;
                if (e.Q.X === t.RightPoint.X) {
                    rp = e.Q;
                } else {
                    rp = t.RightPoint;
                }

                var trapezoids = System.Array.init(2, null, FarseerPhysics.Common.Decomposition.Trapezoid);

                if (Bridge.referenceEquals(this._cross, t.Top)) {
                    trapezoids[System.Array.index(0, trapezoids)] = t.UpperLeft;
                    trapezoids[System.Array.index(0, trapezoids)].UpdateRight(t.UpperRight, null);
                    trapezoids[System.Array.index(0, trapezoids)].RightPoint = rp;
                } else {
                    trapezoids[System.Array.index(0, trapezoids)] = new FarseerPhysics.Common.Decomposition.Trapezoid(lp, rp, t.Top, e);
                    trapezoids[System.Array.index(0, trapezoids)].UpdateLeftRight(t.UpperLeft, e.Above, t.UpperRight, null);
                }

                if (Bridge.referenceEquals(this._bCross, t.Bottom)) {
                    trapezoids[System.Array.index(1, trapezoids)] = t.LowerLeft;
                    trapezoids[System.Array.index(1, trapezoids)].UpdateRight(null, t.LowerRight);
                    trapezoids[System.Array.index(1, trapezoids)].RightPoint = rp;
                } else {
                    trapezoids[System.Array.index(1, trapezoids)] = new FarseerPhysics.Common.Decomposition.Trapezoid(lp, rp, e, t.Bottom);
                    trapezoids[System.Array.index(1, trapezoids)].UpdateLeftRight(e.Below, t.LowerLeft, null, t.LowerRight);
                }

                this._bCross = t.Bottom;
                this._cross = t.Top;

                e.Above = trapezoids[System.Array.index(0, trapezoids)];
                e.Below = trapezoids[System.Array.index(1, trapezoids)];

                return trapezoids;
            },
            Case4: function (t, e) {
                var lp;
                if (e.P.X === t.LeftPoint.X) {
                    lp = e.P;
                } else {
                    lp = t.LeftPoint;
                }

                var trapezoids = System.Array.init(3, null, FarseerPhysics.Common.Decomposition.Trapezoid);

                if (Bridge.referenceEquals(this._cross, t.Top)) {
                    trapezoids[System.Array.index(0, trapezoids)] = t.UpperLeft;
                    trapezoids[System.Array.index(0, trapezoids)].RightPoint = e.Q;
                } else {
                    trapezoids[System.Array.index(0, trapezoids)] = new FarseerPhysics.Common.Decomposition.Trapezoid(lp, e.Q, t.Top, e);
                    trapezoids[System.Array.index(0, trapezoids)].UpdateLeft(t.UpperLeft, e.Above);
                }

                if (Bridge.referenceEquals(this._bCross, t.Bottom)) {
                    trapezoids[System.Array.index(1, trapezoids)] = t.LowerLeft;
                    trapezoids[System.Array.index(1, trapezoids)].RightPoint = e.Q;
                } else {
                    trapezoids[System.Array.index(1, trapezoids)] = new FarseerPhysics.Common.Decomposition.Trapezoid(lp, e.Q, e, t.Bottom);
                    trapezoids[System.Array.index(1, trapezoids)].UpdateLeft(e.Below, t.LowerLeft);
                }

                trapezoids[System.Array.index(2, trapezoids)] = new FarseerPhysics.Common.Decomposition.Trapezoid(e.Q, t.RightPoint, t.Top, t.Bottom);
                trapezoids[System.Array.index(2, trapezoids)].UpdateLeftRight(trapezoids[System.Array.index(0, trapezoids)], trapezoids[System.Array.index(1, trapezoids)], t.UpperRight, t.LowerRight);

                return trapezoids;
            },
            BoundingBox: function (edges) {
                var $t;
                var max = FarseerPhysics.Common.Decomposition.Point.op_Addition$1(edges.getItem(0).P, this._margin);
                var min = FarseerPhysics.Common.Decomposition.Point.op_Subtraction$1(edges.getItem(0).Q, this._margin);

                $t = Bridge.getEnumerator(edges);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        if (e.P.X > max.X) {
                            max = new FarseerPhysics.Common.Decomposition.Point(e.P.X + this._margin, max.Y);
                        }
                        if (e.P.Y > max.Y) {
                            max = new FarseerPhysics.Common.Decomposition.Point(max.X, e.P.Y + this._margin);
                        }
                        if (e.Q.X > max.X) {
                            max = new FarseerPhysics.Common.Decomposition.Point(e.Q.X + this._margin, max.Y);
                        }
                        if (e.Q.Y > max.Y) {
                            max = new FarseerPhysics.Common.Decomposition.Point(max.X, e.Q.Y + this._margin);
                        }
                        if (e.P.X < min.X) {
                            min = new FarseerPhysics.Common.Decomposition.Point(e.P.X - this._margin, min.Y);
                        }
                        if (e.P.Y < min.Y) {
                            min = new FarseerPhysics.Common.Decomposition.Point(min.X, e.P.Y - this._margin);
                        }
                        if (e.Q.X < min.X) {
                            min = new FarseerPhysics.Common.Decomposition.Point(e.Q.X - this._margin, min.Y);
                        }
                        if (e.Q.Y < min.Y) {
                            min = new FarseerPhysics.Common.Decomposition.Point(min.X, e.Q.Y - this._margin);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                var top = new FarseerPhysics.Common.Decomposition.Edge(new FarseerPhysics.Common.Decomposition.Point(min.X, max.Y), new FarseerPhysics.Common.Decomposition.Point(max.X, max.Y));
                var bottom = new FarseerPhysics.Common.Decomposition.Edge(new FarseerPhysics.Common.Decomposition.Point(min.X, min.Y), new FarseerPhysics.Common.Decomposition.Point(max.X, min.Y));
                var left = bottom.P;
                var right = top.Q;

                return new FarseerPhysics.Common.Decomposition.Trapezoid(left, right, top, bottom);
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.Triangle", {
        fields: {
            X: null,
            Y: null
        },
        ctors: {
            $ctor1: function (x1, y1, x2, y2, x3, y3) {
                this.$initialize();
                this.X = System.Array.init(3, 0, System.Single);
                this.Y = System.Array.init(3, 0, System.Single);
                var dx1 = x2 - x1;
                var dx2 = x3 - x1;
                var dy1 = y2 - y1;
                var dy2 = y3 - y1;
                var cross = dx1 * dy2 - dx2 * dy1;
                var ccw = (cross > 0);
                if (ccw) {
                    this.X[System.Array.index(0, this.X)] = x1;
                    this.X[System.Array.index(1, this.X)] = x2;
                    this.X[System.Array.index(2, this.X)] = x3;
                    this.Y[System.Array.index(0, this.Y)] = y1;
                    this.Y[System.Array.index(1, this.Y)] = y2;
                    this.Y[System.Array.index(2, this.Y)] = y3;
                } else {
                    this.X[System.Array.index(0, this.X)] = x1;
                    this.X[System.Array.index(1, this.X)] = x3;
                    this.X[System.Array.index(2, this.X)] = x2;
                    this.Y[System.Array.index(0, this.Y)] = y1;
                    this.Y[System.Array.index(1, this.Y)] = y3;
                    this.Y[System.Array.index(2, this.Y)] = y2;
                }
            },
            ctor: function (t) {
                this.$initialize();
                this.X = System.Array.init(3, 0, System.Single);
                this.Y = System.Array.init(3, 0, System.Single);

                this.X[System.Array.index(0, this.X)] = t.X[System.Array.index(0, t.X)];
                this.X[System.Array.index(1, this.X)] = t.X[System.Array.index(1, t.X)];
                this.X[System.Array.index(2, this.X)] = t.X[System.Array.index(2, t.X)];
                this.Y[System.Array.index(0, this.Y)] = t.Y[System.Array.index(0, t.Y)];
                this.Y[System.Array.index(1, this.Y)] = t.Y[System.Array.index(1, t.Y)];
                this.Y[System.Array.index(2, this.Y)] = t.Y[System.Array.index(2, t.Y)];
            }
        },
        methods: {
            IsInside: function (x, y) {
                if (x < this.X[System.Array.index(0, this.X)] && x < this.X[System.Array.index(1, this.X)] && x < this.X[System.Array.index(2, this.X)]) {
                    return false;
                }
                if (x > this.X[System.Array.index(0, this.X)] && x > this.X[System.Array.index(1, this.X)] && x > this.X[System.Array.index(2, this.X)]) {
                    return false;
                }
                if (y < this.Y[System.Array.index(0, this.Y)] && y < this.Y[System.Array.index(1, this.Y)] && y < this.Y[System.Array.index(2, this.Y)]) {
                    return false;
                }
                if (y > this.Y[System.Array.index(0, this.Y)] && y > this.Y[System.Array.index(1, this.Y)] && y > this.Y[System.Array.index(2, this.Y)]) {
                    return false;
                }

                var vx2 = x - this.X[System.Array.index(0, this.X)];
                var vy2 = y - this.Y[System.Array.index(0, this.Y)];
                var vx1 = this.X[System.Array.index(1, this.X)] - this.X[System.Array.index(0, this.X)];
                var vy1 = this.Y[System.Array.index(1, this.Y)] - this.Y[System.Array.index(0, this.Y)];
                var vx0 = this.X[System.Array.index(2, this.X)] - this.X[System.Array.index(0, this.X)];
                var vy0 = this.Y[System.Array.index(2, this.Y)] - this.Y[System.Array.index(0, this.Y)];

                var dot00 = vx0 * vx0 + vy0 * vy0;
                var dot01 = vx0 * vx1 + vy0 * vy1;
                var dot02 = vx0 * vx2 + vy0 * vy2;
                var dot11 = vx1 * vx1 + vy1 * vy1;
                var dot12 = vx1 * vx2 + vy1 * vy2;
                var invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
                var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
                var v = (dot00 * dot12 - dot01 * dot02) * invDenom;

                return ((u > 0) && (v > 0) && (u + v < 1));
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.Triangulator", {
        statics: {
            methods: {
                Shuffle: function (T, list) {
                    var rng = new System.Random.ctor();
                    var n = System.Array.getCount(list, T);
                    while (n > 1) {
                        n = (n - 1) | 0;
                        var k = rng.Next$1(((n + 1) | 0));
                        var value = System.Array.getItem(list, k, T);
                        System.Array.setItem(list, k, System.Array.getItem(list, n, T), T);
                        System.Array.setItem(list, n, value, T);
                    }
                }
            }
        },
        fields: {
            Trapezoids: null,
            Triangles: null,
            _boundingBox: null,
            _edgeList: null,
            _queryGraph: null,
            _sheer: 0,
            _trapezoidalMap: null,
            _xMonoPoly: null
        },
        ctors: {
            init: function () {
                this._sheer = 0.001;
            },
            ctor: function (polyLine, sheer) {
                this.$initialize();
                this._sheer = sheer;
                this.Triangles = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Point))).ctor();
                this.Trapezoids = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Trapezoid)).ctor();
                this._xMonoPoly = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.MonotoneMountain)).ctor();
                this._edgeList = this.InitEdges(polyLine);
                this._trapezoidalMap = new FarseerPhysics.Common.Decomposition.TrapezoidalMap();
                this._boundingBox = this._trapezoidalMap.BoundingBox(this._edgeList);
                this._queryGraph = new FarseerPhysics.Common.Decomposition.QueryGraph(FarseerPhysics.Common.Decomposition.Sink.Isink(this._boundingBox));

                this.Process();
            }
        },
        methods: {
            Process: function () {
                var $t, $t1, $t2, $t3, $t4;
                $t = Bridge.getEnumerator(this._edgeList);
                try {
                    while ($t.moveNext()) {
                        var edge = $t.Current;
                        var traps = this._queryGraph.FollowEdge(edge);

                        $t1 = Bridge.getEnumerator(traps);
                        try {
                            while ($t1.moveNext()) {
                                var t = $t1.Current;
                                this._trapezoidalMap.Map.remove(t);

                                var cp = t.Contains(edge.P);
                                var cq = t.Contains(edge.Q);
                                var tList;

                                if (cp && cq) {
                                    tList = this._trapezoidalMap.Case1(t, edge);
                                    this._queryGraph.Case1(t.Sink, edge, tList);
                                } else if (cp && !cq) {
                                    tList = this._trapezoidalMap.Case2(t, edge);
                                    this._queryGraph.Case2(t.Sink, edge, tList);
                                } else if (!cp && !cq) {
                                    tList = this._trapezoidalMap.Case3(t, edge);
                                    this._queryGraph.Case3(t.Sink, edge, tList);
                                } else {
                                    tList = this._trapezoidalMap.Case4(t, edge);
                                    this._queryGraph.Case4(t.Sink, edge, tList);
                                }
                                $t2 = Bridge.getEnumerator(tList);
                                try {
                                    while ($t2.moveNext()) {
                                        var y = $t2.Current;
                                        this._trapezoidalMap.Map.add(y);
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$Dispose();
                                    }
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }this._trapezoidalMap.Clear();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                $t3 = Bridge.getEnumerator(this._trapezoidalMap.Map);
                try {
                    while ($t3.moveNext()) {
                        var t1 = $t3.Current;
                        this.MarkOutside(t1);
                    }
                } finally {
                    if (Bridge.is($t3, System.IDisposable)) {
                        $t3.System$IDisposable$Dispose();
                    }
                }
                $t4 = Bridge.getEnumerator(this._trapezoidalMap.Map);
                try {
                    while ($t4.moveNext()) {
                        var t2 = $t4.Current;
                        if (t2.Inside) {
                            this.Trapezoids.add(t2);
                            t2.AddPoints();
                        }
                    }
                } finally {
                    if (Bridge.is($t4, System.IDisposable)) {
                        $t4.System$IDisposable$Dispose();
                    }
                }
                this.CreateMountains();
            },
            CreateMountains: function () {
                var $t, $t1, $t2;
                $t = Bridge.getEnumerator(this._edgeList);
                try {
                    while ($t.moveNext()) {
                        var edge = $t.Current;
                        if (edge.MPoints.Count > 2) {
                            var mountain = new FarseerPhysics.Common.Decomposition.MonotoneMountain();



                            var points = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Point)).$ctor1(edge.MPoints);
                            points.Sort$2(function (p1, p2) {
                                return Bridge.compare(p1.X, p2.X);
                            });

                            $t1 = Bridge.getEnumerator(points);
                            try {
                                while ($t1.moveNext()) {
                                    var p = $t1.Current;
                                    mountain.Add(p);
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }
                            mountain.Process();

                            $t2 = Bridge.getEnumerator(mountain.Triangles);
                            try {
                                while ($t2.moveNext()) {
                                    var t = $t2.Current;
                                    this.Triangles.add(t);
                                }
                            } finally {
                                if (Bridge.is($t2, System.IDisposable)) {
                                    $t2.System$IDisposable$Dispose();
                                }
                            }
                            this._xMonoPoly.add(mountain);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            MarkOutside: function (t) {
                if (Bridge.referenceEquals(t.Top, this._boundingBox.Top) || Bridge.referenceEquals(t.Bottom, this._boundingBox.Bottom)) {
                    t.TrimNeighbors();
                }
            },
            InitEdges: function (points) {
                var edges = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Edge)).ctor();

                for (var i = 0; i < ((points.Count - 1) | 0); i = (i + 1) | 0) {
                    edges.add(new FarseerPhysics.Common.Decomposition.Edge(points.getItem(i), points.getItem(((i + 1) | 0))));
                }
                edges.add(new FarseerPhysics.Common.Decomposition.Edge(points.getItem(0), points.getItem(((points.Count - 1) | 0))));
                return this.OrderSegments(edges);
            },
            OrderSegments: function (edgeInput) {
                var $t;
                var edges = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Decomposition.Edge)).ctor();

                $t = Bridge.getEnumerator(edgeInput);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        var p = this.ShearTransform(e.P);
                        var q = this.ShearTransform(e.Q);

                        if (p.X > q.X) {
                            edges.add(new FarseerPhysics.Common.Decomposition.Edge(q, p));
                        } else if (p.X < q.X) {
                            edges.add(new FarseerPhysics.Common.Decomposition.Edge(p, q));
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                FarseerPhysics.Common.Decomposition.Triangulator.Shuffle(Bridge.global.FarseerPhysics.Common.Decomposition.Edge, edges);
                return edges;
            },
            ShearTransform: function (point) {
                return new FarseerPhysics.Common.Decomposition.Point(point.X + this._sheer * point.Y, point.Y);
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Vertices", {
        inherits: [System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector2)],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector2).ctor.call(this);
            },
            $ctor3: function (capacity) {
                this.$initialize();
                System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector2).ctor.call(this);
                this.Capacity = capacity;
            },
            $ctor1: function (vector2) {
                this.$initialize();
                System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector2).ctor.call(this);
                for (var i = 0; i < vector2.length; i = (i + 1) | 0) {
                    this.add(vector2[System.Array.index(i, vector2)].$clone());
                }
            },
            $ctor2: function (vertices) {
                this.$initialize();
                System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector2).ctor.call(this);
                for (var i = 0; i < System.Array.getCount(vertices, Microsoft.Xna.Framework.Vector2); i = (i + 1) | 0) {
                    this.add(System.Array.getItem(vertices, i, Microsoft.Xna.Framework.Vector2).$clone());
                }
            }
        },
        methods: {
            /**
             * Nexts the index.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @param   {number}    index    The index.
             * @return  {number}
             */
            NextIndex: function (index) {
                if (index === ((this.Count - 1) | 0)) {
                    return 0;
                }
                return ((index + 1) | 0);
            },
            NextVertex: function (index) {
                return this.getItem(this.NextIndex(index)).$clone();
            },
            /**
             * Gets the previous index.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @param   {number}    index    The index.
             * @return  {number}
             */
            PreviousIndex: function (index) {
                if (index === 0) {
                    return ((this.Count - 1) | 0);
                }
                return ((index - 1) | 0);
            },
            PreviousVertex: function (index) {
                return this.getItem(this.PreviousIndex(index)).$clone();
            },
            /**
             * Gets the signed area.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @return  {number}
             */
            GetSignedArea: function () {
                var i;
                var area = 0;

                for (i = 0; i < this.Count; i = (i + 1) | 0) {
                    var j = (((i + 1) | 0)) % this.Count;
                    area += this.getItem(i).$clone().X * this.getItem(j).$clone().Y;
                    area -= this.getItem(i).$clone().Y * this.getItem(j).$clone().X;
                }
                area /= 2.0;
                return area;
            },
            /**
             * Gets the area.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @return  {number}
             */
            GetArea: function () {
                var i;
                var area = 0;

                for (i = 0; i < this.Count; i = (i + 1) | 0) {
                    var j = (((i + 1) | 0)) % this.Count;
                    area += this.getItem(i).$clone().X * this.getItem(j).$clone().Y;
                    area -= this.getItem(i).$clone().Y * this.getItem(j).$clone().X;
                }
                area /= 2.0;
                return (area < 0 ? -area : area);
            },
            /**
             * Gets the centroid.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @return  {Microsoft.Xna.Framework.Vector2}
             */
            GetCentroid: function () {

                var c = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                var area = 0.0;

                var inv3 = 0.333333343;
                var pRef = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    var p1 = pRef.$clone();
                    var p2 = this.getItem(i).$clone();
                    var p3 = ((i + 1) | 0) < this.Count ? this.getItem(((i + 1) | 0)).$clone() : this.getItem(0).$clone();

                    var e1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.$clone(), p1.$clone());
                    var e2 = Microsoft.Xna.Framework.Vector2.op_Subtraction(p3.$clone(), p1.$clone());

                    var D = FarseerPhysics.Common.MathUtils.Cross$2(e1.$clone(), e2.$clone());

                    var triangleArea = 0.5 * D;
                    area += triangleArea;

                    c = Microsoft.Xna.Framework.Vector2.op_Addition(c.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(triangleArea * inv3, (Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Addition(p1.$clone(), p2.$clone()), p3.$clone()))));
                }

                c = Microsoft.Xna.Framework.Vector2.op_Multiply$1(c.$clone(), 1.0 / area);
                return c.$clone();
            },
            /**
             * Gets the radius based on area.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @return  {number}
             */
            GetRadius: function () {
                var area = this.GetSignedArea();

                var radiusSqrd = area / Microsoft.Xna.Framework.MathHelper.Pi;
                if (radiusSqrd < 0) {
                    radiusSqrd *= -1;
                }

                return Math.sqrt(radiusSqrd);
            },
            /**
             * Returns an AABB for vertex.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @return  {FarseerPhysics.Collision.AABB}
             */
            GetCollisionBox: function () {
                var aabb = new FarseerPhysics.Collision.AABB();
                var lowerBound = new Microsoft.Xna.Framework.Vector2.$ctor2(3.40282347E+38, 3.40282347E+38);
                var upperBound = new Microsoft.Xna.Framework.Vector2.$ctor2(-3.40282347E+38, -3.40282347E+38);

                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    if (this.getItem(i).$clone().X < lowerBound.X) {
                        lowerBound.X = this.getItem(i).$clone().X;
                    }
                    if (this.getItem(i).$clone().X > upperBound.X) {
                        upperBound.X = this.getItem(i).$clone().X;
                    }

                    if (this.getItem(i).$clone().Y < lowerBound.Y) {
                        lowerBound.Y = this.getItem(i).$clone().Y;
                    }
                    if (this.getItem(i).$clone().Y > upperBound.Y) {
                        upperBound.Y = this.getItem(i).$clone().Y;
                    }
                }

                aabb.LowerBound = lowerBound.$clone();
                aabb.UpperBound = upperBound.$clone();

                return aabb.$clone();
            },
            Translate: function (vector) {
                vector = {v:vector};
                this.Translate$1(vector);
            },
            /**
             * Translates the vertices with the specified vector.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @param   {Microsoft.Xna.Framework.Vector2}    vector    The vector.
             * @return  {void}
             */
            Translate$1: function (vector) {
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    this.setItem(i, Microsoft.Xna.Framework.Vector2.Add(this.getItem(i).$clone(), vector.v.$clone()));
                }
            },
            /**
             * Scales the vertices with the specified vector.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @param   {Microsoft.Xna.Framework.Vector2}    value    The Value.
             * @return  {void}
             */
            Scale: function (value) {
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    this.setItem(i, Microsoft.Xna.Framework.Vector2.Multiply(this.getItem(i).$clone(), value.v.$clone()));
                }
            },
            /**
             * Rotate the vertices with the defined value in radians.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @param   {number}    value    The amount to rotate by in radians.
             * @return  {void}
             */
            Rotate: function (value) {
                var rotationMatrix = { v : new Microsoft.Xna.Framework.Matrix() };
                Microsoft.Xna.Framework.Matrix.CreateRotationZ$1(value, rotationMatrix);

                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    this.setItem(i, Microsoft.Xna.Framework.Vector2.Transform(this.getItem(i).$clone(), rotationMatrix.v.$clone()));
                }
            },
            /**
             * Assuming the polygon is simple; determines whether the polygon is convex.
             NOTE: It will also return false if the input contains colinear edges.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @return  {boolean}        <pre><code>true</code></pre> if it is convex; otherwise, <pre><code>false</code></pre>.
             */
            IsConvex: function () {
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    var i1 = i;
                    var i2 = ((i + 1) | 0) < this.Count ? ((i + 1) | 0) : 0;
                    var edge = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.getItem(i2).$clone(), this.getItem(i1).$clone());

                    for (var j = 0; j < this.Count; j = (j + 1) | 0) {
                        if (j === i1 || j === i2) {
                            continue;
                        }

                        var r = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.getItem(j).$clone(), this.getItem(i1).$clone());

                        var s = edge.X * r.Y - edge.Y * r.X;

                        if (s <= 0.0) {
                            return false;
                        }
                    }
                }
                return true;
            },
            IsCounterClockWise: function () {
                if (this.Count < 3) {
                    return true;
                }

                return (this.GetSignedArea() > 0.0);
            },
            /**
             * Forces counter clock wise order.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @return  {void}
             */
            ForceCounterClockWise: function () {
                if (!this.IsCounterClockWise()) {
                    this.Reverse();
                }
            },
            /**
             * Check for edge crossings
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @return  {boolean}
             */
            IsSimple: function () {
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    var iplus = (((i + 1) | 0) > ((this.Count - 1) | 0)) ? 0 : ((i + 1) | 0);
                    var a1 = new Microsoft.Xna.Framework.Vector2.$ctor2(this.getItem(i).$clone().X, this.getItem(i).$clone().Y);
                    var a2 = new Microsoft.Xna.Framework.Vector2.$ctor2(this.getItem(iplus).$clone().X, this.getItem(iplus).$clone().Y);
                    for (var j = (i + 1) | 0; j < this.Count; j = (j + 1) | 0) {
                        var jplus = (((j + 1) | 0) > ((this.Count - 1) | 0)) ? 0 : ((j + 1) | 0);
                        var b1 = new Microsoft.Xna.Framework.Vector2.$ctor2(this.getItem(j).$clone().X, this.getItem(j).$clone().Y);
                        var b2 = new Microsoft.Xna.Framework.Vector2.$ctor2(this.getItem(jplus).$clone().X, this.getItem(jplus).$clone().Y);

                        var temp = { v : new Microsoft.Xna.Framework.Vector2() };

                        if (FarseerPhysics.Common.LineTools.LineIntersect2(a1.$clone(), a2.$clone(), b1.$clone(), b2.$clone(), temp)) {
                            return false;
                        }
                    }
                }
                return true;
            },
            IsSimple2: function () {
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    if (i < ((this.Count - 1) | 0)) {
                        for (var h = (i + 1) | 0; h < this.Count; h = (h + 1) | 0) {
                            if (Microsoft.Xna.Framework.Vector2.op_Equality(this.getItem(i).$clone(), this.getItem(h).$clone())) {
                                return true;
                            }
                        }
                    }

                    var j = (((i + 1) | 0)) % this.Count;
                    var iToj = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.getItem(j).$clone(), this.getItem(i).$clone());
                    var iTojNormal = new Microsoft.Xna.Framework.Vector2.$ctor2(iToj.Y, -iToj.X);

                    var startK = (((j + 1) | 0)) % this.Count;
                    var endK = (((((i - 1) | 0) + this.Count) | 0)) % this.Count;
                    endK = (endK + (startK < endK ? 0 : ((startK + 1) | 0))) | 0;
                    var k = startK;
                    var iTok = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.getItem(k).$clone(), this.getItem(i).$clone());
                    var onLeftSide = Microsoft.Xna.Framework.Vector2.Dot(iTok.$clone(), iTojNormal.$clone()) >= 0;
                    var prevK = this.getItem(k).$clone();
                    k = (k + 1) | 0;
                    for (; k <= endK; k = (k + 1) | 0) {
                        var modK = k % this.Count;
                        iTok = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.getItem(modK).$clone(), this.getItem(i).$clone());
                        if (onLeftSide !== Microsoft.Xna.Framework.Vector2.Dot(iTok.$clone(), iTojNormal.$clone()) >= 0) {
                            var prevKtoK = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.getItem(modK).$clone(), prevK.$clone());
                            var prevKtoKNormal = new Microsoft.Xna.Framework.Vector2.$ctor2(prevKtoK.Y, -prevKtoK.X);
                            if ((Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(this.getItem(i).$clone(), prevK.$clone()), prevKtoKNormal.$clone()) >= 0) !== (Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(this.getItem(j).$clone(), prevK.$clone()), prevKtoKNormal.$clone()) >= 0)) {
                                return true;
                            }
                        }
                        onLeftSide = Microsoft.Xna.Framework.Vector2.Dot(iTok.$clone(), iTojNormal.$clone()) > 0;
                        prevK = this.getItem(modK).$clone();
                    }
                }
                return false;
            },
            /**
             * Checks if polygon is valid for use in Box2d engine.
             Last ditch effort to ensure no invalid polygons are
             added to world geometry.
             Performs a full check, for simplicity, convexity,
             orientation, minimum angle, and volume.  This won't
             be very efficient, and a lot of it is redundant when
             other tools in this section are used.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @return  {boolean}
             */
            CheckPolygon: function () {
                var error = -1;
                if (this.Count < 3 || this.Count > FarseerPhysics.Settings.MaxPolygonVertices) {
                    error = 0;
                }
                if (!this.IsConvex()) {
                    error = 1;
                }
                if (!this.IsSimple()) {
                    error = 2;
                }
                if (this.GetArea() < FarseerPhysics.Settings.Epsilon) {
                    error = 3;
                }

                var normals = System.Array.init(this.Count, function (){
                    return new Microsoft.Xna.Framework.Vector2();
                }, Microsoft.Xna.Framework.Vector2);
                var vertices = new FarseerPhysics.Common.Vertices.$ctor3(this.Count);
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(this.getItem(i).$clone().X, this.getItem(i).$clone().Y));
                    var i1 = i;
                    var i2 = ((i + 1) | 0) < this.Count ? ((i + 1) | 0) : 0;
                    var edge = new Microsoft.Xna.Framework.Vector2.$ctor2(this.getItem(i2).$clone().X - this.getItem(i1).$clone().X, this.getItem(i2).$clone().Y - this.getItem(i1).$clone().Y);
                    normals[System.Array.index(i, normals)] = FarseerPhysics.Common.MathUtils.Cross(edge.$clone(), 1.0);
                    normals[System.Array.index(i, normals)].Normalize();
                }

                for (var i3 = 0; i3 < this.Count; i3 = (i3 + 1) | 0) {
                    var iminus = (i3 === 0) ? ((this.Count - 1) | 0) : ((i3 - 1) | 0);

                    var cross = FarseerPhysics.Common.MathUtils.Cross$2(normals[System.Array.index(iminus, normals)].$clone(), normals[System.Array.index(i3, normals)].$clone());
                    cross = FarseerPhysics.Common.MathUtils.Clamp$2(cross, -1.0, 1.0);
                    var angle = Math.asin(cross);
                    if (angle <= FarseerPhysics.Settings.AngularSlop) {
                        error = 4;
                        break;
                    }

                    for (var j = 0; j < this.Count; j = (j + 1) | 0) {
                        if (j === i3 || j === (((i3 + 1) | 0)) % this.Count) {
                            continue;
                        }
                        var s = Microsoft.Xna.Framework.Vector2.Dot(normals[System.Array.index(i3, normals)].$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(vertices.getItem(j).$clone(), vertices.getItem(i3).$clone()));
                        if (s >= -0.005) {
                            error = 5;
                        }
                    }


                    var centroid = vertices.GetCentroid();
                    var n1 = normals[System.Array.index(iminus, normals)].$clone();
                    var n2 = normals[System.Array.index(i3, normals)].$clone();
                    var v = Microsoft.Xna.Framework.Vector2.op_Subtraction(vertices.getItem(i3).$clone(), centroid.$clone());

                    var d = new Microsoft.Xna.Framework.Vector2.ctor();
                    d.X = Microsoft.Xna.Framework.Vector2.Dot(n1.$clone(), v.$clone());
                    d.Y = Microsoft.Xna.Framework.Vector2.Dot(n2.$clone(), v.$clone());

                    if ((d.X < 0.0) || (d.Y < 0.0)) {
                        error = 6;
                    }
                }

                if (error !== -1) {
                    System.Diagnostics.Debug.WriteLine$2("Found invalid polygon, ");
                    switch (error) {
                        case 0: 
                            System.Diagnostics.Debug.WriteLine$2(System.String.format("must have between 3 and {0} vertices.\n", [Bridge.box(FarseerPhysics.Settings.MaxPolygonVertices, System.Int32)]));
                            break;
                        case 1: 
                            System.Diagnostics.Debug.WriteLine$2("must be convex.\n");
                            break;
                        case 2: 
                            System.Diagnostics.Debug.WriteLine$2("must be simple (cannot intersect itself).\n");
                            break;
                        case 3: 
                            System.Diagnostics.Debug.WriteLine$2("area is too small.\n");
                            break;
                        case 4: 
                            System.Diagnostics.Debug.WriteLine$2("sides are too close to parallel.\n");
                            break;
                        case 5: 
                            System.Diagnostics.Debug.WriteLine$2("polygon is too thin.\n");
                            break;
                        case 6: 
                            System.Diagnostics.Debug.WriteLine$2("core shape generation would move edge past centroid (too thin).\n");
                            break;
                        default: 
                            System.Diagnostics.Debug.WriteLine$2("don't know why.\n");
                            break;
                    }
                }
                return error !== -1;
            },
            /**
             * Trace the edge of a non-simple polygon and return a simple polygon.
             Method:
             Start at vertex with minimum y (pick maximum x one if there are two).
             We aim our "lastDir" vector at (1.0, 0)
             We look at the two rays going off from our start vertex, and follow whichever
             has the smallest angle (in -Pi . Pi) wrt lastDir ("rightest" turn)
             Loop until we hit starting vertex:
             We add our current vertex to the list.
             We check the seg from current vertex to next vertex for intersections
             - if no intersections, follow to next vertex and continue
             - if intersections, pick one with minimum distance
             - if more than one, pick one with "rightest" next point (two possibilities for each)
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @param   {FarseerPhysics.Common.Vertices}    verts    The vertices.
             * @return  {FarseerPhysics.Common.Vertices}
             */
            TraceEdge: function (verts) {
                var $step = 0,
                    $jumpFromFinally, 
                    nodes, 
                    nNodes, 
                    i, 
                    pos, 
                    iplus, 
                    iminus, 
                    dirty, 
                    counter, 
                    i1, 
                    j, 
                    k, 
                    $t, 
                    l, 
                    $t1, 
                    $t2, 
                    $t3, 
                    intersectPt, 
                    crosses, 
                    $t4, 
                    $t5, 
                    connj, 
                    $t6, 
                    connl, 
                    $t7, 
                    $t8, 
                    $t9, 
                    foundDupe, 
                    nActive, 
                    i2, 
                    j1, 
                    diff, 
                    inode, 
                    jnode, 
                    njConn, 
                    k1, 
                    knode, 
                    minY, 
                    maxX, 
                    minYIndex, 
                    i3, 
                    origDir, 
                    resultVecs, 
                    nResultVecs, 
                    currentNode, 
                    startNode, 
                    nextNode, 
                    vertices, 
                    i4, 
                    oldNode, 
                    vertices1, 
                    i5, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,13,15,17,19,20,21,22], $step);
                            switch ($step) {
                                case 0: {
                                    nodes = System.Array.init(Bridge.Int.mul(verts.Count, verts.Count), null, FarseerPhysics.Common.Vertices.PolyNode);
                                    nNodes = 0;

                                    for (i = 0; i < verts.Count; i = (i + 1) | 0) {
                                        pos = new Microsoft.Xna.Framework.Vector2.$ctor2(verts.getItem(i).$clone().X, verts.getItem(i).$clone().Y);
                                        nodes[System.Array.index(i, nodes)].Position = pos.$clone();
                                        nNodes = (nNodes + 1) | 0;
                                        iplus = (i === ((verts.Count - 1) | 0)) ? 0 : ((i + 1) | 0);
                                        iminus = (i === 0) ? ((verts.Count - 1) | 0) : ((i - 1) | 0);
                                        nodes[System.Array.index(i, nodes)].AddConnection(nodes[System.Array.index(iplus, nodes)]);
                                        nodes[System.Array.index(i, nodes)].AddConnection(nodes[System.Array.index(iminus, nodes)]);
                                    }

                                    dirty = true;
                                    counter = 0;
                                    
                                    $step = 1;
                                    continue;
                                }
                                case 1: {
                                    if ( dirty ) {
                                        $step = 2;
                                        continue;
                                    } 
                                    $step = 22;
                                    continue;
                                }
                                case 2: {
                                    dirty = false;
                                    i1 = 0;
                                    $step = 3;
                                    continue;
                                }
                                case 3: {
                                    if ( i1 < nNodes ) {
                                        $step = 4;
                                        continue;
                                    }
                                    $step = 20;
                                    continue;
                                }
                                case 4: {
                                    j = 0;
                                    $step = 5;
                                    continue;
                                }
                                case 5: {
                                    if ( j < nodes[System.Array.index(i1, nodes)].NConnected ) {
                                        $step = 6;
                                        continue;
                                    }
                                    $step = 18;
                                    continue;
                                }
                                case 6: {
                                    k = 0;
                                    $step = 7;
                                    continue;
                                }
                                case 7: {
                                    if ( k < nNodes ) {
                                        $step = 8;
                                        continue;
                                    }
                                    $step = 16;
                                    continue;
                                }
                                case 8: {
                                    if (k === i1 || Bridge.referenceEquals(nodes[System.Array.index(k, nodes)], ($t = nodes[System.Array.index(i1, nodes)].Connected)[System.Array.index(j, $t)])) {
                                        $step = 15;
                                        continue;
                                    }
                                    l = 0;
                                    $step = 9;
                                    continue;
                                }
                                case 9: {
                                    if ( l < nodes[System.Array.index(k, nodes)].NConnected ) {
                                        $step = 10;
                                        continue;
                                    }
                                    $step = 14;
                                    continue;
                                }
                                case 10: {
                                    if (Bridge.referenceEquals(($t1 = nodes[System.Array.index(k, nodes)].Connected)[System.Array.index(l, $t1)], ($t2 = nodes[System.Array.index(i1, nodes)].Connected)[System.Array.index(j, $t2)]) || Bridge.referenceEquals(($t3 = nodes[System.Array.index(k, nodes)].Connected)[System.Array.index(l, $t3)], nodes[System.Array.index(i1, nodes)])) {
                                        $step = 13;
                                        continue;
                                    }

                                    intersectPt = { v : new Microsoft.Xna.Framework.Vector2() };

                                    crosses = FarseerPhysics.Common.LineTools.LineIntersect$1(nodes[System.Array.index(i1, nodes)].Position.$clone(), ($t4 = nodes[System.Array.index(i1, nodes)].Connected)[System.Array.index(j, $t4)].Position.$clone(), nodes[System.Array.index(k, nodes)].Position.$clone(), ($t5 = nodes[System.Array.index(k, nodes)].Connected)[System.Array.index(l, $t5)].Position.$clone(), intersectPt);
                                    if (crosses) {
                                        $step = 11;
                                        continue;
                                    } 
                                    $step = 12;
                                    continue;
                                }
                                case 11: {
                                    dirty = true;
                                    connj = ($t6 = nodes[System.Array.index(i1, nodes)].Connected)[System.Array.index(j, $t6)];
                                    connl = ($t7 = nodes[System.Array.index(k, nodes)].Connected)[System.Array.index(l, $t7)];
                                    ($t8 = nodes[System.Array.index(i1, nodes)].Connected)[System.Array.index(j, $t8)].RemoveConnection(nodes[System.Array.index(i1, nodes)]);
                                    nodes[System.Array.index(i1, nodes)].RemoveConnection(connj);
                                    ($t9 = nodes[System.Array.index(k, nodes)].Connected)[System.Array.index(l, $t9)].RemoveConnection(nodes[System.Array.index(k, nodes)]);
                                    nodes[System.Array.index(k, nodes)].RemoveConnection(connl);
                                    nodes[System.Array.index(nNodes, nodes)] = new FarseerPhysics.Common.Vertices.PolyNode(intersectPt.v.$clone());
                                    nodes[System.Array.index(nNodes, nodes)].AddConnection(nodes[System.Array.index(i1, nodes)]);
                                    nodes[System.Array.index(i1, nodes)].AddConnection(nodes[System.Array.index(nNodes, nodes)]);
                                    nodes[System.Array.index(nNodes, nodes)].AddConnection(nodes[System.Array.index(k, nodes)]);
                                    nodes[System.Array.index(k, nodes)].AddConnection(nodes[System.Array.index(nNodes, nodes)]);
                                    nodes[System.Array.index(nNodes, nodes)].AddConnection(connj);
                                    connj.AddConnection(nodes[System.Array.index(nNodes, nodes)]);
                                    nodes[System.Array.index(nNodes, nodes)].AddConnection(connl);
                                    connl.AddConnection(nodes[System.Array.index(nNodes, nodes)]);
                                    nNodes = (nNodes + 1) | 0;
                                    $step = 21;
                                    continue;
                                }

                                case 13: {
                                    l = (l + 1) | 0;
                                    $step = 9;
                                    continue;
                                }

                                case 15: {
                                    k = (k + 1) | 0;
                                    $step = 7;
                                    continue;
                                }

                                case 17: {
                                    j = (j + 1) | 0;
                                    $step = 5;
                                    continue;
                                }

                                case 19: {
                                    i1 = (i1 + 1) | 0;
                                    $step = 3;
                                    continue;
                                }
                                case 20: {

                                }
                                case 21: {
                                    counter = (counter + 1) | 0;

                                    $step = 1;
                                    continue;
                                }
                                case 22: {
                                    foundDupe = true;
                                    nActive = nNodes;
                                    while (foundDupe) {
                                        foundDupe = false;
                                        for (i2 = 0; i2 < nNodes; i2 = (i2 + 1) | 0) {
                                            if (nodes[System.Array.index(i2, nodes)].NConnected === 0) {
                                                continue;
                                            }
                                            for (j1 = (i2 + 1) | 0; j1 < nNodes; j1 = (j1 + 1) | 0) {
                                                if (nodes[System.Array.index(j1, nodes)].NConnected === 0) {
                                                    continue;
                                                }
                                                diff = Microsoft.Xna.Framework.Vector2.op_Subtraction(nodes[System.Array.index(i2, nodes)].Position.$clone(), nodes[System.Array.index(j1, nodes)].Position.$clone());
                                                if (diff.LengthSquared() <= 1.42108547E-14) {
                                                    if (nActive <= 3) {
                                                        return new FarseerPhysics.Common.Vertices.ctor();
                                                    }

                                                    nActive = (nActive - 1) | 0;
                                                    foundDupe = true;
                                                    inode = nodes[System.Array.index(i2, nodes)];
                                                    jnode = nodes[System.Array.index(j1, nodes)];
                                                    njConn = jnode.NConnected;
                                                    for (k1 = 0; k1 < njConn; k1 = (k1 + 1) | 0) {
                                                        knode = jnode.Connected[System.Array.index(k1, jnode.Connected)];
                                                        System.Diagnostics.Debug.Assert(!Bridge.referenceEquals(knode, jnode));
                                                        if (!Bridge.referenceEquals(knode, inode)) {
                                                            inode.AddConnection(knode);
                                                            knode.AddConnection(inode);
                                                        }
                                                        knode.RemoveConnection(jnode);
                                                    }
                                                    jnode.NConnected = 0;
                                                }
                                            }
                                        }
                                    }


                                    minY = 3.40282347E+38;
                                    maxX = -3.40282347E+38;
                                    minYIndex = -1;
                                    for (i3 = 0; i3 < nNodes; i3 = (i3 + 1) | 0) {
                                        if (nodes[System.Array.index(i3, nodes)].Position.Y < minY && nodes[System.Array.index(i3, nodes)].NConnected > 1) {
                                            minY = nodes[System.Array.index(i3, nodes)].Position.Y;
                                            minYIndex = i3;
                                            maxX = nodes[System.Array.index(i3, nodes)].Position.X;
                                        } else if (nodes[System.Array.index(i3, nodes)].Position.Y === minY && nodes[System.Array.index(i3, nodes)].Position.X > maxX && nodes[System.Array.index(i3, nodes)].NConnected > 1) {
                                            minYIndex = i3;
                                            maxX = nodes[System.Array.index(i3, nodes)].Position.X;
                                        }
                                    }

                                    origDir = new Microsoft.Xna.Framework.Vector2.$ctor2(1.0, 0.0);
                                    resultVecs = System.Array.init(Bridge.Int.mul(4, nNodes), function (){
                                        return new Microsoft.Xna.Framework.Vector2();
                                    }, Microsoft.Xna.Framework.Vector2);
                                    nResultVecs = 0;
                                    currentNode = nodes[System.Array.index(minYIndex, nodes)];
                                    startNode = currentNode;
                                    System.Diagnostics.Debug.Assert(currentNode.NConnected > 0);
                                    nextNode = currentNode.GetRightestConnection$1(origDir.$clone());
                                    if (nextNode == null) {
                                        vertices = new FarseerPhysics.Common.Vertices.$ctor3(nResultVecs);

                                        for (i4 = 0; i4 < nResultVecs; i4 = (i4 + 1) | 0) {
                                            vertices.add(resultVecs[System.Array.index(i4, resultVecs)].$clone());
                                        }

                                        return vertices;
                                    }

                                    resultVecs[System.Array.index(0, resultVecs)] = startNode.Position.$clone();
                                    nResultVecs = (nResultVecs + 1) | 0;
                                    while (!Bridge.referenceEquals(nextNode, startNode)) {
                                        if (nResultVecs > Bridge.Int.mul(4, nNodes)) {
                                            System.Diagnostics.Debug.Assert(false);
                                        }
                                        resultVecs[System.Array.index(Bridge.identity(nResultVecs, (nResultVecs = (nResultVecs + 1) | 0)), resultVecs)] = nextNode.Position.$clone();
                                        oldNode = currentNode;
                                        currentNode = nextNode;
                                        nextNode = currentNode.GetRightestConnection(oldNode);
                                        if (nextNode == null) {
                                            vertices1 = new FarseerPhysics.Common.Vertices.$ctor3(nResultVecs);
                                            for (i5 = 0; i5 < nResultVecs; i5 = (i5 + 1) | 0) {
                                                vertices1.add(resultVecs[System.Array.index(i5, resultVecs)].$clone());
                                            }
                                            return vertices1;
                                        }
                                    }

                                    return new FarseerPhysics.Common.Vertices.ctor();
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                return $asyncBody();
            },
            toString: function () {
                var builder = new System.Text.StringBuilder();
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    builder.append(this.getItem(i).$clone().toString());
                    if (i < ((this.Count - 1) | 0)) {
                        builder.append(" ");
                    }
                }
                return builder.toString();
            },
            /**
             * Projects to axis.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @param   {Microsoft.Xna.Framework.Vector2}    axis    The axis.
             * @param   {System.Single}                      min     The min.
             * @param   {System.Single}                      max     The max.
             * @return  {void}
             */
            ProjectToAxis: function (axis, min, max) {
                var dotProduct = Microsoft.Xna.Framework.Vector2.Dot(axis.v.$clone(), this.getItem(0).$clone());
                min.v = dotProduct;
                max.v = dotProduct;

                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    dotProduct = Microsoft.Xna.Framework.Vector2.Dot(this.getItem(i).$clone(), axis.v.$clone());
                    if (dotProduct < min.v) {
                        min.v = dotProduct;
                    } else {
                        if (dotProduct > max.v) {
                            max.v = dotProduct;
                        }
                    }
                }
            },
            /**
             * Winding number test for a point in a polygon.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @param   {Microsoft.Xna.Framework.Vector2}    point    The point to be tested.
             * @return  {number}                                      -1 if the winding number is zero and the point is outside
             the polygon, 1 if the point is inside the polygon, and 0 if the point
             is on the polygons edge.
             */
            PointInPolygon: function (point) {
                var wn = 0;

                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    var p1 = { v : this.getItem(i).$clone() };
                    var p2 = { v : this.getItem(this.NextIndex(i)).$clone() };

                    var edge = Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.v.$clone(), p1.v.$clone());
                    var area = FarseerPhysics.Common.MathUtils.Area$1(p1, p2, point);
                    if (area === 0.0 && Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(point.v.$clone(), p1.v.$clone()), edge.$clone()) >= 0.0 && Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(point.v.$clone(), p2.v.$clone()), edge.$clone()) <= 0.0) {
                        return 0;
                    }
                    if (p1.v.Y <= point.v.Y) {
                        if (p2.v.Y > point.v.Y && area > 0.0) {
                            wn = (wn + 1) | 0;
                        }
                    } else {
                        if (p2.v.Y <= point.v.Y && area < 0.0) {
                            wn = (wn - 1) | 0;
                        }
                    }
                }
                return (wn === 0 ? -1 : 1);
            },
            /**
             * Compute the sum of the angles made between the test point and each pair of points making up the polygon. 
             If this sum is 2pi then the point is an interior point, if 0 then the point is an exterior point. 
             ref: http://ozviz.wasp.uwa.edu.au/~pbourke/geometry/insidepoly/  - Solution 2
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Vertices
             * @memberof FarseerPhysics.Common.Vertices
             * @param   {Microsoft.Xna.Framework.Vector2}    point
             * @return  {boolean}
             */
            PointInPolygonAngle: function (point) {
                var angle = 0;

                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    var p1 = { v : Microsoft.Xna.Framework.Vector2.op_Subtraction(this.getItem(i).$clone(), point.v.$clone()) };
                    var p2 = { v : Microsoft.Xna.Framework.Vector2.op_Subtraction(this.getItem(this.NextIndex(i)).$clone(), point.v.$clone()) };

                    angle += FarseerPhysics.Common.MathUtils.VectorAngle$1(p1, p2);
                }

                if (Math.abs(angle) < Math.PI) {
                    return false;
                }

                return true;
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.FixedArray2$1", function (T) { return {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (FarseerPhysics.Common.FixedArray2$1(T))(); }
            }
        },
        fields: {
            _value0: Bridge.getDefaultValue(T),
            _value1: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getItem: function (index) {
                switch (index) {
                    case 0: 
                        return this._value0;
                    case 1: 
                        return this._value1;
                    default: 
                        throw new System.IndexOutOfRangeException.ctor();
                }
            },
            setItem: function (index, value) {
                switch (index) {
                    case 0: 
                        this._value0 = value;
                        break;
                    case 1: 
                        this._value1 = value;
                        break;
                    default: 
                        throw new System.IndexOutOfRangeException.ctor();
                }
            },
            getHashCode: function () {
                var h = Bridge.addHash([3625788427, this._value0, this._value1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Common.FixedArray2$1(T))) {
                    return false;
                }
                return Bridge.equals(this._value0, o._value0) && Bridge.equals(this._value1, o._value1);
            },
            $clone: function (to) {
                var s = to || new (FarseerPhysics.Common.FixedArray2$1(T))();
                s._value0 = this._value0;
                s._value1 = this._value1;
                return s;
            }
        }
    }; });

    Bridge.define("FarseerPhysics.Common.FixedArray3$1", function (T) { return {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (FarseerPhysics.Common.FixedArray3$1(T))(); }
            }
        },
        fields: {
            _value0: Bridge.getDefaultValue(T),
            _value1: Bridge.getDefaultValue(T),
            _value2: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getItem: function (index) {
                switch (index) {
                    case 0: 
                        return this._value0;
                    case 1: 
                        return this._value1;
                    case 2: 
                        return this._value2;
                    default: 
                        throw new System.IndexOutOfRangeException.ctor();
                }
            },
            setItem: function (index, value) {
                switch (index) {
                    case 0: 
                        this._value0 = value;
                        break;
                    case 1: 
                        this._value1 = value;
                        break;
                    case 2: 
                        this._value2 = value;
                        break;
                    default: 
                        throw new System.IndexOutOfRangeException.ctor();
                }
            },
            getHashCode: function () {
                var h = Bridge.addHash([3625853963, this._value0, this._value1, this._value2]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Common.FixedArray3$1(T))) {
                    return false;
                }
                return Bridge.equals(this._value0, o._value0) && Bridge.equals(this._value1, o._value1) && Bridge.equals(this._value2, o._value2);
            },
            $clone: function (to) {
                var s = to || new (FarseerPhysics.Common.FixedArray3$1(T))();
                s._value0 = this._value0;
                s._value1 = this._value1;
                s._value2 = this._value2;
                return s;
            }
        }
    }; });

    Bridge.define("FarseerPhysics.Common.FixedArray4$1", function (T) { return {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (FarseerPhysics.Common.FixedArray4$1(T))(); }
            }
        },
        fields: {
            _value0: Bridge.getDefaultValue(T),
            _value1: Bridge.getDefaultValue(T),
            _value2: Bridge.getDefaultValue(T),
            _value3: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getItem: function (index) {
                switch (index) {
                    case 0: 
                        return this._value0;
                    case 1: 
                        return this._value1;
                    case 2: 
                        return this._value2;
                    case 3: 
                        return this._value3;
                    default: 
                        throw new System.IndexOutOfRangeException.ctor();
                }
            },
            setItem: function (index, value) {
                switch (index) {
                    case 0: 
                        this._value0 = value;
                        break;
                    case 1: 
                        this._value1 = value;
                        break;
                    case 2: 
                        this._value2 = value;
                        break;
                    case 3: 
                        this._value3 = value;
                        break;
                    default: 
                        throw new System.IndexOutOfRangeException.ctor();
                }
            },
            getHashCode: function () {
                var h = Bridge.addHash([3625919499, this._value0, this._value1, this._value2, this._value3]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Common.FixedArray4$1(T))) {
                    return false;
                }
                return Bridge.equals(this._value0, o._value0) && Bridge.equals(this._value1, o._value1) && Bridge.equals(this._value2, o._value2) && Bridge.equals(this._value3, o._value3);
            },
            $clone: function (to) {
                var s = to || new (FarseerPhysics.Common.FixedArray4$1(T))();
                s._value0 = this._value0;
                s._value1 = this._value1;
                s._value2 = this._value2;
                s._value3 = this._value3;
                return s;
            }
        }
    }; });

    Bridge.define("FarseerPhysics.Common.FixedArray8$1", function (T) { return {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (FarseerPhysics.Common.FixedArray8$1(T))(); }
            }
        },
        fields: {
            _value0: Bridge.getDefaultValue(T),
            _value1: Bridge.getDefaultValue(T),
            _value2: Bridge.getDefaultValue(T),
            _value3: Bridge.getDefaultValue(T),
            _value4: Bridge.getDefaultValue(T),
            _value5: Bridge.getDefaultValue(T),
            _value6: Bridge.getDefaultValue(T),
            _value7: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getItem: function (index) {
                switch (index) {
                    case 0: 
                        return this._value0;
                    case 1: 
                        return this._value1;
                    case 2: 
                        return this._value2;
                    case 3: 
                        return this._value3;
                    case 4: 
                        return this._value4;
                    case 5: 
                        return this._value5;
                    case 6: 
                        return this._value6;
                    case 7: 
                        return this._value7;
                    default: 
                        throw new System.IndexOutOfRangeException.ctor();
                }
            },
            setItem: function (index, value) {
                switch (index) {
                    case 0: 
                        this._value0 = value;
                        break;
                    case 1: 
                        this._value1 = value;
                        break;
                    case 2: 
                        this._value2 = value;
                        break;
                    case 3: 
                        this._value3 = value;
                        break;
                    case 4: 
                        this._value4 = value;
                        break;
                    case 5: 
                        this._value5 = value;
                        break;
                    case 6: 
                        this._value6 = value;
                        break;
                    case 7: 
                        this._value7 = value;
                        break;
                    default: 
                        throw new System.IndexOutOfRangeException.ctor();
                }
            },
            getHashCode: function () {
                var h = Bridge.addHash([3626181643, this._value0, this._value1, this._value2, this._value3, this._value4, this._value5, this._value6, this._value7]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Common.FixedArray8$1(T))) {
                    return false;
                }
                return Bridge.equals(this._value0, o._value0) && Bridge.equals(this._value1, o._value1) && Bridge.equals(this._value2, o._value2) && Bridge.equals(this._value3, o._value3) && Bridge.equals(this._value4, o._value4) && Bridge.equals(this._value5, o._value5) && Bridge.equals(this._value6, o._value6) && Bridge.equals(this._value7, o._value7);
            },
            $clone: function (to) {
                var s = to || new (FarseerPhysics.Common.FixedArray8$1(T))();
                s._value0 = this._value0;
                s._value1 = this._value1;
                s._value2 = this._value2;
                s._value3 = this._value3;
                s._value4 = this._value4;
                s._value5 = this._value5;
                s._value6 = this._value6;
                s._value7 = this._value7;
                return s;
            }
        }
    }; });

    /** @namespace FarseerPhysics.Common */

    /**
     * Collection of helper methods for misc collisions.
     Does float tolerance and line collisions with lines and AABBs.
     *
     * @static
     * @abstract
     * @public
     * @class FarseerPhysics.Common.LineTools
     */
    Bridge.define("FarseerPhysics.Common.LineTools", {
        statics: {
            methods: {
                DistanceBetweenPointAndPoint: function (point1, point2) {
                    var v = { v : new Microsoft.Xna.Framework.Vector2() };
                    Microsoft.Xna.Framework.Vector2.Subtract$1(point1, point2, v);
                    return v.v.Length();
                },
                DistanceBetweenPointAndLineSegment: function (point, lineEndPoint1, lineEndPoint2) {
                    var v = Microsoft.Xna.Framework.Vector2.Subtract(lineEndPoint2.v.$clone(), lineEndPoint1.v.$clone());
                    var w = Microsoft.Xna.Framework.Vector2.Subtract(point.v.$clone(), lineEndPoint1.v.$clone());

                    var c1 = Microsoft.Xna.Framework.Vector2.Dot(w.$clone(), v.$clone());
                    if (c1 <= 0) {
                        return FarseerPhysics.Common.LineTools.DistanceBetweenPointAndPoint(point, lineEndPoint1);
                    }

                    var c2 = Microsoft.Xna.Framework.Vector2.Dot(v.$clone(), v.$clone());
                    if (c2 <= c1) {
                        return FarseerPhysics.Common.LineTools.DistanceBetweenPointAndPoint(point, lineEndPoint2);
                    }

                    var b = c1 / c2;
                    var pointOnLine = { v : Microsoft.Xna.Framework.Vector2.Add(lineEndPoint1.v.$clone(), Microsoft.Xna.Framework.Vector2.Multiply$1(v.$clone(), b)) };
                    return FarseerPhysics.Common.LineTools.DistanceBetweenPointAndPoint(point, pointOnLine);
                },
                /**
                 * Check if the lines a0-&gt;a1 and b0-&gt;b1 cross.
                If they do, intersectionPoint will be filled
                with the point of crossing.
                Grazing lines should not return true.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.LineTools
                 * @memberof FarseerPhysics.Common.LineTools
                 * @param   {Microsoft.Xna.Framework.Vector2}    a0                   
                 * @param   {Microsoft.Xna.Framework.Vector2}    a1                   
                 * @param   {Microsoft.Xna.Framework.Vector2}    b0                   
                 * @param   {Microsoft.Xna.Framework.Vector2}    b1                   
                 * @param   {Microsoft.Xna.Framework.Vector2}    intersectionPoint
                 * @return  {boolean}
                 */
                LineIntersect2: function (a0, a1, b0, b1, intersectionPoint) {
                    intersectionPoint.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();

                    if (Microsoft.Xna.Framework.Vector2.op_Equality(a0.$clone(), b0.$clone()) || Microsoft.Xna.Framework.Vector2.op_Equality(a0.$clone(), b1.$clone()) || Microsoft.Xna.Framework.Vector2.op_Equality(a1.$clone(), b0.$clone()) || Microsoft.Xna.Framework.Vector2.op_Equality(a1.$clone(), b1.$clone())) {
                        return false;
                    }

                    var x1 = a0.X;
                    var y1 = a0.Y;
                    var x2 = a1.X;
                    var y2 = a1.Y;
                    var x3 = b0.X;
                    var y3 = b0.Y;
                    var x4 = b1.X;
                    var y4 = b1.Y;

                    if (Math.max(x1, x2) < Math.min(x3, x4) || Math.max(x3, x4) < Math.min(x1, x2)) {
                        return false;
                    }

                    if (Math.max(y1, y2) < Math.min(y3, y4) || Math.max(y3, y4) < Math.min(y1, y2)) {
                        return false;
                    }

                    var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3));
                    var ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3));
                    var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
                    if (Math.abs(denom) < FarseerPhysics.Settings.Epsilon) {
                        return false;
                    }
                    ua /= denom;
                    ub /= denom;

                    if ((0 < ua) && (ua < 1) && (0 < ub) && (ub < 1)) {
                        intersectionPoint.v.X = (x1 + ua * (x2 - x1));
                        intersectionPoint.v.Y = (y1 + ua * (y2 - y1));
                        return true;
                    }

                    return false;
                },
                LineIntersect: function (p1, p2, q1, q2) {
                    var i = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    var a1 = p2.Y - p1.Y;
                    var b1 = p1.X - p2.X;
                    var c1 = a1 * p1.X + b1 * p1.Y;
                    var a2 = q2.Y - q1.Y;
                    var b2 = q1.X - q2.X;
                    var c2 = a2 * q1.X + b2 * q1.Y;
                    var det = a1 * b2 - a2 * b1;

                    if (!FarseerPhysics.Common.MathUtils.FloatEquals(det, 0)) {
                        i.X = (b2 * c1 - b1 * c2) / det;
                        i.Y = (a1 * c2 - a2 * c1) / det;
                    }
                    return i.$clone();
                },
                /**
                 * This method detects if two line segments (or lines) intersect,
                 and, if so, the point of intersection. Use the <b /> and
                 <b /> parameters to set whether the intersection point
                 must be on the first and second line segments. Setting these
                 both to true means you are doing a line-segment to line-segment
                 intersection. Setting one of them to true means you are doing a
                 line to line-segment intersection test, and so on.
                 Note: If two line segments are coincident, then 
                 no intersection is detected (there are actually
                 infinite intersection points).
                 Author: Jeremy Bell
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.LineTools
                 * @memberof FarseerPhysics.Common.LineTools
                 * @param   {Microsoft.Xna.Framework.Vector2}    point1             The first point of the first line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    point2             The second point of the first line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    point3             The first point of the second line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    point4             The second point of the second line segment.
                 * @param   {boolean}                            firstIsSegment     Set this to true to require that the 
                 intersection point be on the first line segment.
                 * @param   {boolean}                            secondIsSegment    Set this to true to require that the
                 intersection point be on the second line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    point              This is set to the intersection
                 point if an intersection is detected.
                 * @return  {boolean}                                               True if an intersection is detected, false otherwise.
                 */
                LineIntersect$4: function (point1, point2, point3, point4, firstIsSegment, secondIsSegment, point) {
                    point.v = new Microsoft.Xna.Framework.Vector2.ctor();

                    var a = point4.v.Y - point3.v.Y;
                    var b = point2.v.X - point1.v.X;
                    var c = point4.v.X - point3.v.X;
                    var d = point2.v.Y - point1.v.Y;

                    var denom = (a * b) - (c * d);

                    if (!(denom >= -1.1920929E-07 && denom <= FarseerPhysics.Settings.Epsilon)) {
                        var e = point1.v.Y - point3.v.Y;
                        var f = point1.v.X - point3.v.X;
                        var oneOverDenom = 1.0 / denom;

                        var ua = (c * e) - (a * f);
                        ua *= oneOverDenom;

                        if (!firstIsSegment || ua >= 0.0 && ua <= 1.0) {
                            var ub = (b * e) - (d * f);
                            ub *= oneOverDenom;

                            if (!secondIsSegment || ub >= 0.0 && ub <= 1.0) {
                                if (ua !== 0.0 || ub !== 0.0) {
                                    point.v.X = point1.v.X + ua * b;
                                    point.v.Y = point1.v.Y + ua * d;
                                    return true;
                                }
                            }
                        }
                    }

                    return false;
                },
                /**
                 * This method detects if two line segments (or lines) intersect,
                 and, if so, the point of intersection. Use the <b /> and
                 <b /> parameters to set whether the intersection point
                 must be on the first and second line segments. Setting these
                 both to true means you are doing a line-segment to line-segment
                 intersection. Setting one of them to true means you are doing a
                 line to line-segment intersection test, and so on.
                 Note: If two line segments are coincident, then 
                 no intersection is detected (there are actually
                 infinite intersection points).
                 Author: Jeremy Bell
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.LineTools
                 * @memberof FarseerPhysics.Common.LineTools
                 * @param   {Microsoft.Xna.Framework.Vector2}    point1               The first point of the first line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    point2               The second point of the first line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    point3               The first point of the second line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    point4               The second point of the second line segment.
                 * @param   {boolean}                            firstIsSegment       Set this to true to require that the 
                 intersection point be on the first line segment.
                 * @param   {boolean}                            secondIsSegment      Set this to true to require that the
                 intersection point be on the second line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    intersectionPoint    This is set to the intersection
                 point if an intersection is detected.
                 * @return  {boolean}                                                 True if an intersection is detected, false otherwise.
                 */
                LineIntersect$2: function (point1, point2, point3, point4, firstIsSegment, secondIsSegment, intersectionPoint) {
                    point1 = {v:point1};
                    point2 = {v:point2};
                    point3 = {v:point3};
                    point4 = {v:point4};
                    return FarseerPhysics.Common.LineTools.LineIntersect$4(point1, point2, point3, point4, firstIsSegment, secondIsSegment, intersectionPoint);
                },
                /**
                 * This method detects if two line segments intersect,
                 and, if so, the point of intersection. 
                 Note: If two line segments are coincident, then 
                 no intersection is detected (there are actually
                 infinite intersection points).
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.LineTools
                 * @memberof FarseerPhysics.Common.LineTools
                 * @param   {Microsoft.Xna.Framework.Vector2}    point1               The first point of the first line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    point2               The second point of the first line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    point3               The first point of the second line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    point4               The second point of the second line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    intersectionPoint    This is set to the intersection
                 point if an intersection is detected.
                 * @return  {boolean}                                                 True if an intersection is detected, false otherwise.
                 */
                LineIntersect$3: function (point1, point2, point3, point4, intersectionPoint) {
                    return FarseerPhysics.Common.LineTools.LineIntersect$4(point1, point2, point3, point4, true, true, intersectionPoint);
                },
                /**
                 * This method detects if two line segments intersect,
                 and, if so, the point of intersection. 
                 Note: If two line segments are coincident, then 
                 no intersection is detected (there are actually
                 infinite intersection points).
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.LineTools
                 * @memberof FarseerPhysics.Common.LineTools
                 * @param   {Microsoft.Xna.Framework.Vector2}    point1               The first point of the first line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    point2               The second point of the first line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    point3               The first point of the second line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    point4               The second point of the second line segment.
                 * @param   {Microsoft.Xna.Framework.Vector2}    intersectionPoint    This is set to the intersection
                 point if an intersection is detected.
                 * @return  {boolean}                                                 True if an intersection is detected, false otherwise.
                 */
                LineIntersect$1: function (point1, point2, point3, point4, intersectionPoint) {
                    point1 = {v:point1};
                    point2 = {v:point2};
                    point3 = {v:point3};
                    point4 = {v:point4};
                    return FarseerPhysics.Common.LineTools.LineIntersect$4(point1, point2, point3, point4, true, true, intersectionPoint);
                },
                /**
                 * Get all intersections between a line segment and a list of vertices
                 representing a polygon. The vertices reuse adjacent points, so for example
                 edges one and two are between the first and second vertices and between the
                 second and third vertices. The last edge is between vertex vertices.Count - 1
                 and verts0. (ie, vertices from a Geometry or AABB)
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.LineTools
                 * @memberof FarseerPhysics.Common.LineTools
                 * @param   {Microsoft.Xna.Framework.Vector2}      point1                The first point of the line segment to test
                 * @param   {Microsoft.Xna.Framework.Vector2}      point2                The second point of the line segment to test.
                 * @param   {FarseerPhysics.Common.Vertices}       vertices              The vertices, as described above
                 * @param   {System.Collections.Generic.List$1}    intersectionPoints    An list of intersection points. Any intersection points
                 found will be added to this list.
                 * @return  {void}
                 */
                LineSegmentVerticesIntersect: function (point1, point2, vertices, intersectionPoints) {
                    for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                        var point = { v : new Microsoft.Xna.Framework.Vector2() };
                        if (FarseerPhysics.Common.LineTools.LineIntersect$2(vertices.getItem(i).$clone(), vertices.getItem(vertices.NextIndex(i)).$clone(), point1.v.$clone(), point2.v.$clone(), true, true, point)) {
                            intersectionPoints.v.add(point.v.$clone());
                        }
                    }
                },
                /**
                 * Get all intersections between a line segment and an AABB.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.LineTools
                 * @memberof FarseerPhysics.Common.LineTools
                 * @param   {Microsoft.Xna.Framework.Vector2}      point1                The first point of the line segment to test
                 * @param   {Microsoft.Xna.Framework.Vector2}      point2                The second point of the line segment to test.
                 * @param   {FarseerPhysics.Collision.AABB}        aabb                  The AABB that is used for testing intersection.
                 * @param   {System.Collections.Generic.List$1}    intersectionPoints    An list of intersection points. Any intersection points found will be added to this list.
                 * @return  {void}
                 */
                LineSegmentAABBIntersect: function (point1, point2, aabb, intersectionPoints) {
                    FarseerPhysics.Common.LineTools.LineSegmentVerticesIntersect(point1, point2, aabb.Vertices, intersectionPoints);
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.MarchingSquares", {
        statics: {
            fields: {
                _lookMarch: null
            },
            ctors: {
                init: function () {
                    this._lookMarch = System.Array.init([
                        0, 
                        224, 
                        56, 
                        216, 
                        14, 
                        238, 
                        54, 
                        214, 
                        131, 
                        99, 
                        187, 
                        91, 
                        141, 
                        109, 
                        181, 
                        85
                    ], System.Int32);
                }
            },
            methods: {
                /**
                 * Marching squares over the given domain using the mesh defined via the dimensions
                    (wid,hei) to build a set of polygons such that f(x,y) less than 0, using the given number
                    'bin' for recursive linear inteprolation along cell boundaries.
                    if 'comb' is true, then the polygons will also be composited into larger possible concave
                    polygons.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.MarchingSquares
                 * @memberof FarseerPhysics.Common.MarchingSquares
                 * @param   {FarseerPhysics.Collision.AABB}        domain        
                 * @param   {number}                               cellWidth     
                 * @param   {number}                               cellHeight    
                 * @param   {Array.<number>}                       f             
                 * @param   {number}                               lerpCount     
                 * @param   {boolean}                              combine
                 * @return  {System.Collections.Generic.List$1}
                 */
                DetectSquares: function (domain, cellWidth, cellHeight, f, lerpCount, combine) {
                    var $t, $t1;
                    var ret = new (FarseerPhysics.Common.MarchingSquares.CxFastList$1(FarseerPhysics.Common.MarchingSquares.GeomPoly))();

                    var verticesList = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();

                    var polyList;
                    var gp = { };

                    var xn = Bridge.Int.clip32(domain.Extents.X * 2 / cellWidth);
                    var xp = xn === (domain.Extents.X * 2 / cellWidth);
                    var yn = Bridge.Int.clip32(domain.Extents.Y * 2 / cellHeight);
                    var yp = yn === (domain.Extents.Y * 2 / cellHeight);
                    if (!xp) {
                        xn = (xn + 1) | 0;
                    }
                    if (!yp) {
                        yn = (yn + 1) | 0;
                    }

                    var fs = System.Array.create(0, null, System.SByte, ((xn + 1) | 0), ((yn + 1) | 0));
                    var ps = System.Array.create(null, null, FarseerPhysics.Common.MarchingSquares.GeomPolyVal, ((xn + 1) | 0), ((yn + 1) | 0));

                    for (var x = 0; x < ((xn + 1) | 0); x = (x + 1) | 0) {
                        var x0;
                        if (x === xn) {
                            x0 = Bridge.Int.clip32(domain.UpperBound.X);
                        } else {
                            x0 = Bridge.Int.clip32(x * cellWidth + domain.LowerBound.X);
                        }
                        for (var y = 0; y < ((yn + 1) | 0); y = (y + 1) | 0) {
                            var y0;
                            if (y === yn) {
                                y0 = Bridge.Int.clip32(domain.UpperBound.Y);
                            } else {
                                y0 = Bridge.Int.clip32(y * cellHeight + domain.LowerBound.Y);
                            }
                            fs.set([x, y], f.get([x0, y0]));
                        }
                    }

                    for (var y1 = 0; y1 < yn; y1 = (y1 + 1) | 0) {
                        var y01 = y1 * cellHeight + domain.LowerBound.Y;
                        var y11;
                        if (y1 === ((yn - 1) | 0)) {
                            y11 = domain.UpperBound.Y;
                        } else {
                            y11 = y01 + cellHeight;
                        }
                        var pre = { v : null };
                        for (var x1 = 0; x1 < xn; x1 = (x1 + 1) | 0) {
                            var x01 = x1 * cellWidth + domain.LowerBound.X;
                            var x11;
                            if (x1 === ((xn - 1) | 0)) {
                                x11 = domain.UpperBound.X;
                            } else {
                                x11 = x01 + cellWidth;
                            }

                            gp.v = new FarseerPhysics.Common.MarchingSquares.GeomPoly();

                            var key = FarseerPhysics.Common.MarchingSquares.MarchSquare(f, fs, gp, x1, y1, x01, y01, x11, y11, lerpCount);
                            if (gp.v.Length !== 0) {
                                if (combine && pre.v != null && (key & 9) !== 0) {
                                    FarseerPhysics.Common.MarchingSquares.combLeft(pre, gp);
                                    gp.v = pre.v;
                                } else {
                                    ret.Add(gp.v);
                                }
                                ps.set([x1, y1], new FarseerPhysics.Common.MarchingSquares.GeomPolyVal(gp.v, key));
                            } else {
                                gp.v = null;
                            }
                            pre.v = gp.v;
                        }
                    }
                    if (!combine) {
                        polyList = ret.GetListOfElements();

                        $t = Bridge.getEnumerator(polyList);
                        try {
                            while ($t.moveNext()) {
                                var poly = $t.Current;
                                verticesList.add(new FarseerPhysics.Common.Vertices.$ctor2(poly.Points.GetListOfElements()));
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                        return verticesList;
                    }

                    for (var y2 = 1; y2 < yn; y2 = (y2 + 1) | 0) {
                        var x2 = 0;
                        while (x2 < xn) {
                            var p = ps.get([x2, y2]);

                            if (p == null) {
                                x2 = (x2 + 1) | 0;
                                continue;
                            }

                            if ((p.Key & 12) === 0) {
                                x2 = (x2 + 1) | 0;
                                continue;
                            }

                            var u = ps.get([x2, ((y2 - 1) | 0)]);
                            if (u == null) {
                                x2 = (x2 + 1) | 0;
                                continue;
                            }

                            if ((u.Key & 3) === 0) {
                                x2 = (x2 + 1) | 0;
                                continue;
                            }

                            var ax = x2 * cellWidth + domain.LowerBound.X;
                            var ay = y2 * cellHeight + domain.LowerBound.Y;

                            var bp = p.GeomP.Points;
                            var ap = u.GeomP.Points;

                            if (Bridge.referenceEquals(u.GeomP, p.GeomP)) {
                                x2 = (x2 + 1) | 0;
                                continue;
                            }

                            var bi = bp.Begin();
                            while (FarseerPhysics.Common.MarchingSquares.Square(bi.Elem().Y - ay) > FarseerPhysics.Settings.Epsilon || bi.Elem().X < ax) {
                                bi = bi.Next();
                            }

                            var b1 = bi.Next().Elem().$clone();
                            if (FarseerPhysics.Common.MarchingSquares.Square(b1.Y - ay) > FarseerPhysics.Settings.Epsilon) {
                                x2 = (x2 + 1) | 0;
                                continue;
                            }

                            var brk = true;
                            var ai = ap.Begin();
                            while (!Bridge.referenceEquals(ai, ap.End())) {
                                if (FarseerPhysics.Common.MarchingSquares.VecDsq(ai.Elem().$clone(), b1.$clone()) < FarseerPhysics.Settings.Epsilon) {
                                    brk = false;
                                    break;
                                }
                                ai = ai.Next();
                            }
                            if (brk) {
                                x2 = (x2 + 1) | 0;
                                continue;
                            }

                            var bj = bi.Next().Next();
                            if (Bridge.referenceEquals(bj, bp.End())) {
                                bj = bp.Begin();
                            }
                            while (!Bridge.referenceEquals(bj, bi)) {
                                ai = ap.Insert(ai, bj.Elem().$clone());
                                bj = bj.Next();
                                if (Bridge.referenceEquals(bj, bp.End())) {
                                    bj = bp.Begin();
                                }
                                u.GeomP.Length = (u.GeomP.Length + 1) | 0;
                            }
                            ax = (x2 + 1) | 0;
                            while (ax < xn) {
                                var p2 = ps.get([Bridge.Int.clip32(ax), y2]);
                                if (p2 == null || !Bridge.referenceEquals(p2.GeomP, p.GeomP)) {
                                    ax++;
                                    continue;
                                }
                                p2.GeomP = u.GeomP;
                                ax++;
                            }
                            ax = (x2 - 1) | 0;
                            while (ax >= 0) {
                                var p21 = ps.get([Bridge.Int.clip32(ax), y2]);
                                if (p21 == null || !Bridge.referenceEquals(p21.GeomP, p.GeomP)) {
                                    ax--;
                                    continue;
                                }
                                p21.GeomP = u.GeomP;
                                ax--;
                            }
                            ret.Remove(p.GeomP);
                            p.GeomP = u.GeomP;

                            x2 = (Bridge.Int.clip32(((bi.Next().Elem().X - domain.LowerBound.X) / cellWidth)) + 1) | 0;
                        }
                    }

                    polyList = ret.GetListOfElements();

                    $t1 = Bridge.getEnumerator(polyList);
                    try {
                        while ($t1.moveNext()) {
                            var poly1 = $t1.Current;
                            verticesList.add(new FarseerPhysics.Common.Vertices.$ctor2(poly1.Points.GetListOfElements()));
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    return verticesList;
                },
                Lerp: function (x0, x1, v0, v1) {
                    var dv = v0 - v1;
                    var t;
                    if (dv * dv < FarseerPhysics.Settings.Epsilon) {
                        t = 0.5;
                    } else {
                        t = v0 / dv;
                    }
                    return x0 + t * (x1 - x0);
                },
                Xlerp: function (x0, x1, y, v0, v1, f, c) {
                    var xm = FarseerPhysics.Common.MarchingSquares.Lerp(x0, x1, v0, v1);
                    if (c === 0) {
                        return xm;
                    }

                    var vm = f.get([Bridge.Int.clip32(xm), Bridge.Int.clip32(y)]);

                    if (v0 * vm < 0) {
                        return FarseerPhysics.Common.MarchingSquares.Xlerp(x0, xm, y, v0, vm, f, ((c - 1) | 0));
                    }

                    return FarseerPhysics.Common.MarchingSquares.Xlerp(xm, x1, y, vm, v1, f, ((c - 1) | 0));
                },
                Ylerp: function (y0, y1, x, v0, v1, f, c) {
                    var ym = FarseerPhysics.Common.MarchingSquares.Lerp(y0, y1, v0, v1);
                    if (c === 0) {
                        return ym;
                    }

                    var vm = f.get([Bridge.Int.clip32(x), Bridge.Int.clip32(ym)]);

                    if (v0 * vm < 0) {
                        return FarseerPhysics.Common.MarchingSquares.Ylerp(y0, ym, x, v0, vm, f, ((c - 1) | 0));
                    }

                    return FarseerPhysics.Common.MarchingSquares.Ylerp(ym, y1, x, vm, v1, f, ((c - 1) | 0));
                },
                Square: function (x) {
                    return x * x;
                },
                VecDsq: function (a, b) {
                    var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(a.$clone(), b.$clone());
                    return d.X * d.X + d.Y * d.Y;
                },
                VecCross: function (a, b) {
                    return a.X * b.Y - a.Y * b.X;
                },
                MarchSquare: function (f, fs, poly, ax, ay, x0, y0, x1, y1, bin) {
                    var key = 0;
                    var v0 = fs.get([ax, ay]);
                    if (v0 < 0) {
                        key = key | 8;
                    }
                    var v1 = fs.get([((ax + 1) | 0), ay]);
                    if (v1 < 0) {
                        key = key | 4;
                    }
                    var v2 = fs.get([((ax + 1) | 0), ((ay + 1) | 0)]);
                    if (v2 < 0) {
                        key = key | 2;
                    }
                    var v3 = fs.get([ax, ((ay + 1) | 0)]);
                    if (v3 < 0) {
                        key = key | 1;
                    }

                    var val = FarseerPhysics.Common.MarchingSquares._lookMarch[System.Array.index(key, FarseerPhysics.Common.MarchingSquares._lookMarch)];
                    if (val !== 0) {
                        var pi = null;
                        for (var i = 0; i < 8; i = (i + 1) | 0) {
                            var p = new Microsoft.Xna.Framework.Vector2();
                            if ((val & (1 << i)) !== 0) {
                                if (i === 7 && (val & 1) === 0) {
                                    poly.v.Points.Add((p = new Microsoft.Xna.Framework.Vector2.$ctor2(x0, FarseerPhysics.Common.MarchingSquares.Ylerp(y0, y1, x0, v0, v3, f, bin))).$clone());
                                } else {
                                    if (i === 0) {
                                        p = new Microsoft.Xna.Framework.Vector2.$ctor2(x0, y0);
                                    } else {
                                        if (i === 2) {
                                            p = new Microsoft.Xna.Framework.Vector2.$ctor2(x1, y0);
                                        } else {
                                            if (i === 4) {
                                                p = new Microsoft.Xna.Framework.Vector2.$ctor2(x1, y1);
                                            } else {
                                                if (i === 6) {
                                                    p = new Microsoft.Xna.Framework.Vector2.$ctor2(x0, y1);
                                                } else {
                                                    if (i === 1) {
                                                        p = new Microsoft.Xna.Framework.Vector2.$ctor2(FarseerPhysics.Common.MarchingSquares.Xlerp(x0, x1, y0, v0, v1, f, bin), y0);
                                                    } else {
                                                        if (i === 5) {
                                                            p = new Microsoft.Xna.Framework.Vector2.$ctor2(FarseerPhysics.Common.MarchingSquares.Xlerp(x0, x1, y1, v3, v2, f, bin), y1);
                                                        } else {
                                                            if (i === 3) {
                                                                p = new Microsoft.Xna.Framework.Vector2.$ctor2(x1, FarseerPhysics.Common.MarchingSquares.Ylerp(y0, y1, x1, v1, v2, f, bin));
                                                            } else {
                                                                p = new Microsoft.Xna.Framework.Vector2.$ctor2(x0, FarseerPhysics.Common.MarchingSquares.Ylerp(y0, y1, x0, v0, v3, f, bin));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    pi = poly.v.Points.Insert(pi, p.$clone());
                                }
                                poly.v.Length = (poly.v.Length + 1) | 0;
                            }
                        }
                    }
                    return key;
                },
                combLeft: function (polya, polyb) {
                    var ap = polya.v.Points;
                    var bp = polyb.v.Points;
                    var ai = ap.Begin();
                    var bi = bp.Begin();

                    var b = bi.Elem().$clone();
                    var prea = null;
                    while (!Bridge.referenceEquals(ai, ap.End())) {
                        var a = ai.Elem().$clone();
                        if (FarseerPhysics.Common.MarchingSquares.VecDsq(a.$clone(), b.$clone()) < FarseerPhysics.Settings.Epsilon) {
                            if (prea != null) {
                                var a0 = prea.Elem().$clone();
                                b = bi.Next().Elem().$clone();

                                var u = Microsoft.Xna.Framework.Vector2.op_Subtraction(a.$clone(), a0.$clone());
                                var v = Microsoft.Xna.Framework.Vector2.op_Subtraction(b.$clone(), a.$clone());
                                var dot = FarseerPhysics.Common.MarchingSquares.VecCross(u.$clone(), v.$clone());
                                if (dot * dot < FarseerPhysics.Settings.Epsilon) {
                                    ap.Erase(prea, ai);
                                    polya.v.Length = (polya.v.Length - 1) | 0;
                                    ai = prea;
                                }
                            }

                            var fst = true;
                            var preb = null;
                            while (!bp.Empty()) {
                                var bb = bp.Front().$clone();
                                bp.Pop();
                                if (!fst && !bp.Empty()) {
                                    ai = ap.Insert(ai, bb.$clone());
                                    polya.v.Length = (polya.v.Length + 1) | 0;
                                    preb = ai;
                                }
                                fst = false;
                            }

                            ai = ai.Next();
                            var a1 = ai.Elem().$clone();
                            ai = ai.Next();
                            if (Bridge.referenceEquals(ai, ap.End())) {
                                ai = ap.Begin();
                            }
                            var a2 = ai.Elem().$clone();
                            var a00 = preb.Elem().$clone();
                            var uu = Microsoft.Xna.Framework.Vector2.op_Subtraction(a1.$clone(), a00.$clone());
                            var vv = Microsoft.Xna.Framework.Vector2.op_Subtraction(a2.$clone(), a1.$clone());
                            var dot1 = FarseerPhysics.Common.MarchingSquares.VecCross(uu.$clone(), vv.$clone());
                            if (dot1 * dot1 < FarseerPhysics.Settings.Epsilon) {
                                ap.Erase(preb, preb.Next());
                                polya.v.Length = (polya.v.Length - 1) | 0;
                            }

                            return;
                        }
                        prea = ai;
                        ai = ai.Next();
                    }
                }
            }
        }
    });

    /**
     * Designed as a complete port of CxFastList from CxStd.
     *
     * @class FarseerPhysics.Common.MarchingSquares.CxFastList$1
     */
    Bridge.define("FarseerPhysics.Common.MarchingSquares.CxFastList$1", function (T) { return {
        $kind: "nested class",
        fields: {
            _head: null,
            _count: 0
        },
        methods: {
            /**
             * Iterator to start of list (O(1))
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @memberof FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @return  {FarseerPhysics.Common.MarchingSquares.CxFastListNode$1}
             */
            Begin: function () {
                return this._head;
            },
            /**
             * Iterator to end of list (O(1))
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @memberof FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @return  {FarseerPhysics.Common.MarchingSquares.CxFastListNode$1}
             */
            End: function () {
                return null;
            },
            /**
             * Returns first element of list (O(1))
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @memberof FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @return  {T}
             */
            Front: function () {
                return this._head.Elem();
            },
            /**
             * add object to list (O(1))
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @memberof FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @param   {T}                                                         value
             * @return  {FarseerPhysics.Common.MarchingSquares.CxFastListNode$1}
             */
            Add: function (value) {
                var newNode = new (FarseerPhysics.Common.MarchingSquares.CxFastListNode$1(T))(value);
                if (this._head == null) {
                    newNode._next = null;
                    this._head = newNode;
                    this._count = (this._count + 1) | 0;
                    return newNode;
                }
                newNode._next = this._head;
                this._head = newNode;

                this._count = (this._count + 1) | 0;

                return newNode;
            },
            /**
             * remove object from list, returns true if an element was removed (O(n))
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @memberof FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @param   {T}          value
             * @return  {boolean}
             */
            Remove: function (value) {
                var head = this._head;
                var prev = this._head;

                var comparer = System.Collections.Generic.EqualityComparer$1(T).def;

                if (head != null) {
                    if (value != null) {
                        do {
                            if (comparer.equals2(head._elt, value)) {
                                if (Bridge.referenceEquals(head, this._head)) {
                                    this._head = head._next;
                                    this._count = (this._count - 1) | 0;
                                    return true;
                                } else {
                                    prev._next = head._next;
                                    this._count = (this._count - 1) | 0;
                                    return true;
                                }
                            }
                            prev = head;
                            head = head._next;
                        } while (head != null);
                    }
                }
                return false;
            },
            /**
             * pop element from head of list (O(1)) Note: this does not return the object popped! 
             There is good reason to this, and it regards the Alloc list variants which guarantee 
             objects are released to the object pool. You do not want to retrieve an element 
             through pop or else that object may suddenly be used by another piece of code which 
             retrieves it from the object pool.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @memberof FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @return  {FarseerPhysics.Common.MarchingSquares.CxFastListNode$1}
             */
            Pop: function () {
                return this.Erase(null, this._head);
            },
            /**
             * insert object after 'node' returning an iterator to the inserted object.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @memberof FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @param   {FarseerPhysics.Common.MarchingSquares.CxFastListNode$1}    node     
             * @param   {T}                                                         value
             * @return  {FarseerPhysics.Common.MarchingSquares.CxFastListNode$1}
             */
            Insert: function (node, value) {
                if (node == null) {
                    return this.Add(value);
                }
                var newNode = new (FarseerPhysics.Common.MarchingSquares.CxFastListNode$1(T))(value);
                var nextNode = node._next;
                newNode._next = nextNode;
                node._next = newNode;

                this._count = (this._count + 1) | 0;

                return newNode;
            },
            /**
             * removes the element pointed to by 'node' with 'prev' being the previous iterator, 
             returning an iterator to the element following that of 'node' (O(1))
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @memberof FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @param   {FarseerPhysics.Common.MarchingSquares.CxFastListNode$1}    prev    
             * @param   {FarseerPhysics.Common.MarchingSquares.CxFastListNode$1}    node
             * @return  {FarseerPhysics.Common.MarchingSquares.CxFastListNode$1}
             */
            Erase: function (prev, node) {
                var nextNode = node._next;
                if (prev != null) {
                    prev._next = nextNode;
                } else {
                    if (this._head != null) {
                        this._head = this._head._next;
                    } else {
                        return null;
                    }
                }

                this._count = (this._count - 1) | 0;
                return nextNode;
            },
            /**
             * whether the list is empty (O(1))
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @memberof FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @return  {boolean}
             */
            Empty: function () {
                if (this._head == null) {
                    return true;
                }
                return false;
            },
            /**
             * computes size of list (O(n))
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @memberof FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @return  {number}
             */
            Size: function () {
                var i = this.Begin();
                var count = 0;

                do {
                    count = (count + 1) | 0;
                } while (i.Next() != null);

                return count;
            },
            /**
             * empty the list (O(1) if CxMixList, O(n) otherwise)
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @memberof FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @return  {void}
             */
            Clear: function () {
                var head = this._head;
                while (head != null) {
                    var node2 = head;
                    head = head._next;
                    node2._next = null;
                }
                this._head = null;
                this._count = 0;
            },
            /**
             * returns true if 'value' is an element of the list (O(n))
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @memberof FarseerPhysics.Common.MarchingSquares.CxFastList$1
             * @param   {T}          value
             * @return  {boolean}
             */
            Has: function (value) {
                return (this.Find(value) != null);
            },
            Find: function (value) {
                var head = this._head;
                var comparer = System.Collections.Generic.EqualityComparer$1(T).def;
                if (head != null) {
                    if (value != null) {
                        do {
                            if (comparer.equals2(head._elt, value)) {
                                return head;
                            }
                            head = head._next;
                        } while (!Bridge.referenceEquals(head, this._head));
                    } else {
                        do {
                            if (head._elt == null) {
                                return head;
                            }
                            head = head._next;
                        } while (!Bridge.referenceEquals(head, this._head));
                    }
                }
                return null;
            },
            GetListOfElements: function () {
                var list = new (System.Collections.Generic.List$1(T)).ctor();

                var iter = this.Begin();

                if (iter != null) {
                    do {
                        list.add(iter._elt);
                        iter = iter._next;
                    } while (iter != null);
                }
                return list;
            }
        }
    }; });

    Bridge.define("FarseerPhysics.Common.MarchingSquares.CxFastListNode$1", function (T) { return {
        $kind: "nested class",
        fields: {
            _elt: Bridge.getDefaultValue(T),
            _next: null
        },
        ctors: {
            ctor: function (obj) {
                this.$initialize();
                this._elt = obj;
            }
        },
        methods: {
            Elem: function () {
                return this._elt;
            },
            Next: function () {
                return this._next;
            }
        }
    }; });

    Bridge.define("FarseerPhysics.Common.MarchingSquares.GeomPoly", {
        $kind: "nested class",
        fields: {
            Length: 0,
            Points: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Points = new (FarseerPhysics.Common.MarchingSquares.CxFastList$1(Microsoft.Xna.Framework.Vector2))();
                this.Length = 0;
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.MarchingSquares.GeomPolyVal", {
        $kind: "nested class",
        fields: {
            Key: 0,
            GeomP: null
        },
        ctors: {
            ctor: function (geomP, K) {
                this.$initialize();
                this.GeomP = geomP;
                this.Key = K;
            }
        }
    });

    /**
     * A 2-by-2 matrix. Stored in column-major order.
     *
     * @public
     * @class FarseerPhysics.Common.Mat22
     */
    Bridge.define("FarseerPhysics.Common.Mat22", {
        $kind: "struct",
        statics: {
            methods: {
                Add: function (A, B, R) {
                    R.v.Col1 = Microsoft.Xna.Framework.Vector2.op_Addition(A.v.Col1.$clone(), B.v.Col1.$clone());
                    R.v.Col2 = Microsoft.Xna.Framework.Vector2.op_Addition(A.v.Col2.$clone(), B.v.Col2.$clone());
                },
                getDefaultValue: function () { return new FarseerPhysics.Common.Mat22(); }
            }
        },
        fields: {
            Col1: null,
            Col2: null
        },
        props: {
            /**
             * Extract the angle from this matrix (assumed to be
             a rotation matrix).
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Common.Mat22
             * @function Angle
             * @type number
             */
            Angle: {
                get: function () {
                    return Math.atan2(this.Col1.Y, this.Col1.X);
                }
            },
            Inverse: {
                get: function () {
                    var a = this.Col1.X, b = this.Col2.X, c = this.Col1.Y, d = this.Col2.Y;
                    var det = a * d - b * c;
                    if (det !== 0.0) {
                        det = 1.0 / det;
                    }

                    var result = new FarseerPhysics.Common.Mat22.ctor();
                    result.Col1.X = det * d;
                    result.Col1.Y = -det * c;

                    result.Col2.X = -det * b;
                    result.Col2.Y = det * a;

                    return result.$clone();
                }
            }
        },
        ctors: {
            init: function () {
                this.Col1 = new Microsoft.Xna.Framework.Vector2();
                this.Col2 = new Microsoft.Xna.Framework.Vector2();
            },
            /**
             * Construct this matrix using columns.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Mat22
             * @memberof FarseerPhysics.Common.Mat22
             * @param   {Microsoft.Xna.Framework.Vector2}    c1    The c1.
             * @param   {Microsoft.Xna.Framework.Vector2}    c2    The c2.
             * @return  {void}
             */
            $ctor1: function (c1, c2) {
                this.$initialize();
                this.Col1 = c1.$clone();
                this.Col2 = c2.$clone();
            },
            /**
             * Construct this matrix using scalars.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Mat22
             * @memberof FarseerPhysics.Common.Mat22
             * @param   {number}    a11    The a11.
             * @param   {number}    a12    The a12.
             * @param   {number}    a21    The a21.
             * @param   {number}    a22    The a22.
             * @return  {void}
             */
            $ctor3: function (a11, a12, a21, a22) {
                this.$initialize();
                this.Col1 = new Microsoft.Xna.Framework.Vector2.$ctor2(a11, a21);
                this.Col2 = new Microsoft.Xna.Framework.Vector2.$ctor2(a12, a22);
            },
            /**
             * Construct this matrix using an angle. This matrix becomes
             an orthonormal rotation matrix.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Mat22
             * @memberof FarseerPhysics.Common.Mat22
             * @param   {number}    angle    The angle.
             * @return  {void}
             */
            $ctor2: function (angle) {
                this.$initialize();
                var c = Math.cos(angle), s = Math.sin(angle);
                this.Col1 = new Microsoft.Xna.Framework.Vector2.$ctor2(c, s);
                this.Col2 = new Microsoft.Xna.Framework.Vector2.$ctor2(-s, c);
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            /**
             * Initialize this matrix using columns.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Mat22
             * @memberof FarseerPhysics.Common.Mat22
             * @param   {Microsoft.Xna.Framework.Vector2}    c1    The c1.
             * @param   {Microsoft.Xna.Framework.Vector2}    c2    The c2.
             * @return  {void}
             */
            Set: function (c1, c2) {
                this.Col1 = c1.$clone();
                this.Col2 = c2.$clone();
            },
            /**
             * Initialize this matrix using an angle. This matrix becomes
             an orthonormal rotation matrix.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Mat22
             * @memberof FarseerPhysics.Common.Mat22
             * @param   {number}    angle    The angle.
             * @return  {void}
             */
            Set$1: function (angle) {
                var c = Math.cos(angle), s = Math.sin(angle);
                this.Col1.X = c;
                this.Col2.X = -s;
                this.Col1.Y = s;
                this.Col2.Y = c;
            },
            /**
             * Set this to the identity matrix.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Mat22
             * @memberof FarseerPhysics.Common.Mat22
             * @return  {void}
             */
            SetIdentity: function () {
                this.Col1.X = 1.0;
                this.Col2.X = 0.0;
                this.Col1.Y = 0.0;
                this.Col2.Y = 1.0;
            },
            /**
             * Set this matrix to all zeros.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Mat22
             * @memberof FarseerPhysics.Common.Mat22
             * @return  {void}
             */
            SetZero: function () {
                this.Col1.X = 0.0;
                this.Col2.X = 0.0;
                this.Col1.Y = 0.0;
                this.Col2.Y = 0.0;
            },
            /**
             * Solve A * x = b, where b is a column vector. This is more efficient
             than computing the inverse in one-shot cases.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Mat22
             * @memberof FarseerPhysics.Common.Mat22
             * @param   {Microsoft.Xna.Framework.Vector2}    b    The b.
             * @return  {Microsoft.Xna.Framework.Vector2}
             */
            Solve: function (b) {
                var a11 = this.Col1.X, a12 = this.Col2.X, a21 = this.Col1.Y, a22 = this.Col2.Y;
                var det = a11 * a22 - a12 * a21;
                if (det !== 0.0) {
                    det = 1.0 / det;
                }

                return new Microsoft.Xna.Framework.Vector2.$ctor2(det * (a22 * b.X - a12 * b.Y), det * (a11 * b.Y - a21 * b.X));
            },
            getHashCode: function () {
                var h = Bridge.addHash([846487935, this.Col1, this.Col2]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Common.Mat22)) {
                    return false;
                }
                return Bridge.equals(this.Col1, o.Col1) && Bridge.equals(this.Col2, o.Col2);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Common.Mat22();
                s.Col1 = this.Col1.$clone();
                s.Col2 = this.Col2.$clone();
                return s;
            }
        }
    });

    /**
     * A 3-by-3 matrix. Stored in column-major order.
     *
     * @public
     * @class FarseerPhysics.Common.Mat33
     */
    Bridge.define("FarseerPhysics.Common.Mat33", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Common.Mat33(); }
            }
        },
        fields: {
            Col1: null,
            Col2: null,
            Col3: null
        },
        ctors: {
            init: function () {
                this.Col1 = new Microsoft.Xna.Framework.Vector3();
                this.Col2 = new Microsoft.Xna.Framework.Vector3();
                this.Col3 = new Microsoft.Xna.Framework.Vector3();
            },
            /**
             * Construct this matrix using columns.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Mat33
             * @memberof FarseerPhysics.Common.Mat33
             * @param   {Microsoft.Xna.Framework.Vector3}    c1    The c1.
             * @param   {Microsoft.Xna.Framework.Vector3}    c2    The c2.
             * @param   {Microsoft.Xna.Framework.Vector3}    c3    The c3.
             * @return  {void}
             */
            $ctor1: function (c1, c2, c3) {
                this.$initialize();
                this.Col1 = c1.$clone();
                this.Col2 = c2.$clone();
                this.Col3 = c3.$clone();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            /**
             * Set this matrix to all zeros.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Mat33
             * @memberof FarseerPhysics.Common.Mat33
             * @return  {void}
             */
            SetZero: function () {
                this.Col1 = Microsoft.Xna.Framework.Vector3.Zero.$clone();
                this.Col2 = Microsoft.Xna.Framework.Vector3.Zero.$clone();
                this.Col3 = Microsoft.Xna.Framework.Vector3.Zero.$clone();
            },
            /**
             * Solve A * x = b, where b is a column vector. This is more efficient
             than computing the inverse in one-shot cases.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Mat33
             * @memberof FarseerPhysics.Common.Mat33
             * @param   {Microsoft.Xna.Framework.Vector3}    b    The b.
             * @return  {Microsoft.Xna.Framework.Vector3}
             */
            Solve33: function (b) {
                var det = Microsoft.Xna.Framework.Vector3.Dot(this.Col1.$clone(), Microsoft.Xna.Framework.Vector3.Cross(this.Col2.$clone(), this.Col3.$clone()));
                if (det !== 0.0) {
                    det = 1.0 / det;
                }

                return new Microsoft.Xna.Framework.Vector3.$ctor3(det * Microsoft.Xna.Framework.Vector3.Dot(b.$clone(), Microsoft.Xna.Framework.Vector3.Cross(this.Col2.$clone(), this.Col3.$clone())), det * Microsoft.Xna.Framework.Vector3.Dot(this.Col1.$clone(), Microsoft.Xna.Framework.Vector3.Cross(b.$clone(), this.Col3.$clone())), det * Microsoft.Xna.Framework.Vector3.Dot(this.Col1.$clone(), Microsoft.Xna.Framework.Vector3.Cross(this.Col2.$clone(), b.$clone())));
            },
            /**
             * Solve A * x = b, where b is a column vector. This is more efficient
             than computing the inverse in one-shot cases. Solve only the upper
             2-by-2 matrix equation.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Mat33
             * @memberof FarseerPhysics.Common.Mat33
             * @param   {Microsoft.Xna.Framework.Vector2}    b    The b.
             * @return  {Microsoft.Xna.Framework.Vector2}
             */
            Solve22: function (b) {
                var a11 = this.Col1.X, a12 = this.Col2.X, a21 = this.Col1.Y, a22 = this.Col2.Y;
                var det = a11 * a22 - a12 * a21;

                if (det !== 0.0) {
                    det = 1.0 / det;
                }

                return new Microsoft.Xna.Framework.Vector2.$ctor2(det * (a22 * b.X - a12 * b.Y), det * (a11 * b.Y - a21 * b.X));
            },
            getHashCode: function () {
                var h = Bridge.addHash([863265152, this.Col1, this.Col2, this.Col3]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Common.Mat33)) {
                    return false;
                }
                return Bridge.equals(this.Col1, o.Col1) && Bridge.equals(this.Col2, o.Col2) && Bridge.equals(this.Col3, o.Col3);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Common.Mat33();
                s.Col1 = this.Col1.$clone();
                s.Col2 = this.Col2.$clone();
                s.Col3 = this.Col3.$clone();
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.MathUtils", {
        statics: {
            methods: {
                IsClose: function (v1, v2, tolerence) {
                    return (Microsoft.Xna.Framework.Vector2.Distance(v1.$clone(), v2.$clone()) < tolerence);
                },
                IsEqual: function (v1, v2) {
                    return (v1.X === v2.X && v1.Y === v2.Y);
                },
                CloneVector: function (vector) {
                    return new Microsoft.Xna.Framework.Vector2.$ctor2(vector.X, vector.Y);
                },
                VectorAngle$2: function (vector) {
                    return Math.atan2(vector.Y, vector.X);
                },
                /**
                 * Return the angle between two vectors on a plane
                 The angle is from vector 1 to vector 2, positive anticlockwise
                 The result is between -pi -&gt; pi
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.MathUtils
                 * @memberof FarseerPhysics.Common.MathUtils
                 * @param   {Microsoft.Xna.Framework.Vector2}    p1    
                 * @param   {Microsoft.Xna.Framework.Vector2}    p2
                 * @return  {number}
                 */
                VectorAngle$1: function (p1, p2) {
                    var theta1 = Math.atan2(p1.v.Y, p1.v.X);
                    var theta2 = Math.atan2(p2.v.Y, p2.v.X);
                    var dtheta = theta2 - theta1;
                    while (dtheta > Math.PI) {
                        dtheta -= (6.2831853071795862);
                    }
                    while (dtheta < -3.1415926535897931) {
                        dtheta += (6.2831853071795862);
                    }

                    return (dtheta);
                },
                VectorAngle: function (p1, p2) {
                    p1 = {v:p1};
                    p2 = {v:p2};
                    return FarseerPhysics.Common.MathUtils.VectorAngle$1(p1, p2);
                },
                /**
                 * Initialize a Vector using polar coordinate
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.MathUtils
                 * @memberof FarseerPhysics.Common.MathUtils
                 * @param   {number}                             radius    
                 * @param   {number}                             angle
                 * @return  {Microsoft.Xna.Framework.Vector2}
                 */
                VectorPolar: function (radius, angle) {
                    return new Microsoft.Xna.Framework.Vector2.$ctor2(radius * Math.cos(angle), radius * Math.sin(angle));
                },
                Cross$2: function (a, b) {
                    return a.X * b.Y - a.Y * b.X;
                },
                Cross: function (a, s) {
                    return new Microsoft.Xna.Framework.Vector2.$ctor2(s * a.Y, -s * a.X);
                },
                Cross$1: function (s, a) {
                    return new Microsoft.Xna.Framework.Vector2.$ctor2(-s * a.Y, s * a.X);
                },
                Cross$3: function (a, b, c) {
                    c.v = a.v.X * b.v.Y - a.v.Y * b.v.X;
                },
                Cross$4: function (s, a, b) {
                    b.v = new Microsoft.Xna.Framework.Vector2.$ctor2(-s * a.v.Y, s * a.v.X);
                },
                Abs: function (v) {
                    return new Microsoft.Xna.Framework.Vector2.$ctor2(Math.abs(v.X), Math.abs(v.Y));
                },
                Multiply: function (A, v) {
                    v = {v:v};
                    return FarseerPhysics.Common.MathUtils.Multiply$1(A, v);
                },
                Multiply$1: function (A, v) {
                    return new Microsoft.Xna.Framework.Vector2.$ctor2(A.v.Col1.X * v.v.X + A.v.Col2.X * v.v.Y, A.v.Col1.Y * v.v.X + A.v.Col2.Y * v.v.Y);
                },
                Multiply$2: function (T, v) {
                    v = {v:v};
                    return FarseerPhysics.Common.MathUtils.Multiply$3(T, v);
                },
                Multiply$3: function (T, v) {
                    return new Microsoft.Xna.Framework.Vector2.$ctor2(T.v.Position.X + T.v.R.Col1.X * v.v.X + T.v.R.Col2.X * v.v.Y, T.v.Position.Y + T.v.R.Col1.Y * v.v.X + T.v.R.Col2.Y * v.v.Y);
                },
                MultiplyT: function (A, v) {
                    v = {v:v};
                    return FarseerPhysics.Common.MathUtils.MultiplyT$1(A, v);
                },
                MultiplyT$1: function (A, v) {
                    return new Microsoft.Xna.Framework.Vector2.$ctor2(v.v.X * A.v.Col1.X + v.v.Y * A.v.Col1.Y, v.v.X * A.v.Col2.X + v.v.Y * A.v.Col2.Y);
                },
                MultiplyT$2: function (T, v) {
                    v = {v:v};
                    return FarseerPhysics.Common.MathUtils.MultiplyT$3(T, v);
                },
                MultiplyT$3: function (T, v) {
                    var tmp = { v : Microsoft.Xna.Framework.Vector2.Zero.$clone() };
                    tmp.v.X = v.v.X - T.v.Position.X;
                    tmp.v.Y = v.v.Y - T.v.Position.Y;
                    return FarseerPhysics.Common.MathUtils.MultiplyT$1(Bridge.ref(T.v, "R"), tmp);
                },
                MultiplyT$4: function (A, B, C) {
                    C.v = new FarseerPhysics.Common.Mat22.ctor();
                    C.v.Col1.X = A.v.Col1.X * B.v.Col1.X + A.v.Col1.Y * B.v.Col1.Y;
                    C.v.Col1.Y = A.v.Col2.X * B.v.Col1.X + A.v.Col2.Y * B.v.Col1.Y;
                    C.v.Col2.X = A.v.Col1.X * B.v.Col2.X + A.v.Col1.Y * B.v.Col2.Y;
                    C.v.Col2.Y = A.v.Col2.X * B.v.Col2.X + A.v.Col2.Y * B.v.Col2.Y;
                },
                MultiplyT$5: function (A, B, C) {
                    C.v = new FarseerPhysics.Common.Transform.ctor();
                    FarseerPhysics.Common.MathUtils.MultiplyT$4(Bridge.ref(A.v, "R"), Bridge.ref(B.v, "R"), Bridge.ref(C.v, "R"));
                    C.v.Position.X = B.v.Position.X - A.v.Position.X;
                    C.v.Position.Y = B.v.Position.Y - A.v.Position.Y;
                },
                Swap: function (T, a, b) {
                    var tmp = a.v;
                    a.v = b.v;
                    b.v = tmp;
                },
                /**
                 * This function is used to ensure that a floating point number is
                 not a NaN or infinity.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.MathUtils
                 * @memberof FarseerPhysics.Common.MathUtils
                 * @param   {number}     x    The x.
                 * @return  {boolean}         <pre><code>true</code></pre> if the specified x is valid; otherwise, <pre><code>false</code></pre>.
                 */
                IsValid$1: function (x) {
                    if (isNaN(x)) {
                        return false;
                    }

                    return !(Math.abs(x) === Number.POSITIVE_INFINITY);
                },
                IsValid: function (x) {
                    return FarseerPhysics.Common.MathUtils.IsValid$1(x.X) && FarseerPhysics.Common.MathUtils.IsValid$1(x.Y);
                },
                /**
                 * This is a approximate yet fast inverse square-root.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.MathUtils
                 * @memberof FarseerPhysics.Common.MathUtils
                 * @param   {number}    x    The x.
                 * @return  {number}
                 */
                InvSqrt: function (x) {
                    var convert = new FarseerPhysics.Common.MathUtils.FloatConverter();
                    convert.x = x;
                    var xhalf = 0.5 * x;
                    convert.i = (1597463007 - (convert.i >> 1)) | 0;
                    x = convert.x;
                    x = x * (1.5 - xhalf * x * x);
                    return x;
                },
                Clamp$1: function (a, low, high) {
                    return Math.max(low, Math.min(a, high));
                },
                Clamp$2: function (a, low, high) {
                    return Math.max(low, Math.min(a, high));
                },
                Clamp: function (a, low, high) {
                    return Microsoft.Xna.Framework.Vector2.Max(low.$clone(), Microsoft.Xna.Framework.Vector2.Min(a.$clone(), high.$clone()));
                },
                /**
                 * Returns a positive number if c is to the left of the line going from a to b.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.MathUtils
                 * @memberof FarseerPhysics.Common.MathUtils
                 * @param   {Microsoft.Xna.Framework.Vector2}    a    
                 * @param   {Microsoft.Xna.Framework.Vector2}    b    
                 * @param   {Microsoft.Xna.Framework.Vector2}    c
                 * @return  {number}                                  Positive number if point is left, negative if point is right, 
                 and 0 if points are collinear.
                 */
                Area: function (a, b, c) {
                    a = {v:a};
                    b = {v:b};
                    c = {v:c};
                    return FarseerPhysics.Common.MathUtils.Area$1(a, b, c);
                },
                /**
                 * Returns a positive number if c is to the left of the line going from a to b.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.MathUtils
                 * @memberof FarseerPhysics.Common.MathUtils
                 * @param   {Microsoft.Xna.Framework.Vector2}    a    
                 * @param   {Microsoft.Xna.Framework.Vector2}    b    
                 * @param   {Microsoft.Xna.Framework.Vector2}    c
                 * @return  {number}                                  Positive number if point is left, negative if point is right, 
                 and 0 if points are collinear.
                 */
                Area$1: function (a, b, c) {
                    return a.v.X * (b.v.Y - c.v.Y) + b.v.X * (c.v.Y - a.v.Y) + c.v.X * (a.v.Y - b.v.Y);
                },
                /**
                 * Determines if three vertices are collinear (ie. on a straight line)
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.MathUtils
                 * @memberof FarseerPhysics.Common.MathUtils
                 * @param   {Microsoft.Xna.Framework.Vector2}    a    First vertex
                 * @param   {Microsoft.Xna.Framework.Vector2}    b    Second vertex
                 * @param   {Microsoft.Xna.Framework.Vector2}    c    Third vertex
                 * @return  {boolean}
                 */
                Collinear: function (a, b, c) {
                    return FarseerPhysics.Common.MathUtils.Collinear$1(a, b, c, 0);
                },
                Collinear$1: function (a, b, c, tolerance) {
                    return FarseerPhysics.Common.MathUtils.FloatInRange(FarseerPhysics.Common.MathUtils.Area$1(a, b, c), -tolerance, tolerance);
                },
                FloatEquals: function (value1, value2) {
                    return Math.abs(value1 - value2) <= FarseerPhysics.Settings.Epsilon;
                },
                /**
                 * Checks if a floating point Value is equal to another,
                 within a certain tolerance.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.MathUtils
                 * @memberof FarseerPhysics.Common.MathUtils
                 * @param   {number}     value1    The first floating point Value.
                 * @param   {number}     value2    The second floating point Value.
                 * @param   {number}     delta     The floating point tolerance.
                 * @return  {boolean}              True if the values are "equal", false otherwise.
                 */
                FloatEquals$1: function (value1, value2, delta) {
                    return FarseerPhysics.Common.MathUtils.FloatInRange(value1, value2 - delta, value2 + delta);
                },
                /**
                 * Checks if a floating point Value is within a specified
                 range of values (inclusive).
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.MathUtils
                 * @memberof FarseerPhysics.Common.MathUtils
                 * @param   {number}     value    The Value to check.
                 * @param   {number}     min      The minimum Value.
                 * @param   {number}     max      The maximum Value.
                 * @return  {boolean}             True if the Value is within the range specified,
                 false otherwise.
                 */
                FloatInRange: function (value, min, max) {
                    return (value >= min && value <= max);
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.MathUtils.FloatConverter", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Common.MathUtils.FloatConverter(); }
            }
        },
        fields: {
            x: 0,
            i: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5441161109, this.x, this.i]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Common.MathUtils.FloatConverter)) {
                    return false;
                }
                return Bridge.equals(this.x, o.x) && Bridge.equals(this.i, o.i);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Common.MathUtils.FloatConverter();
                s.x = this.x;
                s.i = this.i;
                return s;
            }
        }
    });

    /**
     * @memberof FarseerPhysics.Common
     * @callback FarseerPhysics.Common.TerrainTester
     * @param   {Microsoft.Xna.Framework.Color}    Color
     * @return  {boolean}
     */

    /**
     * Simple class to maintain a terrain.
     *
     * @public
     * @class FarseerPhysics.Common.MSTerrain
     */
    Bridge.define("FarseerPhysics.Common.MSTerrain", {
        statics: {
            methods: {
                /**
                 * Convert a texture to an sbtye array compatible with ApplyData().
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.MSTerrain
                 * @memberof FarseerPhysics.Common.MSTerrain
                 * @param   {Microsoft.Xna.Framework.Graphics.Texture2D}    texture    Texture to convert.
                 * @param   {FarseerPhysics.Common.TerrainTester}           tester
                 * @return  {Array.<number>}
                 */
                ConvertTextureToData: function (texture, tester) {
                    var data = System.Array.create(0, null, System.SByte, texture.Width, texture.Height);
                    var colorData = System.Array.init(Bridge.Int.mul(texture.Width, texture.Height), function (){
                        return new Microsoft.Xna.Framework.Color();
                    }, Microsoft.Xna.Framework.Color);

                    texture.GetData(Bridge.global.Microsoft.Xna.Framework.Color, colorData);

                    for (var y = 0; y < texture.Height; y = (y + 1) | 0) {
                        for (var x = 0; x < texture.Width; x = (x + 1) | 0) {
                            var inside = tester(colorData[System.Array.index((((Bridge.Int.mul(y, texture.Width)) + x) | 0), colorData)].$clone());

                            if (!inside) {
                                data.set([x, y], 1);
                            } else {
                                data.set([x, y], -1);
                            }
                        }
                    }

                    return data;
                }
            }
        },
        fields: {
            /**
             * World to manage terrain in.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.MSTerrain
             * @type FarseerPhysics.Dynamics.World
             */
            World: null,
            /**
             * Center of terrain in world units.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.MSTerrain
             * @type Microsoft.Xna.Framework.Vector2
             */
            Center: null,
            /**
             * Width of terrain in world units.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.MSTerrain
             * @type number
             */
            Width: 0,
            /**
             * Height of terrain in world units.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.MSTerrain
             * @type number
             */
            Height: 0,
            /**
             * Points per each world unit used to define the terrain in the point cloud.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.MSTerrain
             * @type number
             */
            PointsPerUnit: 0,
            /**
             * Points per cell.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.MSTerrain
             * @type number
             */
            CellSize: 0,
            /**
             * Points per sub cell.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.MSTerrain
             * @type number
             */
            SubCellSize: 0,
            /**
             * Number of iterations to perform in the Marching Squares algorithm.
             Note: More then 3 has almost no effect on quality.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.MSTerrain
             * @default 2
             * @type number
             */
            Iterations: 0,
            /**
             * Decomposer to use when regenerating terrain. Can be changed on the fly without consequence.
             Note: Some decomposerers are unstable.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.MSTerrain
             * @type FarseerPhysics.Common.Decomposer
             */
            Decomposer: 0,
            /**
             * Point cloud defining the terrain.
             *
             * @instance
             * @private
             * @memberof FarseerPhysics.Common.MSTerrain
             * @type Array.<number>
             */
            _terrainMap: null,
            /**
             * Generated bodies.
             *
             * @instance
             * @private
             * @memberof FarseerPhysics.Common.MSTerrain
             * @type Array.<System.Collections.Generic.List$1>
             */
            _bodyMap: null,
            _localWidth: 0,
            _localHeight: 0,
            _xnum: 0,
            _ynum: 0,
            _dirtyArea: null,
            _topLeft: null
        },
        ctors: {
            init: function () {
                this.Center = new Microsoft.Xna.Framework.Vector2();
                this._dirtyArea = new FarseerPhysics.Collision.AABB();
                this._topLeft = new Microsoft.Xna.Framework.Vector2();
                this.Iterations = 2;
            },
            ctor: function (world, area) {
                this.$initialize();
                this.World = world;
                this.Width = area.Extents.X * 2;
                this.Height = area.Extents.Y * 2;
                this.Center = area.Center.$clone();
            }
        },
        methods: {
            /**
             * Initialize the terrain for use.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MSTerrain
             * @memberof FarseerPhysics.Common.MSTerrain
             * @return  {void}
             */
            Initialize: function () {
                this._topLeft = new Microsoft.Xna.Framework.Vector2.$ctor2(this.Center.X - (this.Width * 0.5), this.Center.Y - (-this.Height * 0.5));

                this._localWidth = this.Width * this.PointsPerUnit;
                this._localHeight = this.Height * this.PointsPerUnit;

                this._terrainMap = System.Array.create(0, null, System.SByte, ((Bridge.Int.clip32(this._localWidth) + 1) | 0), ((Bridge.Int.clip32(this._localHeight) + 1) | 0));

                for (var x = 0; x < this._localWidth; x = (x + 1) | 0) {
                    for (var y = 0; y < this._localHeight; y = (y + 1) | 0) {
                        this._terrainMap.set([x, y], 1);
                    }
                }

                this._xnum = Bridge.Int.clip32(this._localWidth / this.CellSize);
                this._ynum = Bridge.Int.clip32(this._localHeight / this.CellSize);
                this._bodyMap = System.Array.create(null, null, System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Body), this._xnum, this._ynum);

                this._dirtyArea = new FarseerPhysics.Collision.AABB.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(3.40282347E+38, 3.40282347E+38), new Microsoft.Xna.Framework.Vector2.$ctor2(-3.40282347E+38, -3.40282347E+38));
            },
            /**
             * Apply a texture to the terrain using the specified TerrainTester.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MSTerrain
             * @memberof FarseerPhysics.Common.MSTerrain
             * @param   {Microsoft.Xna.Framework.Graphics.Texture2D}    texture     Texture to apply.
             * @param   {Microsoft.Xna.Framework.Vector2}               position    Top left position of the texture relative to the terrain.
             * @param   {FarseerPhysics.Common.TerrainTester}           tester      Delegate method used to determine what colors should be included in the terrain.
             * @return  {void}
             */
            ApplyTexture: function (texture, position, tester) {
                var colorData = System.Array.init(Bridge.Int.mul(texture.Width, texture.Height), function (){
                    return new Microsoft.Xna.Framework.Color();
                }, Microsoft.Xna.Framework.Color);

                texture.GetData(Bridge.global.Microsoft.Xna.Framework.Color, colorData);

                for (var y = Bridge.Int.clip32(position.Y); y < ((texture.Height + Bridge.Int.clip32(position.Y)) | 0); y = (y + 1) | 0) {
                    for (var x = Bridge.Int.clip32(position.X); x < ((texture.Width + Bridge.Int.clip32(position.X)) | 0); x = (x + 1) | 0) {
                        if (x >= 0 && x < this._localWidth && y >= 0 && y < this._localHeight) {
                            var inside = tester(colorData[System.Array.index((((Bridge.Int.mul((((y - Bridge.Int.clip32(position.Y)) | 0)), texture.Width)) + (((x - Bridge.Int.clip32(position.X)) | 0))) | 0), colorData)].$clone());

                            if (!inside) {
                                this._terrainMap.set([x, y], 1);
                            } else {
                                this._terrainMap.set([x, y], -1);
                            }
                        }
                    }
                }

                for (var gy = 0; gy < this._ynum; gy = (gy + 1) | 0) {
                    for (var gx = 0; gx < this._xnum; gx = (gx + 1) | 0) {
                        if (this._bodyMap.get([gx, gy]) != null) {
                            for (var i = 0; i < this._bodyMap.get([gx, gy]).Count; i = (i + 1) | 0) {
                                this.World.RemoveBody(this._bodyMap.get([gx, gy]).getItem(i));
                            }
                        }

                        this._bodyMap.set([gx, gy], null);

                        this.GenerateTerrain(gx, gy);
                    }
                }
            },
            /**
             * Apply a texture to the terrain using the specified TerrainTester.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MSTerrain
             * @memberof FarseerPhysics.Common.MSTerrain
             * @param   {Array.<number>}                     data        
             * @param   {Microsoft.Xna.Framework.Vector2}    position    Top left position of the texture relative to the terrain.
             * @return  {void}
             */
            ApplyData: function (data, position) {
                for (var y = Bridge.Int.clip32(position.Y); y < (((System.Array.getLength(data, 1) - 1) + Bridge.Int.clip32(position.Y)) | 0); y = (y + 1) | 0) {
                    for (var x = Bridge.Int.clip32(position.X); x < (((System.Array.getLength(data, 0) - 1) + Bridge.Int.clip32(position.X)) | 0); x = (x + 1) | 0) {
                        if (x >= 0 && x < this._localWidth && y >= 0 && y < this._localHeight) {
                            this._terrainMap.set([x, y], data.get([x, y]));
                        }
                    }
                }

                for (var gy = 0; gy < this._ynum; gy = (gy + 1) | 0) {
                    for (var gx = 0; gx < this._xnum; gx = (gx + 1) | 0) {
                        if (this._bodyMap.get([gx, gy]) != null) {
                            for (var i = 0; i < this._bodyMap.get([gx, gy]).Count; i = (i + 1) | 0) {
                                this.World.RemoveBody(this._bodyMap.get([gx, gy]).getItem(i));
                            }
                        }

                        this._bodyMap.set([gx, gy], null);

                        this.GenerateTerrain(gx, gy);
                    }
                }
            },
            /**
             * Modify a single point in the terrain.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MSTerrain
             * @memberof FarseerPhysics.Common.MSTerrain
             * @param   {Microsoft.Xna.Framework.Vector2}    location    World location to modify. Automatically clipped.
             * @param   {number}                             value       -1 = inside terrain, 1 = outside terrain
             * @return  {void}
             */
            ModifyTerrain: function (location, value) {
                var p = Microsoft.Xna.Framework.Vector2.op_Subtraction(location.$clone(), this._topLeft.$clone());

                p.X = p.X * this._localWidth / this.Width;
                p.Y = p.Y * -this._localHeight / this.Height;

                if (p.X >= 0 && p.X < this._localWidth && p.Y >= 0 && p.Y < this._localHeight) {
                    this._terrainMap.set([Bridge.Int.clip32(p.X), Bridge.Int.clip32(p.Y)], value);

                    if (p.X < this._dirtyArea.LowerBound.X) {
                        this._dirtyArea.LowerBound.X = p.X;
                    }
                    if (p.X > this._dirtyArea.UpperBound.X) {
                        this._dirtyArea.UpperBound.X = p.X;
                    }

                    if (p.Y < this._dirtyArea.LowerBound.Y) {
                        this._dirtyArea.LowerBound.Y = p.Y;
                    }
                    if (p.Y > this._dirtyArea.UpperBound.Y) {
                        this._dirtyArea.UpperBound.Y = p.Y;
                    }
                }
            },
            /**
             * Regenerate the terrain.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.MSTerrain
             * @memberof FarseerPhysics.Common.MSTerrain
             * @return  {void}
             */
            RegenerateTerrain: function () {
                var gx0 = Bridge.Int.clip32(this._dirtyArea.LowerBound.X / this.CellSize);
                var gx1 = (Bridge.Int.clip32((this._dirtyArea.UpperBound.X / this.CellSize)) + 1) | 0;
                if (gx0 < 0) {
                    gx0 = 0;
                }
                if (gx1 > this._xnum) {
                    gx1 = this._xnum;
                }
                var gy0 = Bridge.Int.clip32(this._dirtyArea.LowerBound.Y / this.CellSize);
                var gy1 = (Bridge.Int.clip32((this._dirtyArea.UpperBound.Y / this.CellSize)) + 1) | 0;
                if (gy0 < 0) {
                    gy0 = 0;
                }
                if (gy1 > this._ynum) {
                    gy1 = this._ynum;
                }

                for (var gx = gx0; gx < gx1; gx = (gx + 1) | 0) {
                    for (var gy = gy0; gy < gy1; gy = (gy + 1) | 0) {
                        if (this._bodyMap.get([gx, gy]) != null) {
                            for (var i = 0; i < this._bodyMap.get([gx, gy]).Count; i = (i + 1) | 0) {
                                this.World.RemoveBody(this._bodyMap.get([gx, gy]).getItem(i));
                            }
                        }

                        this._bodyMap.set([gx, gy], null);

                        this.GenerateTerrain(gx, gy);
                    }
                }

                this._dirtyArea = new FarseerPhysics.Collision.AABB.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(3.40282347E+38, 3.40282347E+38), new Microsoft.Xna.Framework.Vector2.$ctor2(-3.40282347E+38, -3.40282347E+38));
            },
            GenerateTerrain: function (gx, gy) {
                var $t, $t1;
                var ax = Bridge.Int.mul(gx, this.CellSize);
                var ay = Bridge.Int.mul(gy, this.CellSize);

                var polys = FarseerPhysics.Common.MarchingSquares.DetectSquares(new FarseerPhysics.Collision.AABB.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(ax, ay), new Microsoft.Xna.Framework.Vector2.$ctor2(ax + this.CellSize, ay + this.CellSize)), this.SubCellSize, this.SubCellSize, this._terrainMap, this.Iterations, true);
                if (polys.Count === 0) {
                    return;
                }

                this._bodyMap.set([gx, gy], new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Body)).ctor());

                var scale = { v : new Microsoft.Xna.Framework.Vector2.$ctor2(1.0 / this.PointsPerUnit, 1.0 / ((-this.PointsPerUnit) | 0)) };

                $t = Bridge.getEnumerator(polys);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        item.Scale(scale);
                        item.Translate$1(Bridge.ref(this, "_topLeft"));
                        item.ForceCounterClockWise();
                        var p = FarseerPhysics.Common.PolygonManipulation.SimplifyTools.CollinearSimplify(item);
                        var decompPolys = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();

                        switch (this.Decomposer) {
                            case FarseerPhysics.Common.Decomposer.Bayazit: 
                                decompPolys = FarseerPhysics.Common.Decomposition.BayazitDecomposer.ConvexPartition(p);
                                break;
                            case FarseerPhysics.Common.Decomposer.CDT: 
                                decompPolys = FarseerPhysics.Common.Decomposition.CDTDecomposer.ConvexPartition$1(p);
                                break;
                            case FarseerPhysics.Common.Decomposer.Earclip: 
                                decompPolys = FarseerPhysics.Common.Decomposition.EarclipDecomposer.ConvexPartition(p);
                                break;
                            case FarseerPhysics.Common.Decomposer.Flipcode: 
                                decompPolys = FarseerPhysics.Common.Decomposition.FlipcodeDecomposer.ConvexPartition(p);
                                break;
                            case FarseerPhysics.Common.Decomposer.Seidel: 
                                decompPolys = FarseerPhysics.Common.Decomposition.SeidelDecomposer.ConvexPartition(p, 0.001);
                                break;
                            default: 
                                break;
                        }

                        $t1 = Bridge.getEnumerator(decompPolys);
                        try {
                            while ($t1.moveNext()) {
                                var poly = $t1.Current;
                                if (poly.Count > 2) {
                                    this._bodyMap.get([gx, gy]).add(FarseerPhysics.Factories.BodyFactory.CreatePolygon(this.World, poly, 1));
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }}
        }
    });

    /** @namespace FarseerPhysics.Dynamics */

    /**
     * Contains filter data that can determine whether an object should be processed or not.
     *
     * @abstract
     * @public
     * @class FarseerPhysics.Dynamics.FilterData
     */
    Bridge.define("FarseerPhysics.Dynamics.FilterData", {
        fields: {
            DisabledOnCategories: 0,
            DisabledOnGroup: 0,
            EnabledOnCategories: 0,
            EnabledOnGroup: 0
        },
        ctors: {
            init: function () {
                this.DisabledOnCategories = FarseerPhysics.Dynamics.Category.None;
                this.EnabledOnCategories = FarseerPhysics.Dynamics.Category.All;
            }
        },
        methods: {
            IsActiveOn: function (body) {
                var $t;
                if (body == null || !body.Enabled || body.IsStatic) {
                    return false;
                }

                if (body.FixtureList == null) {
                    return false;
                }

                $t = Bridge.getEnumerator(body.FixtureList);
                try {
                    while ($t.moveNext()) {
                        var fixture = $t.Current;
                        if ((fixture.CollisionGroup === this.DisabledOnGroup) && fixture.CollisionGroup !== 0 && this.DisabledOnGroup !== 0) {
                            return false;
                        }

                        if ((fixture.CollisionCategories & this.DisabledOnCategories) !== FarseerPhysics.Dynamics.Category.None) {
                            return false;
                        }

                        if (this.EnabledOnGroup !== 0 || this.EnabledOnCategories !== FarseerPhysics.Dynamics.Category.All) {
                            if ((fixture.CollisionGroup === this.EnabledOnGroup) && fixture.CollisionGroup !== 0 && this.EnabledOnGroup !== 0) {
                                return true;
                            }

                            if ((fixture.CollisionCategories & this.EnabledOnCategories) !== FarseerPhysics.Dynamics.Category.None && this.EnabledOnCategories !== FarseerPhysics.Dynamics.Category.All) {
                                return true;
                            }
                        } else {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return false;
            },
            /**
             * Adds the category.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.FilterData
             * @memberof FarseerPhysics.Dynamics.FilterData
             * @param   {FarseerPhysics.Dynamics.Category}    category    The category.
             * @return  {void}
             */
            AddDisabledCategory: function (category) {
                this.DisabledOnCategories |= category;
            },
            /**
             * Removes the category.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.FilterData
             * @memberof FarseerPhysics.Dynamics.FilterData
             * @param   {FarseerPhysics.Dynamics.Category}    category    The category.
             * @return  {void}
             */
            RemoveDisabledCategory: function (category) {
                this.DisabledOnCategories &= ~category;
            },
            /**
             * Determines whether this body ignores the the specified controller.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.FilterData
             * @memberof FarseerPhysics.Dynamics.FilterData
             * @param   {FarseerPhysics.Dynamics.Category}    category    The category.
             * @return  {boolean}                                         <pre><code>true</code></pre> if the object has the specified category; otherwise, <pre><code>false</code></pre>.
             */
            IsInDisabledCategory: function (category) {
                return (this.DisabledOnCategories & category) === category;
            },
            /**
             * Adds the category.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.FilterData
             * @memberof FarseerPhysics.Dynamics.FilterData
             * @param   {FarseerPhysics.Dynamics.Category}    category    The category.
             * @return  {void}
             */
            AddEnabledCategory: function (category) {
                this.EnabledOnCategories |= category;
            },
            /**
             * Removes the category.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.FilterData
             * @memberof FarseerPhysics.Dynamics.FilterData
             * @param   {FarseerPhysics.Dynamics.Category}    category    The category.
             * @return  {void}
             */
            RemoveEnabledCategory: function (category) {
                this.EnabledOnCategories &= ~category;
            },
            /**
             * Determines whether this body ignores the the specified controller.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.FilterData
             * @memberof FarseerPhysics.Dynamics.FilterData
             * @param   {FarseerPhysics.Dynamics.Category}    category    The category.
             * @return  {boolean}                                         <pre><code>true</code></pre> if the object has the specified category; otherwise, <pre><code>false</code></pre>.
             */
            IsInEnabledCategory: function (category) {
                return (this.EnabledOnCategories & category) === category;
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter(); }
            }
        },
        fields: {
            ControllerIgnores: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            /**
             * Ignores the controller. The controller has no effect on this body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter
             * @memberof FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter
             * @param   {FarseerPhysics.Common.PhysicsLogic.PhysicsLogicType}    type    The logic type.
             * @return  {void}
             */
            IgnorePhysicsLogic: function (type) {
                this.ControllerIgnores |= type;
            },
            /**
             * Restore the controller. The controller affects this body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter
             * @memberof FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter
             * @param   {FarseerPhysics.Common.PhysicsLogic.PhysicsLogicType}    type    The logic type.
             * @return  {void}
             */
            RestorePhysicsLogic: function (type) {
                this.ControllerIgnores &= ~type;
            },
            /**
             * Determines whether this body ignores the the specified controller.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter
             * @memberof FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter
             * @param   {FarseerPhysics.Common.PhysicsLogic.PhysicsLogicType}    type    The logic type.
             * @return  {boolean}                                                        <pre><code>true</code></pre> if the body has the specified flag; otherwise, <pre><code>false</code></pre>.
             */
            IsPhysicsLogicIgnored: function (type) {
                return (this.ControllerIgnores & type) === type;
            },
            getHashCode: function () {
                var h = Bridge.addHash([6841110227, this.ControllerIgnores]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter)) {
                    return false;
                }
                return Bridge.equals(this.ControllerIgnores, o.ControllerIgnores);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter();
                s.ControllerIgnores = this.ControllerIgnores;
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.PhysicsLogic.PhysicsLogicType", {
        $kind: "enum",
        statics: {
            fields: {
                Explosion: 1
            }
        },
        $flags: true
    });

    /** @namespace FarseerPhysics.Common.PhysicsLogic */

    /**
     * This is a comprarer used for 
     detecting angle difference between rays
     *
     * @class FarseerPhysics.Common.PhysicsLogic.RayDataComparer
     * @implements  System.Collections.Generic.IComparer$1
     */
    Bridge.define("FarseerPhysics.Common.PhysicsLogic.RayDataComparer", {
        inherits: [System.Collections.Generic.IComparer$1(System.Single)],
        alias: ["System$Collections$Generic$IComparer$1$System$Single$compare", "System$Collections$Generic$IComparer$1$compare"],
        methods: {
            System$Collections$Generic$IComparer$1$System$Single$compare: function (a, b) {
                var diff = (a - b);
                if (diff > 0) {
                    return 1;
                }
                if (diff < 0) {
                    return -1;
                }
                return 0;
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.PhysicsLogic.ShapeData", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Common.PhysicsLogic.ShapeData(); }
            }
        },
        fields: {
            Body: null,
            Max: 0,
            Min: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3837963545, this.Body, this.Max, this.Min]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Common.PhysicsLogic.ShapeData)) {
                    return false;
                }
                return Bridge.equals(this.Body, o.Body) && Bridge.equals(this.Max, o.Max) && Bridge.equals(this.Min, o.Min);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Common.PhysicsLogic.ShapeData();
                s.Body = this.Body;
                s.Max = this.Max;
                s.Min = this.Min;
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.PolygonManipulation.CuttingTools", {
        statics: {
            methods: {
                /**
                 * Split a fixture into 2 vertice collections using the given entry and exit-point.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonManipulation.CuttingTools
                 * @memberof FarseerPhysics.Common.PolygonManipulation.CuttingTools
                 * @param   {FarseerPhysics.Dynamics.Fixture}    fixture       The Fixture to split
                 * @param   {Microsoft.Xna.Framework.Vector2}    entryPoint    The entry point - The start point
                 * @param   {Microsoft.Xna.Framework.Vector2}    exitPoint     The exit point - The end point
                 * @param   {number}                             splitSize     The size of the split. Think of this as the laser-width
                 * @param   {FarseerPhysics.Common.Vertices}     first         The first collection of vertexes
                 * @param   {FarseerPhysics.Common.Vertices}     second        The second collection of vertexes
                 * @return  {void}
                 */
                SplitShape: function (fixture, entryPoint, exitPoint, splitSize, first, second) {
                    entryPoint = {v:entryPoint};
                    exitPoint = {v:exitPoint};
                    var localEntryPoint = fixture.Body.GetLocalPoint$1(entryPoint);
                    var localExitPoint = fixture.Body.GetLocalPoint$1(exitPoint);

                    var shape = Bridge.as(fixture.Shape, FarseerPhysics.Collision.Shapes.PolygonShape);

                    if (shape == null) {
                        first.v = new FarseerPhysics.Common.Vertices.ctor();
                        second.v = new FarseerPhysics.Common.Vertices.ctor();
                        return;
                    }

                    var vertices = new FarseerPhysics.Common.Vertices.$ctor2(shape.Vertices);
                    var newPolygon = System.Array.init(2, null, FarseerPhysics.Common.Vertices);

                    for (var i = 0; i < newPolygon.length; i = (i + 1) | 0) {
                        newPolygon[System.Array.index(i, newPolygon)] = new FarseerPhysics.Common.Vertices.$ctor3(vertices.Count);
                    }

                    var cutAdded = System.Array.init([-1, -1], System.Int32);
                    var last = -1;
                    for (var i1 = 0; i1 < vertices.Count; i1 = (i1 + 1) | 0) {
                        var n;
                        if (Microsoft.Xna.Framework.Vector2.Dot(FarseerPhysics.Common.MathUtils.Cross(Microsoft.Xna.Framework.Vector2.op_Subtraction(localExitPoint.$clone(), localEntryPoint.$clone()), 1), Microsoft.Xna.Framework.Vector2.op_Subtraction(vertices.getItem(i1).$clone(), localEntryPoint.$clone())) > FarseerPhysics.Settings.Epsilon) {
                            n = 0;
                        } else {
                            n = 1;
                        }

                        if (last !== n) {
                            if (last === 0) {
                                System.Diagnostics.Debug.Assert(cutAdded[System.Array.index(0, cutAdded)] === -1);
                                cutAdded[System.Array.index(0, cutAdded)] = newPolygon[System.Array.index(last, newPolygon)].Count;
                                newPolygon[System.Array.index(last, newPolygon)].add(localExitPoint.$clone());
                                newPolygon[System.Array.index(last, newPolygon)].add(localEntryPoint.$clone());
                            }
                            if (last === 1) {
                                System.Diagnostics.Debug.Assert(cutAdded[System.Array.index(last, cutAdded)] === -1);
                                cutAdded[System.Array.index(last, cutAdded)] = newPolygon[System.Array.index(last, newPolygon)].Count;
                                newPolygon[System.Array.index(last, newPolygon)].add(localEntryPoint.$clone());
                                newPolygon[System.Array.index(last, newPolygon)].add(localExitPoint.$clone());
                            }
                        }

                        newPolygon[System.Array.index(n, newPolygon)].add(vertices.getItem(i1).$clone());
                        last = n;
                    }

                    if (cutAdded[System.Array.index(0, cutAdded)] === -1) {
                        cutAdded[System.Array.index(0, cutAdded)] = newPolygon[System.Array.index(0, newPolygon)].Count;
                        newPolygon[System.Array.index(0, newPolygon)].add(localExitPoint.$clone());
                        newPolygon[System.Array.index(0, newPolygon)].add(localEntryPoint.$clone());
                    }
                    if (cutAdded[System.Array.index(1, cutAdded)] === -1) {
                        cutAdded[System.Array.index(1, cutAdded)] = newPolygon[System.Array.index(1, newPolygon)].Count;
                        newPolygon[System.Array.index(1, newPolygon)].add(localEntryPoint.$clone());
                        newPolygon[System.Array.index(1, newPolygon)].add(localExitPoint.$clone());
                    }

                    for (var n1 = 0; n1 < 2; n1 = (n1 + 1) | 0) {
                        var offset = new Microsoft.Xna.Framework.Vector2();
                        if (cutAdded[System.Array.index(n1, cutAdded)] > 0) {
                            offset = (Microsoft.Xna.Framework.Vector2.op_Subtraction(newPolygon[System.Array.index(n1, newPolygon)].getItem(((cutAdded[System.Array.index(n1, cutAdded)] - 1) | 0)).$clone(), newPolygon[System.Array.index(n1, newPolygon)].getItem(cutAdded[System.Array.index(n1, cutAdded)]).$clone()));
                        } else {
                            offset = (Microsoft.Xna.Framework.Vector2.op_Subtraction(newPolygon[System.Array.index(n1, newPolygon)].getItem(((newPolygon[System.Array.index(n1, newPolygon)].Count - 1) | 0)).$clone(), newPolygon[System.Array.index(n1, newPolygon)].getItem(0).$clone()));
                        }
                        offset.Normalize();

                        newPolygon[System.Array.index(n1, newPolygon)].setItem(cutAdded[System.Array.index(n1, cutAdded)], Microsoft.Xna.Framework.Vector2.op_Addition(newPolygon[System.Array.index(n1, newPolygon)].getItem(cutAdded[System.Array.index(n1, cutAdded)]).$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(splitSize, offset.$clone())));

                        if (cutAdded[System.Array.index(n1, cutAdded)] < ((newPolygon[System.Array.index(n1, newPolygon)].Count - 2) | 0)) {
                            offset = (Microsoft.Xna.Framework.Vector2.op_Subtraction(newPolygon[System.Array.index(n1, newPolygon)].getItem(((cutAdded[System.Array.index(n1, cutAdded)] + 2) | 0)).$clone(), newPolygon[System.Array.index(n1, newPolygon)].getItem(((cutAdded[System.Array.index(n1, cutAdded)] + 1) | 0)).$clone()));
                        } else {
                            offset = (Microsoft.Xna.Framework.Vector2.op_Subtraction(newPolygon[System.Array.index(n1, newPolygon)].getItem(0).$clone(), newPolygon[System.Array.index(n1, newPolygon)].getItem(((newPolygon[System.Array.index(n1, newPolygon)].Count - 1) | 0)).$clone()));
                        }
                        offset.Normalize();

                        newPolygon[System.Array.index(n1, newPolygon)].setItem(((cutAdded[System.Array.index(n1, cutAdded)] + 1) | 0), Microsoft.Xna.Framework.Vector2.op_Addition(newPolygon[System.Array.index(n1, newPolygon)].getItem(((cutAdded[System.Array.index(n1, cutAdded)] + 1) | 0)).$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(splitSize, offset.$clone())));
                    }

                    first.v = newPolygon[System.Array.index(0, newPolygon)];
                    second.v = newPolygon[System.Array.index(1, newPolygon)];
                },
                /**
                 * This is a high-level function to cuts fixtures inside the given world, using the start and end points.
                 Note: We don't support cutting when the start or end is inside a shape.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonManipulation.CuttingTools
                 * @memberof FarseerPhysics.Common.PolygonManipulation.CuttingTools
                 * @param   {FarseerPhysics.Dynamics.World}      world        The world.
                 * @param   {Microsoft.Xna.Framework.Vector2}    start        The startpoint.
                 * @param   {Microsoft.Xna.Framework.Vector2}    end          The endpoint.
                 * @param   {number}                             thickness    The thickness of the cut
                 * @return  {void}
                 */
                Cut: function (world, start, end, thickness) {
                    var fixtures = new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Fixture)).ctor();
                    var entryPoints = new (System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector2)).ctor();
                    var exitPoints = new (System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector2)).ctor();

                    if (world.TestPoint(start.$clone()) != null || world.TestPoint(end.$clone()) != null) {
                        return;
                    }

                    world.RayCast(function (f, p, n, fr) {
                        fixtures.add(f);
                        entryPoints.add(p.$clone());
                        return 1;
                    }, start.$clone(), end.$clone());

                    world.RayCast(function (f, p, n, fr) {
                        exitPoints.add(p.$clone());
                        return 1;
                    }, end.$clone(), start.$clone());

                    if (((entryPoints.Count + exitPoints.Count) | 0) < 2) {
                        return;
                    }

                    for (var i = 0; i < fixtures.Count; i = (i + 1) | 0) {
                        if (fixtures.getItem(i).Shape.ShapeType !== FarseerPhysics.Collision.Shapes.ShapeType.Polygon) {
                            continue;
                        }

                        if (fixtures.getItem(i).Body.BodyType !== FarseerPhysics.Dynamics.BodyType.Static) {
                            var first = { };
                            var second = { };
                            FarseerPhysics.Common.PolygonManipulation.CuttingTools.SplitShape(fixtures.getItem(i), entryPoints.getItem(i).$clone(), exitPoints.getItem(i).$clone(), thickness, first, second);

                            if (FarseerPhysics.Common.PolygonManipulation.CuttingTools.SanityCheck(first.v)) {
                                var firstFixture = FarseerPhysics.Factories.BodyFactory.CreatePolygon$1(world, first.v, fixtures.getItem(i).Shape.Density, fixtures.getItem(i).Body.Position.$clone());
                                firstFixture.Rotation = fixtures.getItem(i).Body.Rotation;
                                firstFixture.LinearVelocity = fixtures.getItem(i).Body.LinearVelocity.$clone();
                                firstFixture.AngularVelocity = fixtures.getItem(i).Body.AngularVelocity;
                                firstFixture.BodyType = FarseerPhysics.Dynamics.BodyType.Dynamic;
                            }

                            if (FarseerPhysics.Common.PolygonManipulation.CuttingTools.SanityCheck(second.v)) {
                                var secondFixture = FarseerPhysics.Factories.BodyFactory.CreatePolygon$1(world, second.v, fixtures.getItem(i).Shape.Density, fixtures.getItem(i).Body.Position.$clone());
                                secondFixture.Rotation = fixtures.getItem(i).Body.Rotation;
                                secondFixture.LinearVelocity = fixtures.getItem(i).Body.LinearVelocity.$clone();
                                secondFixture.AngularVelocity = fixtures.getItem(i).Body.AngularVelocity;
                                secondFixture.BodyType = FarseerPhysics.Dynamics.BodyType.Dynamic;
                            }
                            world.RemoveBody(fixtures.getItem(i).Body);
                        }
                    }
                },
                SanityCheck: function (vertices) {
                    if (vertices.Count < 3) {
                        return false;
                    }

                    if (vertices.GetArea() < 1E-05) {
                        return false;
                    }

                    for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                        var i1 = i;
                        var i2 = ((i + 1) | 0) < vertices.Count ? ((i + 1) | 0) : 0;
                        var edge = Microsoft.Xna.Framework.Vector2.op_Subtraction(vertices.getItem(i2).$clone(), vertices.getItem(i1).$clone());
                        if (edge.LengthSquared() < 1.42108547E-14) {
                            return false;
                        }
                    }

                    for (var i3 = 0; i3 < vertices.Count; i3 = (i3 + 1) | 0) {
                        var i11 = i3;
                        var i21 = ((i3 + 1) | 0) < vertices.Count ? ((i3 + 1) | 0) : 0;
                        var edge1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(vertices.getItem(i21).$clone(), vertices.getItem(i11).$clone());

                        for (var j = 0; j < vertices.Count; j = (j + 1) | 0) {
                            if (j === i11 || j === i21) {
                                continue;
                            }

                            var r = Microsoft.Xna.Framework.Vector2.op_Subtraction(vertices.getItem(j).$clone(), vertices.getItem(i11).$clone());

                            var s = edge1.X * r.Y - edge1.Y * r.X;

                            if (s < 0.0) {
                                return false;
                            }
                        }
                    }

                    return true;
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.PolygonManipulation.PolyClipError", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                DegeneratedOutput: 1,
                NonSimpleInput: 2,
                BrokenResult: 3
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.PolygonManipulation.PolyClipType", {
        $kind: "enum",
        statics: {
            fields: {
                Intersect: 0,
                Union: 1,
                Difference: 2
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.PolygonManipulation.SimplifyTools", {
        statics: {
            fields: {
                _usePt: null,
                _distanceTolerance: 0
            },
            methods: {
                /**
                 * Removes all collinear points on the polygon.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @memberof FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @param   {FarseerPhysics.Common.Vertices}    vertices                 The polygon that needs simplification.
                 * @param   {number}                            collinearityTolerance    The collinearity tolerance.
                 * @return  {FarseerPhysics.Common.Vertices}                             A simplified polygon.
                 */
                CollinearSimplify$1: function (vertices, collinearityTolerance) {
                    if (vertices.Count < 3) {
                        return vertices;
                    }

                    var simplified = new FarseerPhysics.Common.Vertices.ctor();

                    for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                        var prevId = vertices.PreviousIndex(i);
                        var nextId = vertices.NextIndex(i);

                        var prev = { v : vertices.getItem(prevId).$clone() };
                        var current = { v : vertices.getItem(i).$clone() };
                        var next = { v : vertices.getItem(nextId).$clone() };

                        if (FarseerPhysics.Common.MathUtils.Collinear$1(prev, current, next, collinearityTolerance)) {
                            continue;
                        }

                        simplified.add(current.v.$clone());
                    }

                    return simplified;
                },
                /**
                 * Removes all collinear points on the polygon.
                 Has a default bias of 0
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @memberof FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @param   {FarseerPhysics.Common.Vertices}    vertices    The polygon that needs simplification.
                 * @return  {FarseerPhysics.Common.Vertices}                A simplified polygon.
                 */
                CollinearSimplify: function (vertices) {
                    return FarseerPhysics.Common.PolygonManipulation.SimplifyTools.CollinearSimplify$1(vertices, 0);
                },
                /**
                 * Ramer-Douglas-Peucker polygon simplification algorithm. This is the general recursive version that does not use the
                 speed-up technique by using the Melkman convex hull.
                 If you pass in 0, it will remove all collinear points
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @memberof FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @param   {FarseerPhysics.Common.Vertices}    vertices             
                 * @param   {number}                            distanceTolerance
                 * @return  {FarseerPhysics.Common.Vertices}                         The simplified polygon
                 */
                DouglasPeuckerSimplify: function (vertices, distanceTolerance) {
                    FarseerPhysics.Common.PolygonManipulation.SimplifyTools._distanceTolerance = distanceTolerance;

                    FarseerPhysics.Common.PolygonManipulation.SimplifyTools._usePt = System.Array.init(vertices.Count, false, System.Boolean);
                    for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                        FarseerPhysics.Common.PolygonManipulation.SimplifyTools._usePt[System.Array.index(i, FarseerPhysics.Common.PolygonManipulation.SimplifyTools._usePt)] = true;
                    }

                    FarseerPhysics.Common.PolygonManipulation.SimplifyTools.SimplifySection(vertices, 0, ((vertices.Count - 1) | 0));
                    var result = new FarseerPhysics.Common.Vertices.ctor();

                    for (var i1 = 0; i1 < vertices.Count; i1 = (i1 + 1) | 0) {
                        if (FarseerPhysics.Common.PolygonManipulation.SimplifyTools._usePt[System.Array.index(i1, FarseerPhysics.Common.PolygonManipulation.SimplifyTools._usePt)]) {
                            result.add(vertices.getItem(i1).$clone());
                        }
                    }

                    return result;
                },
                SimplifySection: function (vertices, i, j) {
                    if ((((i + 1) | 0)) === j) {
                        return;
                    }

                    var A = vertices.getItem(i).$clone();
                    var B = vertices.getItem(j).$clone();
                    var maxDistance = -1.0;
                    var maxIndex = i;
                    for (var k = (i + 1) | 0; k < j; k = (k + 1) | 0) {
                        var distance = FarseerPhysics.Common.PolygonManipulation.SimplifyTools.DistancePointLine(vertices.getItem(k).$clone(), A.$clone(), B.$clone());

                        if (distance > maxDistance) {
                            maxDistance = distance;
                            maxIndex = k;
                        }
                    }
                    if (maxDistance <= FarseerPhysics.Common.PolygonManipulation.SimplifyTools._distanceTolerance) {
                        for (var k1 = (i + 1) | 0; k1 < j; k1 = (k1 + 1) | 0) {
                            FarseerPhysics.Common.PolygonManipulation.SimplifyTools._usePt[System.Array.index(k1, FarseerPhysics.Common.PolygonManipulation.SimplifyTools._usePt)] = false;
                        }
                    } else {
                        FarseerPhysics.Common.PolygonManipulation.SimplifyTools.SimplifySection(vertices, i, maxIndex);
                        FarseerPhysics.Common.PolygonManipulation.SimplifyTools.SimplifySection(vertices, maxIndex, j);
                    }
                },
                DistancePointPoint: function (p, p2) {
                    var dx = p.X - p2.X;
                    var dy = p.Y - p2.X;
                    return Math.sqrt(dx * dx + dy * dy);
                },
                DistancePointLine: function (p, A, B) {
                    if (A.X === B.X && A.Y === B.Y) {
                        return FarseerPhysics.Common.PolygonManipulation.SimplifyTools.DistancePointPoint(p.$clone(), A.$clone());
                    }

                    /* (1)     	      AC dot AB
                               r =   ---------
                                     ||AB||^2

                    		                r has the following meaning:
                    		                r=0 Point = A
                    		                r=1 Point = B
                    		                r<0 Point is on the backward extension of AB
                    		                r>1 Point is on the forward extension of AB
                    		                0<r<1 Point is interior to AB
                    	        */

                    var r = ((p.X - A.X) * (B.X - A.X) + (p.Y - A.Y) * (B.Y - A.Y)) / ((B.X - A.X) * (B.X - A.X) + (B.Y - A.Y) * (B.Y - A.Y));

                    if (r <= 0.0) {
                        return FarseerPhysics.Common.PolygonManipulation.SimplifyTools.DistancePointPoint(p.$clone(), A.$clone());
                    }
                    if (r >= 1.0) {
                        return FarseerPhysics.Common.PolygonManipulation.SimplifyTools.DistancePointPoint(p.$clone(), B.$clone());
                    }


                    /* (2)
                    		                    (Ay-Cy)(Bx-Ax)-(Ax-Cx)(By-Ay)
                    		                s = -----------------------------
                    		             	                Curve^2

                    		                Then the distance from C to Point = |s|*Curve.
                    	        */

                    var s = ((A.Y - p.Y) * (B.X - A.X) - (A.X - p.X) * (B.Y - A.Y)) / ((B.X - A.X) * (B.X - A.X) + (B.Y - A.Y) * (B.Y - A.Y));

                    return Math.abs(s) * Math.sqrt(((B.X - A.X) * (B.X - A.X) + (B.Y - A.Y) * (B.Y - A.Y)));
                },
                ReduceByArea: function (vertices, areaTolerance) {
                    if (vertices.Count <= 3) {
                        return vertices;
                    }

                    if (areaTolerance < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("areaTolerance", "must be equal to or greater then zero.");
                    }

                    var result = new FarseerPhysics.Common.Vertices.ctor();
                    var v1 = { v : new Microsoft.Xna.Framework.Vector2() }, v2 = { v : new Microsoft.Xna.Framework.Vector2() }, v3 = { v : new Microsoft.Xna.Framework.Vector2() };
                    var old1 = { }, old2 = { }, new1 = { };
                    v1.v = vertices.getItem(((vertices.Count - 2) | 0)).$clone();
                    v2.v = vertices.getItem(((vertices.Count - 1) | 0)).$clone();
                    areaTolerance *= 2;
                    for (var index = 0; index < vertices.Count; index = (index + 1) | 0, v2.v = v3.v.$clone()) {
                        if (index === ((vertices.Count - 1) | 0)) {
                            if (result.Count === 0) {
                                throw new System.ArgumentOutOfRangeException.$ctor4("areaTolerance", "The tolerance is too high!");
                            }
                            v3.v = result.getItem(0).$clone();
                        } else {
                            v3.v = vertices.getItem(index).$clone();
                        }
                        FarseerPhysics.Common.MathUtils.Cross$3(v1, v2, old1);
                        FarseerPhysics.Common.MathUtils.Cross$3(v2, v3, old2);
                        FarseerPhysics.Common.MathUtils.Cross$3(v1, v3, new1);
                        if (Math.abs(new1.v - (old1.v + old2.v)) > areaTolerance) {
                            result.add(v2.v.$clone());
                            v1.v = v2.v.$clone();
                        }
                    }
                    return result;
                },
                /**
                 * Merges all parallel edges in the list of vertices
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @memberof FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @param   {FarseerPhysics.Common.Vertices}    vertices     The vertices.
                 * @param   {number}                            tolerance    The tolerance.
                 * @return  {void}
                 */
                MergeParallelEdges: function (vertices, tolerance) {
                    if (vertices.Count <= 3) {
                        return;
                    }

                    var mergeMe = System.Array.init(vertices.Count, false, System.Boolean);
                    var newNVertices = vertices.Count;

                    for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                        var lower = (i === 0) ? (((vertices.Count - 1) | 0)) : (((i - 1) | 0));
                        var middle = i;
                        var upper = (i === ((vertices.Count - 1) | 0)) ? (0) : (((i + 1) | 0));

                        var dx0 = vertices.getItem(middle).$clone().X - vertices.getItem(lower).$clone().X;
                        var dy0 = vertices.getItem(middle).$clone().Y - vertices.getItem(lower).$clone().Y;
                        var dx1 = vertices.getItem(upper).$clone().Y - vertices.getItem(middle).$clone().X;
                        var dy1 = vertices.getItem(upper).$clone().Y - vertices.getItem(middle).$clone().Y;
                        var norm0 = Math.sqrt(dx0 * dx0 + dy0 * dy0);
                        var norm1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);

                        if (!(norm0 > 0.0 && norm1 > 0.0) && newNVertices > 3) {
                            mergeMe[System.Array.index(i, mergeMe)] = true;
                            newNVertices = (newNVertices - 1) | 0;
                        }

                        dx0 /= norm0;
                        dy0 /= norm0;
                        dx1 /= norm1;
                        dy1 /= norm1;
                        var cross = dx0 * dy1 - dx1 * dy0;
                        var dot = dx0 * dx1 + dy0 * dy1;

                        if (Math.abs(cross) < tolerance && dot > 0 && newNVertices > 3) {
                            mergeMe[System.Array.index(i, mergeMe)] = true;
                            newNVertices = (newNVertices - 1) | 0;
                        } else {
                            mergeMe[System.Array.index(i, mergeMe)] = false;
                        }
                    }

                    if (newNVertices === vertices.Count || newNVertices === 0) {
                        return;
                    }

                    var currIndex = 0;

                    var oldVertices = new FarseerPhysics.Common.Vertices.$ctor2(vertices);
                    vertices.clear();

                    for (var i1 = 0; i1 < oldVertices.Count; i1 = (i1 + 1) | 0) {
                        if (mergeMe[System.Array.index(i1, mergeMe)] || newNVertices === 0 || currIndex === newNVertices) {
                            continue;
                        }

                        System.Diagnostics.Debug.Assert(currIndex < newNVertices);

                        vertices.add(oldVertices.getItem(i1).$clone());
                        currIndex = (currIndex + 1) | 0;
                    }
                },
                /**
                 * Merges the identical points in the polygon.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @memberof FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @param   {FarseerPhysics.Common.Vertices}    vertices    The vertices.
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                MergeIdenticalPoints: function (vertices) {
                    var $t;
                    var results = new (System.Collections.Generic.HashSet$1(Microsoft.Xna.Framework.Vector2)).ctor();

                    for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                        results.add(vertices.getItem(i).$clone());
                    }

                    var returnResults = new FarseerPhysics.Common.Vertices.ctor();
                    $t = Bridge.getEnumerator(results);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current.$clone();
                            returnResults.add(v.$clone());
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return returnResults;
                },
                /**
                 * Reduces the polygon by distance.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @memberof FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @param   {FarseerPhysics.Common.Vertices}    vertices    The vertices.
                 * @param   {number}                            distance    The distance between points. Points closer than this will be 'joined'.
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                ReduceByDistance: function (vertices, distance) {
                    if (vertices.Count < 3) {
                        return vertices;
                    }

                    var simplified = new FarseerPhysics.Common.Vertices.ctor();

                    for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                        var current = vertices.getItem(i).$clone();
                        var next = vertices.NextVertex(i);

                        if ((Microsoft.Xna.Framework.Vector2.op_Subtraction(next.$clone(), current.$clone())).LengthSquared() <= distance) {
                            continue;
                        }

                        simplified.add(current.$clone());
                    }

                    return simplified;
                },
                /**
                 * Reduces the polygon by removing the Nth vertex in the vertices list.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @memberof FarseerPhysics.Common.PolygonManipulation.SimplifyTools
                 * @param   {FarseerPhysics.Common.Vertices}    vertices    The vertices.
                 * @param   {number}                            nth         The Nth point to remove. Example: 5.
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                ReduceByNth: function (vertices, nth) {
                    if (vertices.Count < 3) {
                        return vertices;
                    }

                    if (nth === 0) {
                        return vertices;
                    }

                    var result = new FarseerPhysics.Common.Vertices.$ctor3(vertices.Count);

                    for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                        if (i % nth === 0) {
                            continue;
                        }

                        result.add(vertices.getItem(i).$clone());
                    }

                    return result;
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.PolygonManipulation.YuPengClipper", {
        statics: {
            fields: {
                ClipperEpsilonSquared: 0
            },
            ctors: {
                init: function () {
                    this.ClipperEpsilonSquared = 1.1920929E-07;
                }
            },
            methods: {
                Union: function (polygon1, polygon2, error) {
                    return FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Execute(polygon1, polygon2, FarseerPhysics.Common.PolygonManipulation.PolyClipType.Union, error);
                },
                Difference: function (polygon1, polygon2, error) {
                    return FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Execute(polygon1, polygon2, FarseerPhysics.Common.PolygonManipulation.PolyClipType.Difference, error);
                },
                Intersect: function (polygon1, polygon2, error) {
                    return FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Execute(polygon1, polygon2, FarseerPhysics.Common.PolygonManipulation.PolyClipType.Intersect, error);
                },
                /**
                 * Implements "A new algorithm for Boolean operations on general polygons" 
                 available here: http://liama.ia.ac.cn/wiki/_media/user:dong:dong_cg_05.pdf
                 Merges two polygons, a subject and a clip with the specified operation. Polygons may not be 
                 self-intersecting.
                 Warning: May yield incorrect results or even crash if polygons contain collinear points.
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @memberof FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @param   {FarseerPhysics.Common.Vertices}                             subject     The subject polygon.
                 * @param   {FarseerPhysics.Common.Vertices}                             clip        The clip polygon, which is added, 
                 substracted or intersected with the subject
                 * @param   {FarseerPhysics.Common.PolygonManipulation.PolyClipType}     clipType    The operation to be performed. Either
                 Union, Difference or Intersection.
                 * @param   {FarseerPhysics.Common.PolygonManipulation.PolyClipError}    error       The error generated (if any)
                 * @return  {System.Collections.Generic.List$1}                                      A list of closed polygons, which make up the result of the clipping operation.
                 Outer contours are ordered counter clockwise, holes are ordered clockwise.
                 */
                Execute: function (subject, clip, clipType, error) {
                    System.Diagnostics.Debug.Assert$2(subject.IsSimple() && clip.IsSimple(), "Non simple input!", "Input polygons must be simple (cannot intersect themselves).");

                    var slicedSubject = { };
                    var slicedClip = { };
                    FarseerPhysics.Common.PolygonManipulation.YuPengClipper.CalculateIntersections(subject, clip, slicedSubject, slicedClip);

                    var lbSubject = { v : subject.GetCollisionBox().LowerBound.$clone() };
                    var lbClip = { v : clip.GetCollisionBox().LowerBound.$clone() };
                    var translate = { v : new Microsoft.Xna.Framework.Vector2() };
                    Microsoft.Xna.Framework.Vector2.Min$1(lbSubject, lbClip, translate);
                    translate.v = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.One.$clone(), translate.v.$clone());
                    if (Microsoft.Xna.Framework.Vector2.op_Inequality(translate.v.$clone(), Microsoft.Xna.Framework.Vector2.Zero.$clone())) {
                        slicedSubject.v.Translate$1(translate);
                        slicedClip.v.Translate$1(translate);
                    }

                    slicedSubject.v.ForceCounterClockWise();
                    slicedClip.v.ForceCounterClockWise();

                    var subjectSimplices = { };
                    var subjectCoeff = { };
                    var clipSimplices = { };
                    var clipCoeff = { };
                    FarseerPhysics.Common.PolygonManipulation.YuPengClipper.CalculateSimplicalChain(slicedSubject.v, subjectCoeff, subjectSimplices);
                    FarseerPhysics.Common.PolygonManipulation.YuPengClipper.CalculateSimplicalChain(slicedClip.v, clipCoeff, clipSimplices);

                    var resultSimplices = { };

                    FarseerPhysics.Common.PolygonManipulation.YuPengClipper.CalculateResultChain(subjectCoeff.v, subjectSimplices.v, clipCoeff.v, clipSimplices.v, clipType, resultSimplices);

                    var result = { };
                    error.v = FarseerPhysics.Common.PolygonManipulation.YuPengClipper.BuildPolygonsFromChain(resultSimplices.v, result);

                    translate.v = Microsoft.Xna.Framework.Vector2.op_Multiply$1(translate.v.$clone(), -1.0);
                    for (var i = 0; i < result.v.Count; i = (i + 1) | 0) {
                        result.v.getItem(i).Translate$1(translate);
                        FarseerPhysics.Common.PolygonManipulation.SimplifyTools.CollinearSimplify(result.v.getItem(i));
                    }
                    return result.v;
                },
                /**
                 * Calculates all intersections between two polygons.
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @memberof FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @param   {FarseerPhysics.Common.Vertices}    polygon1       The first polygon.
                 * @param   {FarseerPhysics.Common.Vertices}    polygon2       The second polygon.
                 * @param   {FarseerPhysics.Common.Vertices}    slicedPoly1    Returns the first polygon with added intersection points.
                 * @param   {FarseerPhysics.Common.Vertices}    slicedPoly2    Returns the second polygon with added intersection points.
                 * @return  {void}
                 */
                CalculateIntersections: function (polygon1, polygon2, slicedPoly1, slicedPoly2) {
                    slicedPoly1.v = new FarseerPhysics.Common.Vertices.$ctor2(polygon1);
                    slicedPoly2.v = new FarseerPhysics.Common.Vertices.$ctor2(polygon2);

                    for (var i = 0; i < polygon1.Count; i = (i + 1) | 0) {
                        var a = polygon1.getItem(i).$clone();
                        var b = polygon1.getItem(polygon1.NextIndex(i)).$clone();

                        for (var j = 0; j < polygon2.Count; j = (j + 1) | 0) {
                            var c = polygon2.getItem(j).$clone();
                            var d = polygon2.getItem(polygon2.NextIndex(j)).$clone();

                            var intersectionPoint = { v : new Microsoft.Xna.Framework.Vector2() };
                            if (FarseerPhysics.Common.LineTools.LineIntersect$1(a.$clone(), b.$clone(), c.$clone(), d.$clone(), intersectionPoint)) {
                                var alpha;
                                alpha = FarseerPhysics.Common.PolygonManipulation.YuPengClipper.GetAlpha(a.$clone(), b.$clone(), intersectionPoint.v.$clone());
                                if (alpha > 0.0 && alpha < 1.0) {
                                    var index = (slicedPoly1.v.indexOf(a.$clone()) + 1) | 0;
                                    while (index < slicedPoly1.v.Count && FarseerPhysics.Common.PolygonManipulation.YuPengClipper.GetAlpha(a.$clone(), b.$clone(), slicedPoly1.v.getItem(index).$clone()) <= alpha) {
                                        index = (index + 1) | 0;
                                    }
                                    slicedPoly1.v.insert(index, intersectionPoint.v.$clone());
                                }
                                alpha = FarseerPhysics.Common.PolygonManipulation.YuPengClipper.GetAlpha(c.$clone(), d.$clone(), intersectionPoint.v.$clone());
                                if (alpha > 0.0 && alpha < 1.0) {
                                    var index1 = (slicedPoly2.v.indexOf(c.$clone()) + 1) | 0;
                                    while (index1 < slicedPoly2.v.Count && FarseerPhysics.Common.PolygonManipulation.YuPengClipper.GetAlpha(c.$clone(), d.$clone(), slicedPoly2.v.getItem(index1).$clone()) <= alpha) {
                                        index1 = (index1 + 1) | 0;
                                    }
                                    slicedPoly2.v.insert(index1, intersectionPoint.v.$clone());
                                }
                            }
                        }
                    }
                    for (var i1 = 0; i1 < slicedPoly1.v.Count; i1 = (i1 + 1) | 0) {
                        var iNext = slicedPoly1.v.NextIndex(i1);
                        if ((Microsoft.Xna.Framework.Vector2.op_Subtraction(slicedPoly1.v.getItem(iNext).$clone(), slicedPoly1.v.getItem(i1).$clone())).LengthSquared() <= FarseerPhysics.Common.PolygonManipulation.YuPengClipper.ClipperEpsilonSquared) {
                            slicedPoly1.v.removeAt(i1);
                            i1 = (i1 - 1) | 0;
                        }
                    }
                    for (var i2 = 0; i2 < slicedPoly2.v.Count; i2 = (i2 + 1) | 0) {
                        var iNext1 = slicedPoly2.v.NextIndex(i2);
                        if ((Microsoft.Xna.Framework.Vector2.op_Subtraction(slicedPoly2.v.getItem(iNext1).$clone(), slicedPoly2.v.getItem(i2).$clone())).LengthSquared() <= FarseerPhysics.Common.PolygonManipulation.YuPengClipper.ClipperEpsilonSquared) {
                            slicedPoly2.v.removeAt(i2);
                            i2 = (i2 - 1) | 0;
                        }
                    }
                },
                /**
                 * Calculates the simplical chain corresponding to the input polygon.
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @memberof FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @param   {FarseerPhysics.Common.Vertices}     poly          
                 * @param   {System.Collections.Generic.List}    coeff         
                 * @param   {System.Collections.Generic.List}    simplicies
                 * @return  {void}
                 */
                CalculateSimplicalChain: function (poly, coeff, simplicies) {
                    simplicies.v = new (System.Collections.Generic.List$1(FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge)).ctor();
                    coeff.v = new (System.Collections.Generic.List$1(System.Single)).ctor();
                    for (var i = 0; i < poly.Count; i = (i + 1) | 0) {
                        simplicies.v.add(new FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge(poly.getItem(i).$clone(), poly.getItem(poly.NextIndex(i)).$clone()));
                        coeff.v.add(FarseerPhysics.Common.PolygonManipulation.YuPengClipper.CalculateSimplexCoefficient(Microsoft.Xna.Framework.Vector2.Zero.$clone(), poly.getItem(i).$clone(), poly.getItem(poly.NextIndex(i)).$clone()));
                    }
                },
                /**
                 * Calculates the characteristics function for all edges of
                 the given simplical chains and builds the result chain.
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @memberof FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @param   {System.Collections.Generic.List$1}                         poly1Coeff         
                 * @param   {System.Collections.Generic.List$1}                         poly1Simplicies    
                 * @param   {System.Collections.Generic.List$1}                         poly2Coeff         
                 * @param   {System.Collections.Generic.List$1}                         poly2Simplicies    
                 * @param   {FarseerPhysics.Common.PolygonManipulation.PolyClipType}    clipType           
                 * @param   {System.Collections.Generic.List}                           resultSimplices
                 * @return  {void}
                 */
                CalculateResultChain: function (poly1Coeff, poly1Simplicies, poly2Coeff, poly2Simplicies, clipType, resultSimplices) {
                    resultSimplices.v = new (System.Collections.Generic.List$1(FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge)).ctor();

                    for (var i = 0; i < poly1Simplicies.Count; i = (i + 1) | 0) {
                        var edgeCharacter = 0.0;
                        if (poly2Simplicies.contains(poly1Simplicies.getItem(i)) || (poly2Simplicies.contains(FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge.op_UnaryNegation(poly1Simplicies.getItem(i))) && clipType === FarseerPhysics.Common.PolygonManipulation.PolyClipType.Union)) {
                            edgeCharacter = 1.0;
                        } else {
                            for (var j = 0; j < poly2Simplicies.Count; j = (j + 1) | 0) {
                                if (!poly2Simplicies.contains(FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge.op_UnaryNegation(poly1Simplicies.getItem(i)))) {
                                    edgeCharacter += FarseerPhysics.Common.PolygonManipulation.YuPengClipper.CalculateBeta(poly1Simplicies.getItem(i).GetCenter(), poly2Simplicies.getItem(j), poly2Coeff.getItem(j));
                                }
                            }
                        }
                        if (clipType === FarseerPhysics.Common.PolygonManipulation.PolyClipType.Intersect) {
                            if (edgeCharacter === 1.0) {
                                resultSimplices.v.add(poly1Simplicies.getItem(i));
                            }
                        } else {
                            if (edgeCharacter === 0.0) {
                                resultSimplices.v.add(poly1Simplicies.getItem(i));
                            }
                        }
                    }
                    for (var i1 = 0; i1 < poly2Simplicies.Count; i1 = (i1 + 1) | 0) {
                        if (!resultSimplices.v.contains(poly2Simplicies.getItem(i1)) && !resultSimplices.v.contains(FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge.op_UnaryNegation(poly2Simplicies.getItem(i1)))) {
                            var edgeCharacter1 = 0.0;
                            if (poly1Simplicies.contains(poly2Simplicies.getItem(i1)) || (poly1Simplicies.contains(FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge.op_UnaryNegation(poly2Simplicies.getItem(i1))) && clipType === FarseerPhysics.Common.PolygonManipulation.PolyClipType.Union)) {
                                edgeCharacter1 = 1.0;
                            } else {
                                for (var j1 = 0; j1 < poly1Simplicies.Count; j1 = (j1 + 1) | 0) {
                                    if (!poly1Simplicies.contains(FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge.op_UnaryNegation(poly2Simplicies.getItem(i1)))) {
                                        edgeCharacter1 += FarseerPhysics.Common.PolygonManipulation.YuPengClipper.CalculateBeta(poly2Simplicies.getItem(i1).GetCenter(), poly1Simplicies.getItem(j1), poly1Coeff.getItem(j1));
                                    }
                                }
                            }
                            if (clipType === FarseerPhysics.Common.PolygonManipulation.PolyClipType.Intersect || clipType === FarseerPhysics.Common.PolygonManipulation.PolyClipType.Difference) {
                                if (edgeCharacter1 === 1.0) {
                                    resultSimplices.v.add(FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge.op_UnaryNegation(poly2Simplicies.getItem(i1)));
                                }
                            } else {
                                if (edgeCharacter1 === 0.0) {
                                    resultSimplices.v.add(poly2Simplicies.getItem(i1));
                                }
                            }
                        }
                    }
                },
                /**
                 * Calculates the polygon(s) from the result simplical chain.
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @memberof FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @param   {System.Collections.Generic.List$1}                          simplicies    
                 * @param   {System.Collections.Generic.List}                            result
                 * @return  {FarseerPhysics.Common.PolygonManipulation.PolyClipError}
                 */
                BuildPolygonsFromChain: function (simplicies, result) {
                    result.v = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();
                    var errVal = FarseerPhysics.Common.PolygonManipulation.PolyClipError.None;

                    while (simplicies.Count > 0) {
                        var output = new FarseerPhysics.Common.Vertices.ctor();
                        output.add(simplicies.getItem(0).EdgeStart.$clone());
                        output.add(simplicies.getItem(0).EdgeEnd.$clone());
                        simplicies.removeAt(0);
                        var closed = false;
                        var index = 0;
                        var count = simplicies.Count;
                        while (!closed && simplicies.Count > 0) {
                            if (FarseerPhysics.Common.PolygonManipulation.YuPengClipper.VectorEqual(output.getItem(((output.Count - 1) | 0)).$clone(), simplicies.getItem(index).EdgeStart.$clone())) {
                                if (FarseerPhysics.Common.PolygonManipulation.YuPengClipper.VectorEqual(simplicies.getItem(index).EdgeEnd.$clone(), output.getItem(0).$clone())) {
                                    closed = true;
                                } else {
                                    output.add(simplicies.getItem(index).EdgeEnd.$clone());
                                }
                                simplicies.removeAt(index);
                                index = (index - 1) | 0;
                            } else if (FarseerPhysics.Common.PolygonManipulation.YuPengClipper.VectorEqual(output.getItem(((output.Count - 1) | 0)).$clone(), simplicies.getItem(index).EdgeEnd.$clone())) {
                                if (FarseerPhysics.Common.PolygonManipulation.YuPengClipper.VectorEqual(simplicies.getItem(index).EdgeStart.$clone(), output.getItem(0).$clone())) {
                                    closed = true;
                                } else {
                                    output.add(simplicies.getItem(index).EdgeStart.$clone());
                                }
                                simplicies.removeAt(index);
                                index = (index - 1) | 0;
                            }
                            if (!closed) {
                                if (((index = (index + 1) | 0)) === simplicies.Count) {
                                    if (count === simplicies.Count) {
                                        result.v = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();
                                        System.Diagnostics.Debug.WriteLine$2("Undefined error while building result polygon(s).");
                                        return FarseerPhysics.Common.PolygonManipulation.PolyClipError.BrokenResult;
                                    }
                                    index = 0;
                                    count = simplicies.Count;
                                }
                            }
                        }
                        if (output.Count < 3) {
                            errVal = FarseerPhysics.Common.PolygonManipulation.PolyClipError.DegeneratedOutput;
                            System.Diagnostics.Debug.WriteLine$2("Degenerated output polygon produced (vertices < 3).");
                        }
                        result.v.add(output);
                    }
                    return errVal;
                },
                /**
                 * Needed to calculate the characteristics function of a simplex.
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @memberof FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @param   {Microsoft.Xna.Framework.Vector2}                                 point          
                 * @param   {FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge}    e              
                 * @param   {number}                                                          coefficient
                 * @return  {number}
                 */
                CalculateBeta: function (point, e, coefficient) {
                    var result = 0.0;
                    if (FarseerPhysics.Common.PolygonManipulation.YuPengClipper.PointInSimplex(point.$clone(), e)) {
                        result = coefficient;
                    }
                    if (FarseerPhysics.Common.PolygonManipulation.YuPengClipper.PointOnLineSegment(Microsoft.Xna.Framework.Vector2.Zero.$clone(), e.EdgeStart.$clone(), point.$clone()) || FarseerPhysics.Common.PolygonManipulation.YuPengClipper.PointOnLineSegment(Microsoft.Xna.Framework.Vector2.Zero.$clone(), e.EdgeEnd.$clone(), point.$clone())) {
                        result = 0.5 * coefficient;
                    }
                    return result;
                },
                /**
                 * Needed for sorting multiple intersections points on the same edge.
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @memberof FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @param   {Microsoft.Xna.Framework.Vector2}    start    
                 * @param   {Microsoft.Xna.Framework.Vector2}    end      
                 * @param   {Microsoft.Xna.Framework.Vector2}    point
                 * @return  {number}
                 */
                GetAlpha: function (start, end, point) {
                    return (Microsoft.Xna.Framework.Vector2.op_Subtraction(point.$clone(), start.$clone())).LengthSquared() / (Microsoft.Xna.Framework.Vector2.op_Subtraction(end.$clone(), start.$clone())).LengthSquared();
                },
                /**
                 * Returns the coefficient of a simplex.
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @memberof FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @param   {Microsoft.Xna.Framework.Vector2}    a    
                 * @param   {Microsoft.Xna.Framework.Vector2}    b    
                 * @param   {Microsoft.Xna.Framework.Vector2}    c
                 * @return  {number}
                 */
                CalculateSimplexCoefficient: function (a, b, c) {
                    a = {v:a};
                    b = {v:b};
                    c = {v:c};
                    var isLeft = FarseerPhysics.Common.MathUtils.Area$1(a, b, c);
                    if (isLeft < 0.0) {
                        return -1.0;
                    }

                    if (isLeft > 0.0) {
                        return 1.0;
                    }

                    return 0.0;
                },
                /**
                 * Winding number test for a point in a simplex.
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @memberof FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @param   {Microsoft.Xna.Framework.Vector2}                                 point    The point to be tested.
                 * @param   {FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge}    edge     The edge that the point is tested against.
                 * @return  {boolean}                                                                  False if the winding number is even and the point is outside
                 the simplex and True otherwise.
                 */
                PointInSimplex: function (point, edge) {
                    point = {v:point};
                    var polygon = new FarseerPhysics.Common.Vertices.ctor();
                    polygon.add(Microsoft.Xna.Framework.Vector2.Zero.$clone());
                    polygon.add(edge.EdgeStart.$clone());
                    polygon.add(edge.EdgeEnd.$clone());
                    return (polygon.PointInPolygon(point) === 1);
                },
                /**
                 * Tests if a point lies on a line segment.
                 *
                 * @static
                 * @private
                 * @this FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @memberof FarseerPhysics.Common.PolygonManipulation.YuPengClipper
                 * @param   {Microsoft.Xna.Framework.Vector2}    start    
                 * @param   {Microsoft.Xna.Framework.Vector2}    end      
                 * @param   {Microsoft.Xna.Framework.Vector2}    point
                 * @return  {boolean}
                 */
                PointOnLineSegment: function (start, end, point) {
                    start = {v:start};
                    end = {v:end};
                    point = {v:point};
                    var segment = Microsoft.Xna.Framework.Vector2.op_Subtraction(end.v.$clone(), start.v.$clone());
                    return FarseerPhysics.Common.MathUtils.Area$1(start, end, point) === 0.0 && Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(point.v.$clone(), start.v.$clone()), segment.$clone()) >= 0.0 && Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(point.v.$clone(), end.v.$clone()), segment.$clone()) <= 0.0;
                },
                VectorEqual: function (vec1, vec2) {
                    return (Microsoft.Xna.Framework.Vector2.op_Subtraction(vec2.$clone(), vec1.$clone())).LengthSquared() <= FarseerPhysics.Common.PolygonManipulation.YuPengClipper.ClipperEpsilonSquared;
                }
            }
        }
    });

    /** @namespace FarseerPhysics.Common.PolygonManipulation */

    /**
     * Specifies an Edge. Edges are used to represent simplicies in simplical chains
     *
     * @private
     * @class FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge
     */
    Bridge.define("FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge", {
        $kind: "nested class",
        statics: {
            methods: {
                op_UnaryNegation: function (e) {
                    return new FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge(e.EdgeEnd.$clone(), e.EdgeStart.$clone());
                }
            }
        },
        fields: {
            EdgeStart: null,
            EdgeEnd: null
        },
        ctors: {
            init: function () {
                this.EdgeStart = new Microsoft.Xna.Framework.Vector2();
                this.EdgeEnd = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function (edgeStart, edgeEnd) {
                this.$initialize();
                this.EdgeStart = edgeStart.$clone();
                this.EdgeEnd = edgeEnd.$clone();
            }
        },
        methods: {
            GetCenter: function () {
                return Microsoft.Xna.Framework.Vector2.op_Division$1((Microsoft.Xna.Framework.Vector2.op_Addition(this.EdgeStart.$clone(), this.EdgeEnd.$clone())), 2.0);
            },
            equals: function (obj) {
                if (obj == null) {
                    return false;
                }

                return this.Equals(Bridge.as(obj, FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge));
            },
            Equals: function (e) {
                if (e == null) {
                    return false;
                }

                return FarseerPhysics.Common.PolygonManipulation.YuPengClipper.VectorEqual(this.EdgeStart.$clone(), e.EdgeStart.$clone()) && FarseerPhysics.Common.PolygonManipulation.YuPengClipper.VectorEqual(this.EdgeEnd.$clone(), e.EdgeEnd.$clone());
            },
            getHashCode: function () {
                return this.EdgeStart.getHashCode() ^ this.EdgeEnd.getHashCode();
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.PolygonTools", {
        statics: {
            methods: {
                /**
                 * Build vertices to represent an axis-aligned box.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonTools
                 * @memberof FarseerPhysics.Common.PolygonTools
                 * @param   {number}                            hx    the half-width.
                 * @param   {number}                            hy    the half-height.
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                CreateRectangle: function (hx, hy) {
                    var vertices = new FarseerPhysics.Common.Vertices.$ctor3(4);
                    vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(-hx, -hy));
                    vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(hx, -hy));
                    vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(hx, hy));
                    vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(-hx, hy));

                    return vertices;
                },
                /**
                 * Build vertices to represent an oriented box.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonTools
                 * @memberof FarseerPhysics.Common.PolygonTools
                 * @param   {number}                             hx        the half-width.
                 * @param   {number}                             hy        the half-height.
                 * @param   {Microsoft.Xna.Framework.Vector2}    center    the center of the box in local coordinates.
                 * @param   {number}                             angle     the rotation of the box in local coordinates.
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                CreateRectangle$1: function (hx, hy, center, angle) {
                    var vertices = FarseerPhysics.Common.PolygonTools.CreateRectangle(hx, hy);

                    var xf = { v : new FarseerPhysics.Common.Transform.ctor() };
                    xf.v.Position = center.$clone();
                    xf.v.R.Set$1(angle);

                    for (var i = 0; i < 4; i = (i + 1) | 0) {
                        vertices.setItem(i, FarseerPhysics.Common.MathUtils.Multiply$2(xf, vertices.getItem(i).$clone()));
                    }

                    return vertices;
                },
                /**
                 * Creates a rounded rectangle with the specified width and height.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonTools
                 * @memberof FarseerPhysics.Common.PolygonTools
                 * @param   {number}                            width       The width.
                 * @param   {number}                            height      The height.
                 * @param   {number}                            xRadius     The rounding X radius.
                 * @param   {number}                            yRadius     The rounding Y radius.
                 * @param   {number}                            segments    The number of segments to subdivide the edges.
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                CreateRoundedRectangle: function (width, height, xRadius, yRadius, segments) {
                    if (yRadius > height / 2 || xRadius > width / 2) {
                        throw new System.Exception("Rounding amount can't be more than half the height and width respectively.");
                    }
                    if (segments < 0) {
                        throw new System.Exception("Segments must be zero or more.");
                    }

                    System.Diagnostics.Debug.Assert(FarseerPhysics.Settings.MaxPolygonVertices >= 8);

                    var vertices = new FarseerPhysics.Common.Vertices.ctor();
                    if (segments === 0) {
                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(width * 0.5 - xRadius, -height * 0.5));
                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(width * 0.5, -height * 0.5 + yRadius));

                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(width * 0.5, height * 0.5 - yRadius));
                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(width * 0.5 - xRadius, height * 0.5));

                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(-width * 0.5 + xRadius, height * 0.5));
                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(-width * 0.5, height * 0.5 - yRadius));

                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(-width * 0.5, -height * 0.5 + yRadius));
                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(-width * 0.5 + xRadius, -height * 0.5));
                    } else {
                        var numberOfEdges = (((Bridge.Int.mul(segments, 4) + 8) | 0));

                        var stepSize = Microsoft.Xna.Framework.MathHelper.TwoPi / (((numberOfEdges - 4) | 0));
                        var perPhase = (Bridge.Int.div(numberOfEdges, 4)) | 0;

                        var posOffset = new Microsoft.Xna.Framework.Vector2.$ctor2(width / 2 - xRadius, height / 2 - yRadius);
                        vertices.add(Microsoft.Xna.Framework.Vector2.op_Addition(posOffset.$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(xRadius, -yRadius + yRadius)));
                        var phase = 0;
                        for (var i = 1; i < numberOfEdges; i = (i + 1) | 0) {
                            if (((i - perPhase) | 0) === 0 || ((i - Bridge.Int.mul(perPhase, 3)) | 0) === 0) {
                                posOffset.X *= -1;
                                phase = Bridge.Int.sxs((phase - 1) & 65535);
                            } else if (((i - Bridge.Int.mul(perPhase, 2)) | 0) === 0) {
                                posOffset.Y *= -1;
                                phase = Bridge.Int.sxs((phase - 1) & 65535);
                            }

                            vertices.add(Microsoft.Xna.Framework.Vector2.op_Addition(posOffset.$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(xRadius * Math.cos(stepSize * ((-(((i + phase) | 0))) | 0)), -yRadius * Math.sin(stepSize * ((-(((i + phase) | 0))) | 0)))));
                        }
                    }

                    return vertices;
                },
                /**
                 * Set this as a single edge.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonTools
                 * @memberof FarseerPhysics.Common.PolygonTools
                 * @param   {Microsoft.Xna.Framework.Vector2}    start    The first point.
                 * @param   {Microsoft.Xna.Framework.Vector2}    end      The second point.
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                CreateLine: function (start, end) {
                    var vertices = new FarseerPhysics.Common.Vertices.$ctor3(2);
                    vertices.add(start.$clone());
                    vertices.add(end.$clone());

                    return vertices;
                },
                /**
                 * Creates a circle with the specified radius and number of edges.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonTools
                 * @memberof FarseerPhysics.Common.PolygonTools
                 * @param   {number}                            radius           The radius.
                 * @param   {number}                            numberOfEdges    The number of edges. The more edges, the more it resembles a circle
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                CreateCircle: function (radius, numberOfEdges) {
                    return FarseerPhysics.Common.PolygonTools.CreateEllipse(radius, radius, numberOfEdges);
                },
                /**
                 * Creates a ellipse with the specified width, height and number of edges.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonTools
                 * @memberof FarseerPhysics.Common.PolygonTools
                 * @param   {number}                            xRadius          Width of the ellipse.
                 * @param   {number}                            yRadius          Height of the ellipse.
                 * @param   {number}                            numberOfEdges    The number of edges. The more edges, the more it resembles an ellipse
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                CreateEllipse: function (xRadius, yRadius, numberOfEdges) {
                    var vertices = new FarseerPhysics.Common.Vertices.ctor();

                    var stepSize = Microsoft.Xna.Framework.MathHelper.TwoPi / numberOfEdges;

                    vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(xRadius, 0));
                    for (var i = (numberOfEdges - 1) | 0; i > 0; i = (i - 1) | 0) {
                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(xRadius * Math.cos(stepSize * i), -yRadius * Math.sin(stepSize * i)));
                    }

                    return vertices;
                },
                CreateArc: function (radians, sides, radius) {
                    System.Diagnostics.Debug.Assert$1(radians > 0, "The arc needs to be larger than 0");
                    System.Diagnostics.Debug.Assert$1(sides > 1, "The arc needs to have more than 1 sides");
                    System.Diagnostics.Debug.Assert$1(radius > 0, "The arc needs to have a radius larger than 0");

                    var vertices = new FarseerPhysics.Common.Vertices.ctor();

                    var stepSize = radians / sides;
                    for (var i = (sides - 1) | 0; i > 0; i = (i - 1) | 0) {
                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(radius * Math.cos(stepSize * i), radius * Math.sin(stepSize * i)));
                    }

                    return vertices;
                },
                /**
                 * Creates an capsule with the specified height, radius and number of edges.
                 A capsule has the same form as a pill capsule.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonTools
                 * @memberof FarseerPhysics.Common.PolygonTools
                 * @param   {number}                            height       Height (inner height + 2 * radius) of the capsule.
                 * @param   {number}                            endRadius    Radius of the capsule ends.
                 * @param   {number}                            edges        The number of edges of the capsule ends. The more edges, the more it resembles an capsule
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                CreateCapsule: function (height, endRadius, edges) {
                    if (endRadius >= height / 2) {
                        throw new System.ArgumentException.$ctor3("The radius must be lower than height / 2. Higher values of radius would create a circle, and not a half circle.", "endRadius");
                    }

                    return FarseerPhysics.Common.PolygonTools.CreateCapsule$1(height, endRadius, edges, endRadius, edges);
                },
                /**
                 * Creates an capsule with the specified  height, radius and number of edges.
                 A capsule has the same form as a pill capsule.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonTools
                 * @memberof FarseerPhysics.Common.PolygonTools
                 * @param   {number}                            height          Height (inner height + radii) of the capsule.
                 * @param   {number}                            topRadius       Radius of the top.
                 * @param   {number}                            topEdges        The number of edges of the top. The more edges, the more it resembles an capsule
                 * @param   {number}                            bottomRadius    Radius of bottom.
                 * @param   {number}                            bottomEdges     The number of edges of the bottom. The more edges, the more it resembles an capsule
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                CreateCapsule$1: function (height, topRadius, topEdges, bottomRadius, bottomEdges) {
                    if (height <= 0) {
                        throw new System.ArgumentException.$ctor3("Height must be longer than 0", "height");
                    }

                    if (topRadius <= 0) {
                        throw new System.ArgumentException.$ctor3("The top radius must be more than 0", "topRadius");
                    }

                    if (topEdges <= 0) {
                        throw new System.ArgumentException.$ctor3("Top edges must be more than 0", "topEdges");
                    }

                    if (bottomRadius <= 0) {
                        throw new System.ArgumentException.$ctor3("The bottom radius must be more than 0", "bottomRadius");
                    }

                    if (bottomEdges <= 0) {
                        throw new System.ArgumentException.$ctor3("Bottom edges must be more than 0", "bottomEdges");
                    }

                    if (topRadius >= height / 2) {
                        throw new System.ArgumentException.$ctor3("The top radius must be lower than height / 2. Higher values of top radius would create a circle, and not a half circle.", "topRadius");
                    }

                    if (bottomRadius >= height / 2) {
                        throw new System.ArgumentException.$ctor3("The bottom radius must be lower than height / 2. Higher values of bottom radius would create a circle, and not a half circle.", "bottomRadius");
                    }

                    var vertices = new FarseerPhysics.Common.Vertices.ctor();

                    var newHeight = (height - topRadius - bottomRadius) * 0.5;

                    vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(topRadius, newHeight));

                    var stepSize = Microsoft.Xna.Framework.MathHelper.Pi / topEdges;
                    for (var i = 1; i < topEdges; i = (i + 1) | 0) {
                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(topRadius * Math.cos(stepSize * i), topRadius * Math.sin(stepSize * i) + newHeight));
                    }

                    vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(-topRadius, newHeight));

                    vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(-bottomRadius, -newHeight));

                    stepSize = Microsoft.Xna.Framework.MathHelper.Pi / bottomEdges;
                    for (var i1 = 1; i1 < bottomEdges; i1 = (i1 + 1) | 0) {
                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(-bottomRadius * Math.cos(stepSize * i1), -bottomRadius * Math.sin(stepSize * i1) - newHeight));
                    }

                    vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(bottomRadius, -newHeight));

                    return vertices;
                },
                /**
                 * Creates a gear shape with the specified radius and number of teeth.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonTools
                 * @memberof FarseerPhysics.Common.PolygonTools
                 * @param   {number}                            radius           The radius.
                 * @param   {number}                            numberOfTeeth    The number of teeth.
                 * @param   {number}                            tipPercentage    The tip percentage.
                 * @param   {number}                            toothHeight      Height of the tooth.
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                CreateGear: function (radius, numberOfTeeth, tipPercentage, toothHeight) {
                    var vertices = new FarseerPhysics.Common.Vertices.ctor();

                    var stepSize = Microsoft.Xna.Framework.MathHelper.TwoPi / numberOfTeeth;
                    tipPercentage /= 100.0;
                    Microsoft.Xna.Framework.MathHelper.Clamp$1(tipPercentage, 0.0, 1.0);
                    var toothTipStepSize = (stepSize / 2.0) * tipPercentage;

                    var toothAngleStepSize = (stepSize - (toothTipStepSize * 2.0)) / 2.0;

                    for (var i = (numberOfTeeth - 1) | 0; i >= 0; i = (i - 1) | 0) {
                        if (toothTipStepSize > 0.0) {
                            vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(radius * Math.cos(stepSize * i + toothAngleStepSize * 2.0 + toothTipStepSize), -radius * Math.sin(stepSize * i + toothAngleStepSize * 2.0 + toothTipStepSize)));

                            vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2((radius + toothHeight) * Math.cos(stepSize * i + toothAngleStepSize + toothTipStepSize), -(radius + toothHeight) * Math.sin(stepSize * i + toothAngleStepSize + toothTipStepSize)));
                        }

                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2((radius + toothHeight) * Math.cos(stepSize * i + toothAngleStepSize), -(radius + toothHeight) * Math.sin(stepSize * i + toothAngleStepSize)));

                        vertices.add(new Microsoft.Xna.Framework.Vector2.$ctor2(radius * Math.cos(stepSize * i), -radius * Math.sin(stepSize * i)));
                    }

                    return vertices;
                },
                /**
                 * Detects the vertices by analyzing the texture data.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonTools
                 * @memberof FarseerPhysics.Common.PolygonTools
                 * @param   {Array.<number>}                    data     The texture data.
                 * @param   {number}                            width    The texture width.
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                CreatePolygon: function (data, width) {
                    return FarseerPhysics.Common.TextureConverter.DetectVertices(data, width);
                },
                /**
                 * Detects the vertices by analyzing the texture data.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonTools
                 * @memberof FarseerPhysics.Common.PolygonTools
                 * @param   {Array.<number>}                    data             The texture data.
                 * @param   {number}                            width            The texture width.
                 * @param   {boolean}                           holeDetection    if set to <pre><code>true</code></pre> it will perform hole detection.
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                CreatePolygon$1: function (data, width, holeDetection) {
                    return FarseerPhysics.Common.TextureConverter.DetectVertices$1(data, width, holeDetection);
                },
                /**
                 * Detects the vertices by analyzing the texture data.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.PolygonTools
                 * @memberof FarseerPhysics.Common.PolygonTools
                 * @param   {Array.<number>}                       data                  The texture data.
                 * @param   {number}                               width                 The texture width.
                 * @param   {number}                               hullTolerance         The hull tolerance.
                 * @param   {number}                               alphaTolerance        The alpha tolerance.
                 * @param   {boolean}                              multiPartDetection    if set to <pre><code>true</code></pre> it will perform multi part detection.
                 * @param   {boolean}                              holeDetection         if set to <pre><code>true</code></pre> it will perform hole detection.
                 * @return  {System.Collections.Generic.List$1}
                 */
                CreatePolygon$2: function (data, width, hullTolerance, alphaTolerance, multiPartDetection, holeDetection) {
                    return FarseerPhysics.Common.TextureConverter.DetectVertices$2(data, width, hullTolerance, alphaTolerance, multiPartDetection, holeDetection);
                }
            }
        }
    });

    /**
     * This describes the motion of a body/shape for TOI computation.
     Shapes are defined with respect to the body origin, which may
     no coincide with the center of mass. However, to support dynamics
     we must interpolate the center of mass position.
     *
     * @public
     * @class FarseerPhysics.Common.Sweep
     */
    Bridge.define("FarseerPhysics.Common.Sweep", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Common.Sweep(); }
            }
        },
        fields: {
            /**
             * World angles
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.Sweep
             * @type number
             */
            A: 0,
            A0: 0,
            /**
             * Fraction of the current time step in the range [0,1]
             c0 and a0 are the positions at alpha0.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.Sweep
             * @type number
             */
            Alpha0: 0,
            /**
             * Center world positions
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.Sweep
             * @type Microsoft.Xna.Framework.Vector2
             */
            C: null,
            C0: null,
            /**
             * Local center of mass position
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.Sweep
             * @type Microsoft.Xna.Framework.Vector2
             */
            LocalCenter: null
        },
        ctors: {
            init: function () {
                this.C = new Microsoft.Xna.Framework.Vector2();
                this.C0 = new Microsoft.Xna.Framework.Vector2();
                this.LocalCenter = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            /**
             * Get the interpolated transform at a specific time.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Sweep
             * @memberof FarseerPhysics.Common.Sweep
             * @param   {FarseerPhysics.Common.Transform}    xf      The transform.
             * @param   {number}                             beta    beta is a factor in [0,1], where 0 indicates alpha0.
             * @return  {void}
             */
            GetTransform: function (xf, beta) {
                xf.v = new FarseerPhysics.Common.Transform.ctor();
                xf.v.Position.X = (1.0 - beta) * this.C0.X + beta * this.C.X;
                xf.v.Position.Y = (1.0 - beta) * this.C0.Y + beta * this.C.Y;
                var angle = (1.0 - beta) * this.A0 + beta * this.A;
                xf.v.R.Set$1(angle);

                xf.v.Position = Microsoft.Xna.Framework.Vector2.op_Subtraction(xf.v.Position.$clone(), FarseerPhysics.Common.MathUtils.Multiply$1(Bridge.ref(xf.v, "R"), Bridge.ref(this, "LocalCenter")));
            },
            /**
             * Advance the sweep forward, yielding a new initial state.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Sweep
             * @memberof FarseerPhysics.Common.Sweep
             * @param   {number}    alpha    new initial time..
             * @return  {void}
             */
            Advance: function (alpha) {
                System.Diagnostics.Debug.Assert(this.Alpha0 < 1.0);
                var beta = (alpha - this.Alpha0) / (1.0 - this.Alpha0);
                this.C0.X = (1.0 - beta) * this.C0.X + beta * this.C.X;
                this.C0.Y = (1.0 - beta) * this.C0.Y + beta * this.C.Y;
                this.A0 = (1.0 - beta) * this.A0 + beta * this.A;
                this.Alpha0 = alpha;
            },
            /**
             * Normalize the angles.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Sweep
             * @memberof FarseerPhysics.Common.Sweep
             * @return  {void}
             */
            Normalize: function () {
                var d = Microsoft.Xna.Framework.MathHelper.TwoPi * Math.floor(this.A0 / Microsoft.Xna.Framework.MathHelper.TwoPi);
                this.A0 -= d;
                this.A -= d;
            },
            getHashCode: function () {
                var h = Bridge.addHash([1701148611, this.A, this.A0, this.Alpha0, this.C, this.C0, this.LocalCenter]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Common.Sweep)) {
                    return false;
                }
                return Bridge.equals(this.A, o.A) && Bridge.equals(this.A0, o.A0) && Bridge.equals(this.Alpha0, o.Alpha0) && Bridge.equals(this.C, o.C) && Bridge.equals(this.C0, o.C0) && Bridge.equals(this.LocalCenter, o.LocalCenter);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Common.Sweep();
                s.A = this.A;
                s.A0 = this.A0;
                s.Alpha0 = this.Alpha0;
                s.C = this.C.$clone();
                s.C0 = this.C0.$clone();
                s.LocalCenter = this.LocalCenter.$clone();
                return s;
            }
        }
    });

    /**
     * @public
     * @class FarseerPhysics.Common.TextureConverter
     */
    Bridge.define("FarseerPhysics.Common.TextureConverter", {
        statics: {
            fields: {
                _CLOSEPIXELS_LENGTH: 0,
                /**
                 * This array is ment to be readonly.
                 It's not because it is accessed very frequently.
                 *
                 * @static
                 * @private
                 * @memberof FarseerPhysics.Common.TextureConverter
                 * @type Array.<number>
                 */
                ClosePixels: null
            },
            ctors: {
                init: function () {
                    this._CLOSEPIXELS_LENGTH = 8;
                    this.ClosePixels = System.Array.create(0, [[-1, -1], [0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0]], System.Int32, 8, 2);
                }
            },
            methods: {
                /**
                 * Detects the vertices of the supplied texture data. (PolygonDetectionType.Integrated)
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.TextureConverter
                 * @memberof FarseerPhysics.Common.TextureConverter
                 * @param   {Array.<number>}                    data     The texture data.
                 * @param   {number}                            width    The texture width.
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                DetectVertices: function (data, width) {
                    var tc = new FarseerPhysics.Common.TextureConverter.$ctor2(data, width);

                    var detectedVerticesList = tc.DetectVertices();

                    return detectedVerticesList.getItem(0);
                },
                /**
                 * Detects the vertices of the supplied texture data.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.TextureConverter
                 * @memberof FarseerPhysics.Common.TextureConverter
                 * @param   {Array.<number>}                    data             The texture data.
                 * @param   {number}                            width            The texture width.
                 * @param   {boolean}                           holeDetection    if set to <pre><code>true</code></pre> it will perform hole detection.
                 * @return  {FarseerPhysics.Common.Vertices}
                 */
                DetectVertices$1: function (data, width, holeDetection) {
                    var $t;
                    var tc = ($t = new FarseerPhysics.Common.TextureConverter.$ctor2(data, width), $t.HoleDetection = holeDetection, $t);

                    var detectedVerticesList = tc.DetectVertices();

                    return detectedVerticesList.getItem(0);
                },
                /**
                 * Detects the vertices of the supplied texture data.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Common.TextureConverter
                 * @memberof FarseerPhysics.Common.TextureConverter
                 * @param   {Array.<number>}                       data                  The texture data.
                 * @param   {number}                               width                 The texture width.
                 * @param   {number}                               hullTolerance         The hull tolerance.
                 * @param   {number}                               alphaTolerance        The alpha tolerance.
                 * @param   {boolean}                              multiPartDetection    if set to <pre><code>true</code></pre> it will perform multi part detection.
                 * @param   {boolean}                              holeDetection         if set to <pre><code>true</code></pre> it will perform hole detection.
                 * @return  {System.Collections.Generic.List$1}
                 */
                DetectVertices$2: function (data, width, hullTolerance, alphaTolerance, multiPartDetection, holeDetection) {
                    var $t;
                    var tc = ($t = new FarseerPhysics.Common.TextureConverter.$ctor2(data, width), $t.HullTolerance = hullTolerance, $t.AlphaTolerance = alphaTolerance, $t.MultipartDetection = multiPartDetection, $t.HoleDetection = holeDetection, $t);

                    var detectedVerticesList = tc.DetectVertices();
                    var result = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();

                    for (var i = 0; i < detectedVerticesList.Count; i = (i + 1) | 0) {
                        result.add(detectedVerticesList.getItem(i));
                    }

                    return result;
                }
            }
        },
        fields: {
            _data: null,
            _dataLength: 0,
            _width: 0,
            _height: 0,
            _polygonDetectionType: 0,
            _alphaTolerance: 0,
            _hullTolerance: 0,
            _holeDetection: false,
            _multipartDetection: false,
            _pixelOffsetOptimization: false,
            _transform: null,
            _tempIsSolidX: 0,
            _tempIsSolidY: 0
        },
        props: {
            /**
             * Get or set the polygon detection type.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.TextureConverter
             * @function PolygonDetectionType
             * @type FarseerPhysics.Common.VerticesDetectionType
             */
            PolygonDetectionType: {
                get: function () {
                    return this._polygonDetectionType;
                },
                set: function (value) {
                    this._polygonDetectionType = value;
                }
            },
            /**
             * Will detect texture 'holes' if set to true. Slows down the detection. Default is false.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.TextureConverter
             * @function HoleDetection
             * @type boolean
             */
            HoleDetection: {
                get: function () {
                    return this._holeDetection;
                },
                set: function (value) {
                    this._holeDetection = value;
                }
            },
            /**
             * Will detect texture multiple 'solid' isles if set to true. Slows down the detection. Default is false.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.TextureConverter
             * @function MultipartDetection
             * @type boolean
             */
            MultipartDetection: {
                get: function () {
                    return this._multipartDetection;
                },
                set: function (value) {
                    this._multipartDetection = value;
                }
            },
            /**
             * Will optimize the vertex positions along the interpolated normal between two edges about a half pixel (post processing). Default is false.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.TextureConverter
             * @function PixelOffsetOptimization
             * @type boolean
             */
            PixelOffsetOptimization: {
                get: function () {
                    return this._pixelOffsetOptimization;
                },
                set: function (value) {
                    this._pixelOffsetOptimization = value;
                }
            },
            /**
             * Can be used for scaling.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.TextureConverter
             * @function Transform
             * @type Microsoft.Xna.Framework.Matrix
             */
            Transform: {
                get: function () {
                    return this._transform.$clone();
                },
                set: function (value) {
                    this._transform = value.$clone();
                }
            },
            /**
             * Alpha (coverage) tolerance. Default is 20: Every pixel with a coverage value equal or greater to 20 will be counts as solid.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.TextureConverter
             * @function AlphaTolerance
             * @type number
             */
            AlphaTolerance: {
                get: function () {
                    return ((this._alphaTolerance >>> 24) & 255);
                },
                set: function (value) {
                    this._alphaTolerance = (value << 24) >>> 0;
                }
            },
            /**
             * Default is 1.5f.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.TextureConverter
             * @function HullTolerance
             * @type number
             */
            HullTolerance: {
                get: function () {
                    return this._hullTolerance;
                },
                set: function (value) {
                    if (value > 4.0) {
                        this._hullTolerance = 4.0;
                    } else if (value < 0.9) {
                        this._hullTolerance = 0.9;
                    } else {
                        this._hullTolerance = value;
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this._transform = new Microsoft.Xna.Framework.Matrix();
                this._transform = Microsoft.Xna.Framework.Matrix.Identity.$clone();
            },
            ctor: function () {
                this.$initialize();
                this.Initialize(null, null, null, null, null, null, null, null);
            },
            $ctor1: function (alphaTolerance, hullTolerance, holeDetection, multipartDetection, pixelOffsetOptimization, transform) {
                this.$initialize();
                this.Initialize(null, null, alphaTolerance, hullTolerance, holeDetection, multipartDetection, pixelOffsetOptimization, System.Nullable.lift1("$clone", transform));
            },
            $ctor2: function (data, width) {
                this.$initialize();
                this.Initialize(data, width, null, null, null, null, null, null);
            },
            $ctor3: function (data, width, alphaTolerance, hullTolerance, holeDetection, multipartDetection, pixelOffsetOptimization, transform) {
                this.$initialize();
                this.Initialize(data, width, alphaTolerance, hullTolerance, holeDetection, multipartDetection, pixelOffsetOptimization, System.Nullable.lift1("$clone", transform));
            }
        },
        methods: {
            Initialize: function (data, width, alphaTolerance, hullTolerance, holeDetection, multipartDetection, pixelOffsetOptimization, transform) {
                if (data != null && !System.Nullable.hasValue(width)) {
                    throw new System.ArgumentNullException.$ctor3("width", "'width' can't be null if 'data' is set.");
                }

                if (data == null && System.Nullable.hasValue(width)) {
                    throw new System.ArgumentNullException.$ctor3("data", "'data' can't be null if 'width' is set.");
                }

                if (data != null && System.Nullable.hasValue(width)) {
                    this.SetTextureData(data, System.Nullable.getValue(width));
                }

                if (System.Nullable.hasValue(alphaTolerance)) {
                    this.AlphaTolerance = System.Nullable.getValue(alphaTolerance);
                } else {
                    this.AlphaTolerance = 20;
                }

                if (System.Nullable.hasValue(hullTolerance)) {
                    this.HullTolerance = System.Nullable.getValue(hullTolerance);
                } else {
                    this.HullTolerance = 1.5;
                }

                if (System.Nullable.hasValue(holeDetection)) {
                    this.HoleDetection = System.Nullable.getValue(holeDetection);
                } else {
                    this.HoleDetection = false;
                }

                if (System.Nullable.hasValue(multipartDetection)) {
                    this.MultipartDetection = System.Nullable.getValue(multipartDetection);
                } else {
                    this.MultipartDetection = false;
                }

                if (System.Nullable.hasValue(pixelOffsetOptimization)) {
                    this.PixelOffsetOptimization = System.Nullable.getValue(pixelOffsetOptimization);
                } else {
                    this.PixelOffsetOptimization = false;
                }

                if (System.Nullable.hasValue(transform)) {
                    this.Transform = System.Nullable.getValue(transform).$clone();
                } else {
                    this.Transform = Microsoft.Xna.Framework.Matrix.Identity.$clone();
                }
            },
            /**
             * @instance
             * @private
             * @this FarseerPhysics.Common.TextureConverter
             * @memberof FarseerPhysics.Common.TextureConverter
             * @param   {Array.<number>}    data     
             * @param   {number}            width
             * @return  {void}
             */
            SetTextureData: function (data, width) {
                if (data == null) {
                    throw new System.ArgumentNullException.$ctor3("data", "'data' can't be null.");
                }

                if (data.length < 4) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("data", "'data' length can't be less then 4. Your texture must be at least 2 x 2 pixels in size.");
                }

                if (width < 2) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("width", "'width' can't be less then 2. Your texture must be at least 2 x 2 pixels in size.");
                }

                if (data.length % width !== 0) {
                    throw new System.ArgumentException.$ctor1("'width' has an invalid value.");
                }

                this._data = data;
                this._dataLength = this._data.length;
                this._width = width;
                this._height = (Bridge.Int.div(this._dataLength, width)) | 0;
            },
            DetectVertices: function () {

                if (this._data == null) {
                    throw new System.Exception("'_data' can't be null. You have to use SetTextureData(uint[] data, int width) before calling this method.");
                }

                if (this._data.length < 4) {
                    throw new System.Exception("'_data' length can't be less then 4. Your texture must be at least 2 x 2 pixels in size. You have to use SetTextureData(uint[] data, int width) before calling this method.");
                }

                if (this._width < 2) {
                    throw new System.Exception("'_width' can't be less then 2. Your texture must be at least 2 x 2 pixels in size. You have to use SetTextureData(uint[] data, int width) before calling this method.");
                }

                if (this._data.length % this._width !== 0) {
                    throw new System.Exception("'_width' has an invalid value. You have to use SetTextureData(uint[] data, int width) before calling this method.");
                }



                var detectedPolygons = { v : new (System.Collections.Generic.List$1(FarseerPhysics.Common.DetectedVertices)).ctor() };

                var polygon;
                var holePolygon;

                var holeEntrance = null;
                var polygonEntrance = { v : null };

                var blackList = new (System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector2)).ctor();

                var searchOn;
                do {
                    if (detectedPolygons.v.Count === 0) {
                        polygon = new FarseerPhysics.Common.DetectedVertices.$ctor1(this.CreateSimplePolygon(Microsoft.Xna.Framework.Vector2.Zero.$clone(), Microsoft.Xna.Framework.Vector2.Zero.$clone()));

                        if (polygon.Count > 2) {
                            polygonEntrance.v = this.GetTopMostVertex(polygon);
                        }
                    } else if (System.Nullable.hasValue(polygonEntrance.v)) {
                        polygon = new FarseerPhysics.Common.DetectedVertices.$ctor1(this.CreateSimplePolygon(System.Nullable.getValue(polygonEntrance.v).$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(System.Nullable.getValue(polygonEntrance.v).X - 1.0, System.Nullable.getValue(polygonEntrance.v).Y)));
                    } else {
                        break;
                    }

                    searchOn = false;


                    if (polygon.Count > 2) {
                        if (this._holeDetection) {
                            do {
                                holeEntrance = this.SearchHoleEntrance(polygon, System.Nullable.lift1("$clone", holeEntrance));

                                if (System.Nullable.hasValue(holeEntrance)) {
                                    if (!blackList.contains(System.Nullable.getValue(holeEntrance).$clone())) {
                                        blackList.add(System.Nullable.getValue(holeEntrance).$clone());
                                        holePolygon = this.CreateSimplePolygon(System.Nullable.getValue(holeEntrance).$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(System.Nullable.getValue(holeEntrance).X + 1, System.Nullable.getValue(holeEntrance).Y));

                                        if (holePolygon != null && holePolygon.Count > 2) {
                                            switch (this._polygonDetectionType) {
                                                case FarseerPhysics.Common.VerticesDetectionType.Integrated: 
                                                    holePolygon.add(holePolygon.getItem(0).$clone());
                                                    var vertex1Index = { }, vertex2Index = { };
                                                    if (this.SplitPolygonEdge(polygon, System.Nullable.getValue(holeEntrance).$clone(), vertex1Index, vertex2Index)) {
                                                        polygon.InsertRange(vertex2Index.v, holePolygon);
                                                    }
                                                    break;
                                                case FarseerPhysics.Common.VerticesDetectionType.Separated: 
                                                    if (polygon.Holes == null) {
                                                        polygon.Holes = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();
                                                    }
                                                    polygon.Holes.add(holePolygon);
                                                    break;
                                            }
                                        }
                                    } else {
                                        break;
                                    }
                                } else {
                                    break;
                                }
                            } while (true);
                        }

                        detectedPolygons.v.add(polygon);
                    }

                    if (this._multipartDetection || polygon.Count <= 2) {
                        if (this.SearchNextHullEntrance(detectedPolygons.v, System.Nullable.getValue(polygonEntrance.v).$clone(), polygonEntrance)) {
                            searchOn = true;
                        }
                    }
                } while (searchOn);

                if (detectedPolygons.v == null || (detectedPolygons.v != null && detectedPolygons.v.Count === 0)) {
                    throw new System.Exception("Couldn't detect any vertices.");
                }


                if (this.PolygonDetectionType === FarseerPhysics.Common.VerticesDetectionType.Separated) {
                    this.ApplyTriangulationCompatibleWinding(detectedPolygons);
                }

                if (this._pixelOffsetOptimization) {
                    this.ApplyPixelOffsetOptimization(detectedPolygons);
                }

                if (Microsoft.Xna.Framework.Matrix.op_Inequality(this._transform.$clone(), Microsoft.Xna.Framework.Matrix.Identity.$clone())) {
                    this.ApplyTransform(detectedPolygons);
                }


                return detectedPolygons.v;
            },
            ApplyTriangulationCompatibleWinding: function (detectedPolygons) {
                for (var i = 0; i < detectedPolygons.v.Count; i = (i + 1) | 0) {
                    detectedPolygons.v.getItem(i).Reverse();

                    if (detectedPolygons.v.getItem(i).Holes != null && detectedPolygons.v.getItem(i).Holes.Count > 0) {
                        for (var j = 0; j < detectedPolygons.v.getItem(i).Holes.Count; j = (j + 1) | 0) {
                            detectedPolygons.v.getItem(i).Holes.getItem(j).Reverse();
                        }
                    }
                }
            },
            ApplyPixelOffsetOptimization: function (detectedPolygons) {

            },
            ApplyTransform: function (detectedPolygons) {
                for (var i = 0; i < detectedPolygons.v.Count; i = (i + 1) | 0) {
                    detectedPolygons.v.getItem(i).Transform(this._transform.$clone());
                }
            },
            IsSolid: function (v) {
                this._tempIsSolidX = Bridge.Int.clip32(v.v.X);
                this._tempIsSolidY = Bridge.Int.clip32(v.v.Y);

                if (this._tempIsSolidX >= 0 && this._tempIsSolidX < this._width && this._tempIsSolidY >= 0 && this._tempIsSolidY < this._height) {
                    return (this._data[System.Array.index(((this._tempIsSolidX + Bridge.Int.mul(this._tempIsSolidY, this._width)) | 0), this._data)] >= this._alphaTolerance);
                }

                return false;
            },
            IsSolid$2: function (x, y) {
                if (x.v >= 0 && x.v < this._width && y.v >= 0 && y.v < this._height) {
                    return (this._data[System.Array.index(((x.v + Bridge.Int.mul(y.v, this._width)) | 0), this._data)] >= this._alphaTolerance);
                }

                return false;
            },
            IsSolid$1: function (index) {
                if (index.v >= 0 && index.v < this._dataLength) {
                    return (this._data[System.Array.index(index.v, this._data)] >= this._alphaTolerance);
                }

                return false;
            },
            InBounds: function (coord) {
                return (coord.v.X >= 0.0 && coord.v.X < this._width && coord.v.Y >= 0.0 && coord.v.Y < this._height);
            },
            /**
             * Function to search for an entrance point of a hole in a polygon. It searches the polygon from top to bottom between the polygon edges.
             *
             * @instance
             * @private
             * @this FarseerPhysics.Common.TextureConverter
             * @memberof FarseerPhysics.Common.TextureConverter
             * @param   {FarseerPhysics.Common.Vertices}      polygon             The polygon to search in.
             * @param   {?Microsoft.Xna.Framework.Vector2}    lastHoleEntrance    The last entrance point.
             * @return  {?Microsoft.Xna.Framework.Vector2}                        The next holes entrance point. Null if ther are no holes.
             */
            SearchHoleEntrance: function (polygon, lastHoleEntrance) {
                if (polygon == null) {
                    throw new System.ArgumentNullException.$ctor1("'polygon' can't be null.");
                }

                if (polygon.Count < 3) {
                    throw new System.ArgumentException.$ctor1("'polygon.MainPolygon.Count' can't be less then 3.");
                }


                var xCoords;
                var entrance;

                var startY;
                var endY;

                var lastSolid = 0;
                var foundSolid;
                var foundTransparent;

                if (System.Nullable.hasValue(lastHoleEntrance)) {
                    startY = Bridge.Int.clip32(System.Nullable.getValue(lastHoleEntrance).Y);
                } else {
                    startY = Bridge.Int.clip32(this.GetTopMostCoord(polygon));
                }

                endY = Bridge.Int.clip32(this.GetBottomMostCoord(polygon));

                if (startY > 0 && startY < this._height && endY > 0 && endY < this._height) {
                    for (var y = { v : startY }; y.v <= endY; y.v = (y.v + 1) | 0) {
                        xCoords = this.SearchCrossingEdges$1(polygon, y.v);

                        if (xCoords.Count > 1 && xCoords.Count % 2 === 0) {
                            for (var i = 0; i < xCoords.Count; i = (i + 2) | 0) {
                                foundSolid = false;
                                foundTransparent = false;

                                for (var x = { v : Bridge.Int.clip32(xCoords.getItem(i)) }; x.v <= Bridge.Int.clip32(xCoords.getItem(((i + 1) | 0))); x.v = (x.v + 1) | 0) {



                                    if (this.IsSolid$2(x, y)) {
                                        if (!foundTransparent) {
                                            foundSolid = true;
                                            lastSolid = x.v;
                                        }

                                        if (foundSolid && foundTransparent) {
                                            entrance = new Microsoft.Xna.Framework.Vector2.$ctor2(lastSolid, y.v);

                                            if (this.DistanceToHullAcceptable$1(polygon, System.Nullable.getValue(entrance).$clone(), true)) {
                                                return System.Nullable.lift1("$clone", entrance);
                                            }

                                            entrance = null;
                                            break;
                                        }
                                    } else {
                                        if (foundSolid) {
                                            foundTransparent = true;
                                        }
                                    }
                                }
                            }
                        } else {
                            if (xCoords.Count % 2 === 0) {
                                System.Diagnostics.Debug.WriteLine$2("SearchCrossingEdges() % 2 != 0");
                            }
                        }
                    }
                }

                return null;
            },
            DistanceToHullAcceptable: function (polygon, point, higherDetail) {
                if (polygon == null) {
                    throw new System.ArgumentNullException.$ctor3("polygon", "'polygon' can't be null.");
                }

                if (polygon.Count < 3) {
                    throw new System.ArgumentException.$ctor1("'polygon.MainPolygon.Count' can't be less then 3.");
                }

                if (this.DistanceToHullAcceptable$1(Bridge.cast(polygon, FarseerPhysics.Common.Vertices), point.$clone(), higherDetail)) {
                    if (polygon.Holes != null) {
                        for (var i = 0; i < polygon.Holes.Count; i = (i + 1) | 0) {
                            if (!this.DistanceToHullAcceptable$1(polygon.Holes.getItem(i), point.$clone(), higherDetail)) {
                                return false;
                            }
                        }
                    }

                    return true;
                }

                return false;
            },
            DistanceToHullAcceptable$1: function (polygon, point, higherDetail) {
                point = {v:point};
                if (polygon == null) {
                    throw new System.ArgumentNullException.$ctor3("polygon", "'polygon' can't be null.");
                }

                if (polygon.Count < 3) {
                    throw new System.ArgumentException.$ctor1("'polygon.Count' can't be less then 3.");
                }


                var edgeVertex2 = { v : polygon.getItem(((polygon.Count - 1) | 0)).$clone() };
                var edgeVertex1 = { v : new Microsoft.Xna.Framework.Vector2() };

                if (higherDetail) {
                    for (var i = 0; i < polygon.Count; i = (i + 1) | 0) {
                        edgeVertex1.v = polygon.getItem(i).$clone();

                        if (FarseerPhysics.Common.LineTools.DistanceBetweenPointAndLineSegment(point, edgeVertex1, edgeVertex2) <= this._hullTolerance || FarseerPhysics.Common.LineTools.DistanceBetweenPointAndPoint(point, edgeVertex1) <= this._hullTolerance) {
                            return false;
                        }

                        edgeVertex2.v = polygon.getItem(i).$clone();
                    }

                    return true;
                } else {
                    for (var i1 = 0; i1 < polygon.Count; i1 = (i1 + 1) | 0) {
                        edgeVertex1.v = polygon.getItem(i1).$clone();

                        if (FarseerPhysics.Common.LineTools.DistanceBetweenPointAndLineSegment(point, edgeVertex1, edgeVertex2) <= this._hullTolerance) {
                            return false;
                        }

                        edgeVertex2.v = polygon.getItem(i1).$clone();
                    }

                    return true;
                }
            },
            InPolygon: function (polygon, point) {
                var inPolygon = !this.DistanceToHullAcceptable(polygon, point.$clone(), true);

                if (!inPolygon) {
                    var xCoords = this.SearchCrossingEdges(polygon, Bridge.Int.clip32(point.Y));

                    if (xCoords.Count > 0 && xCoords.Count % 2 === 0) {
                        for (var i = 0; i < xCoords.Count; i = (i + 2) | 0) {
                            if (xCoords.getItem(i) <= point.X && xCoords.getItem(((i + 1) | 0)) >= point.X) {
                                return true;
                            }
                        }
                    }

                    return false;
                }

                return true;
            },
            GetTopMostVertex: function (vertices) {
                var topMostValue = 3.40282347E+38;
                var topMost = null;

                for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                    if (topMostValue > vertices.getItem(i).$clone().Y) {
                        topMostValue = vertices.getItem(i).$clone().Y;
                        topMost = vertices.getItem(i).$clone();
                    }
                }

                return System.Nullable.lift1("$clone", topMost);
            },
            GetTopMostCoord: function (vertices) {
                var returnValue = 3.40282347E+38;

                for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                    if (returnValue > vertices.getItem(i).$clone().Y) {
                        returnValue = vertices.getItem(i).$clone().Y;
                    }
                }

                return returnValue;
            },
            GetBottomMostCoord: function (vertices) {
                var returnValue = -3.40282347E+38;

                for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                    if (returnValue < vertices.getItem(i).$clone().Y) {
                        returnValue = vertices.getItem(i).$clone().Y;
                    }
                }

                return returnValue;
            },
            SearchCrossingEdges: function (polygon, y) {
                if (polygon == null) {
                    throw new System.ArgumentNullException.$ctor3("polygon", "'polygon' can't be null.");
                }

                if (polygon.Count < 3) {
                    throw new System.ArgumentException.$ctor1("'polygon.MainPolygon.Count' can't be less then 3.");
                }

                var result = this.SearchCrossingEdges$1(Bridge.cast(polygon, FarseerPhysics.Common.Vertices), y);

                if (polygon.Holes != null) {
                    for (var i = 0; i < polygon.Holes.Count; i = (i + 1) | 0) {
                        result.AddRange(this.SearchCrossingEdges$1(polygon.Holes.getItem(i), y));
                    }
                }

                result.Sort();
                return result;
            },
            /**
             * Searches the polygon for the x coordinates of the edges that cross the specified y coordinate.
             *
             * @instance
             * @private
             * @this FarseerPhysics.Common.TextureConverter
             * @memberof FarseerPhysics.Common.TextureConverter
             * @param   {FarseerPhysics.Common.Vertices}       polygon    Polygon to search in.
             * @param   {number}                               y          Y coordinate to check for edges.
             * @return  {System.Collections.Generic.List$1}               Descending sorted list of x coordinates of edges that cross the specified y coordinate.
             */
            SearchCrossingEdges$1: function (polygon, y) {

                var edges = new (System.Collections.Generic.List$1(System.Single)).ctor();

                var slope = new Microsoft.Xna.Framework.Vector2();
                var vertex1 = new Microsoft.Xna.Framework.Vector2();
                var vertex2 = new Microsoft.Xna.Framework.Vector2();

                var nextSlope = new Microsoft.Xna.Framework.Vector2();
                var nextVertex = new Microsoft.Xna.Framework.Vector2();

                var addFind;

                if (polygon.Count > 2) {
                    vertex2 = polygon.getItem(((polygon.Count - 1) | 0)).$clone();

                    for (var i = 0; i < polygon.Count; i = (i + 1) | 0) {
                        vertex1 = polygon.getItem(i).$clone();

                        if ((vertex1.Y >= y && vertex2.Y <= y) || (vertex1.Y <= y && vertex2.Y >= y)) {
                            if (vertex1.Y !== vertex2.Y) {
                                addFind = true;
                                slope = Microsoft.Xna.Framework.Vector2.op_Subtraction(vertex2.$clone(), vertex1.$clone());

                                if (vertex1.Y === y) {
                                    nextVertex = polygon.getItem((((i + 1) | 0)) % polygon.Count).$clone();
                                    nextSlope = Microsoft.Xna.Framework.Vector2.op_Subtraction(vertex1.$clone(), nextVertex.$clone());

                                    if (slope.Y > 0) {
                                        addFind = (nextSlope.Y <= 0);
                                    } else {
                                        addFind = (nextSlope.Y >= 0);
                                    }
                                }

                                if (addFind) {
                                    edges.add((y - vertex1.Y) / slope.Y * slope.X + vertex1.X);
                                }
                            }
                        }

                        vertex2 = vertex1.$clone();
                    }
                }

                edges.Sort();
                return edges;
            },
            SplitPolygonEdge: function (polygon, coordInsideThePolygon, vertex1Index, vertex2Index) {
                var slope = new Microsoft.Xna.Framework.Vector2();
                var nearestEdgeVertex1Index = 0;
                var nearestEdgeVertex2Index = 0;
                var edgeFound = false;

                var shortestDistance = 3.40282347E+38;

                var edgeCoordFound = false;
                var foundEdgeCoord = { v : Microsoft.Xna.Framework.Vector2.Zero.$clone() };

                var xCoords = this.SearchCrossingEdges$1(polygon, Bridge.Int.clip32(coordInsideThePolygon.Y));

                vertex1Index.v = 0;
                vertex2Index.v = 0;

                foundEdgeCoord.v.Y = coordInsideThePolygon.Y;

                if (xCoords != null && xCoords.Count > 1 && xCoords.Count % 2 === 0) {
                    var distance;
                    for (var i = 0; i < xCoords.Count; i = (i + 1) | 0) {
                        if (xCoords.getItem(i) < coordInsideThePolygon.X) {
                            distance = coordInsideThePolygon.X - xCoords.getItem(i);

                            if (distance < shortestDistance) {
                                shortestDistance = distance;
                                foundEdgeCoord.v.X = xCoords.getItem(i);

                                edgeCoordFound = true;
                            }
                        }
                    }

                    if (edgeCoordFound) {
                        shortestDistance = 3.40282347E+38;

                        var edgeVertex2Index = (polygon.Count - 1) | 0;

                        var edgeVertex1Index;
                        for (edgeVertex1Index = 0; edgeVertex1Index < polygon.Count; edgeVertex1Index = (edgeVertex1Index + 1) | 0) {
                            var tempVector1 = { v : polygon.getItem(edgeVertex1Index).$clone() };
                            var tempVector2 = { v : polygon.getItem(edgeVertex2Index).$clone() };
                            distance = FarseerPhysics.Common.LineTools.DistanceBetweenPointAndLineSegment(foundEdgeCoord, tempVector1, tempVector2);
                            if (distance < shortestDistance) {
                                shortestDistance = distance;

                                nearestEdgeVertex1Index = edgeVertex1Index;
                                nearestEdgeVertex2Index = edgeVertex2Index;

                                edgeFound = true;
                            }

                            edgeVertex2Index = edgeVertex1Index;
                        }

                        if (edgeFound) {
                            slope = Microsoft.Xna.Framework.Vector2.op_Subtraction(polygon.getItem(nearestEdgeVertex2Index).$clone(), polygon.getItem(nearestEdgeVertex1Index).$clone());
                            slope.Normalize();

                            var tempVector = { v : polygon.getItem(nearestEdgeVertex1Index).$clone() };
                            distance = FarseerPhysics.Common.LineTools.DistanceBetweenPointAndPoint(tempVector, foundEdgeCoord);

                            vertex1Index.v = nearestEdgeVertex1Index;
                            vertex2Index.v = (nearestEdgeVertex1Index + 1) | 0;

                            polygon.insert(nearestEdgeVertex1Index, Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(distance, slope.$clone()), polygon.getItem(vertex1Index.v).$clone()));
                            polygon.insert(nearestEdgeVertex1Index, Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(distance, slope.$clone()), polygon.getItem(vertex2Index.v).$clone()));

                            return true;
                        }
                    }
                }

                return false;
            },
            /**
             * @instance
             * @private
             * @this FarseerPhysics.Common.TextureConverter
             * @memberof FarseerPhysics.Common.TextureConverter
             * @param   {Microsoft.Xna.Framework.Vector2}    entrance    
             * @param   {Microsoft.Xna.Framework.Vector2}    last
             * @return  {FarseerPhysics.Common.Vertices}
             */
            CreateSimplePolygon: function (entrance, last) {
                entrance = {v:entrance};
                last = {v:last};
                var entranceFound = false;
                var endOfHull = false;

                var polygon = new FarseerPhysics.Common.Vertices.$ctor3(32);
                var hullArea = new FarseerPhysics.Common.Vertices.$ctor3(32);
                var endOfHullArea = new FarseerPhysics.Common.Vertices.$ctor3(32);

                var current = { v : Microsoft.Xna.Framework.Vector2.Zero.$clone() };


                if (Microsoft.Xna.Framework.Vector2.op_Equality(entrance.v.$clone(), Microsoft.Xna.Framework.Vector2.Zero.$clone()) || !this.InBounds(entrance)) {
                    entranceFound = this.SearchHullEntrance(entrance);

                    if (entranceFound) {
                        current.v = new Microsoft.Xna.Framework.Vector2.$ctor2(entrance.v.X - 1.0, entrance.v.Y);
                    }
                } else {
                    if (this.IsSolid(entrance)) {
                        if (this.IsNearPixel(entrance, last)) {
                            current.v = last.v.$clone();
                            entranceFound = true;
                        } else {
                            var temp = { v : new Microsoft.Xna.Framework.Vector2() };
                            if (this.SearchNearPixels(false, entrance, temp)) {
                                current.v = temp.v.$clone();
                                entranceFound = true;
                            } else {
                                entranceFound = false;
                            }
                        }
                    }
                }


                if (entranceFound) {
                    polygon.add(entrance.v.$clone());
                    hullArea.add(entrance.v.$clone());

                    var next = { v : entrance.v.$clone() };

                    do {
                        var outstanding = { v : new Microsoft.Xna.Framework.Vector2() };
                        if (this.SearchForOutstandingVertex(hullArea, outstanding)) {
                            if (endOfHull) {
                                if (endOfHullArea.contains(outstanding.v.$clone())) {
                                    polygon.add(outstanding.v.$clone());
                                }

                                break;
                            }

                            polygon.add(outstanding.v.$clone());
                            hullArea.RemoveRange(0, hullArea.indexOf(outstanding.v.$clone()));
                        }

                        last.v = current.v.$clone();
                        current.v = next.v.$clone();

                        if (this.GetNextHullPoint(last, current, next)) {
                            hullArea.add(next.v.$clone());
                        } else {
                            break;
                        }

                        if (Microsoft.Xna.Framework.Vector2.op_Equality(next.v.$clone(), entrance.v.$clone()) && !endOfHull) {
                            endOfHull = true;
                            endOfHullArea.AddRange(hullArea);

                            if (endOfHullArea.contains(entrance.v.$clone())) {
                                endOfHullArea.remove(entrance.v.$clone());
                            }
                        }

                    } while (true);
                }

                return polygon;
            },
            SearchNearPixels: function (searchingForSolidPixel, current, foundPixel) {
                for (var i = 0; i < FarseerPhysics.Common.TextureConverter._CLOSEPIXELS_LENGTH; i = (i + 1) | 0) {
                    var x = { v : (Bridge.Int.clip32(current.v.X) + FarseerPhysics.Common.TextureConverter.ClosePixels.get([i, 0])) | 0 };
                    var y = { v : (Bridge.Int.clip32(current.v.Y) + FarseerPhysics.Common.TextureConverter.ClosePixels.get([i, 1])) | 0 };

                    if (!searchingForSolidPixel ^ this.IsSolid$2(x, y)) {
                        foundPixel.v = new Microsoft.Xna.Framework.Vector2.$ctor2(x.v, y.v);
                        return true;
                    }
                }

                foundPixel.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                return false;
            },
            IsNearPixel: function (current, near) {
                for (var i = 0; i < FarseerPhysics.Common.TextureConverter._CLOSEPIXELS_LENGTH; i = (i + 1) | 0) {
                    var x = (Bridge.Int.clip32(current.v.X) + FarseerPhysics.Common.TextureConverter.ClosePixels.get([i, 0])) | 0;
                    var y = (Bridge.Int.clip32(current.v.Y) + FarseerPhysics.Common.TextureConverter.ClosePixels.get([i, 1])) | 0;

                    if (x >= 0 && x <= this._width && y >= 0 && y <= this._height) {
                        if (x === Bridge.Int.clip32(near.v.X) && y === Bridge.Int.clip32(near.v.Y)) {
                            return true;
                        }
                    }
                }

                return false;
            },
            SearchHullEntrance: function (entrance) {
                for (var y = { v : 0 }; y.v <= this._height; y.v = (y.v + 1) | 0) {
                    for (var x = { v : 0 }; x.v <= this._width; x.v = (x.v + 1) | 0) {
                        if (this.IsSolid$2(x, y)) {
                            entrance.v = new Microsoft.Xna.Framework.Vector2.$ctor2(x.v, y.v);
                            return true;
                        }
                    }
                }

                entrance.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                return false;
            },
            /**
             * Searches for the next shape.
             *
             * @instance
             * @private
             * @this FarseerPhysics.Common.TextureConverter
             * @memberof FarseerPhysics.Common.TextureConverter
             * @param   {System.Collections.Generic.List$1}    detectedPolygons    Already detected polygons.
             * @param   {Microsoft.Xna.Framework.Vector2}      start               Search start coordinate.
             * @param   {System.Nullable}                      entrance            Returns the found entrance coordinate. Null if no other shapes found.
             * @return  {boolean}                                                  True if a new shape was found.
             */
            SearchNextHullEntrance: function (detectedPolygons, start, entrance) {
                var x;

                var foundTransparent = false;
                var inPolygon = false;

                for (var i = { v : (Bridge.Int.clip32(start.X) + Bridge.Int.mul(Bridge.Int.clip32(start.Y), this._width)) | 0 }; i.v <= this._dataLength; i.v = (i.v + 1) | 0) {
                    if (this.IsSolid$1(i)) {
                        if (foundTransparent) {
                            x = i.v % this._width;
                            entrance.v = new Microsoft.Xna.Framework.Vector2.$ctor2(x, (((i.v - x) | 0)) / this._width);

                            inPolygon = false;
                            for (var polygonIdx = 0; polygonIdx < detectedPolygons.Count; polygonIdx = (polygonIdx + 1) | 0) {
                                if (this.InPolygon(detectedPolygons.getItem(polygonIdx), System.Nullable.getValue(entrance.v).$clone())) {
                                    inPolygon = true;
                                    break;
                                }
                            }

                            if (inPolygon) {
                                foundTransparent = false;
                            } else {
                                return true;
                            }
                        }
                    } else {
                        foundTransparent = true;
                    }
                }

                entrance.v = null;
                return false;
            },
            GetNextHullPoint: function (last, current, next) {
                var x = { };
                var y = { };

                var indexOfFirstPixelToCheck = this.GetIndexOfFirstPixelToCheck(last, current);
                var indexOfPixelToCheck;

                for (var i = 0; i < FarseerPhysics.Common.TextureConverter._CLOSEPIXELS_LENGTH; i = (i + 1) | 0) {
                    indexOfPixelToCheck = (((indexOfFirstPixelToCheck + i) | 0)) % FarseerPhysics.Common.TextureConverter._CLOSEPIXELS_LENGTH;

                    x.v = (Bridge.Int.clip32(current.v.X) + FarseerPhysics.Common.TextureConverter.ClosePixels.get([indexOfPixelToCheck, 0])) | 0;
                    y.v = (Bridge.Int.clip32(current.v.Y) + FarseerPhysics.Common.TextureConverter.ClosePixels.get([indexOfPixelToCheck, 1])) | 0;

                    if (x.v >= 0 && x.v < this._width && y.v >= 0 && y.v <= this._height) {
                        if (this.IsSolid$2(x, y)) {
                            next.v = new Microsoft.Xna.Framework.Vector2.$ctor2(x.v, y.v);
                            return true;
                        }
                    }
                }

                next.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                return false;
            },
            SearchForOutstandingVertex: function (hullArea, outstanding) {
                var outstandingResult = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                var found = false;

                if (hullArea.Count > 2) {
                    var hullAreaLastPoint = (hullArea.Count - 1) | 0;

                    var tempVector1 = { v : new Microsoft.Xna.Framework.Vector2() };
                    var tempVector2 = { v : hullArea.getItem(0).$clone() };
                    var tempVector3 = { v : hullArea.getItem(hullAreaLastPoint).$clone() };

                    for (var i = 1; i < hullAreaLastPoint; i = (i + 1) | 0) {
                        tempVector1.v = hullArea.getItem(i).$clone();

                        if (FarseerPhysics.Common.LineTools.DistanceBetweenPointAndLineSegment(tempVector1, tempVector2, tempVector3) >= this._hullTolerance) {
                            outstandingResult = hullArea.getItem(i).$clone();
                            found = true;
                            break;
                        }
                    }
                }

                outstanding.v = outstandingResult.$clone();
                return found;
            },
            GetIndexOfFirstPixelToCheck: function (last, current) {


                switch (Bridge.Int.clip32(current.v.X - last.v.X)) {
                    case 1: 
                        switch (Bridge.Int.clip32(current.v.Y - last.v.Y)) {
                            case 1: 
                                return 1;
                            case 0: 
                                return 0;
                            case -1: 
                                return 7;
                        }
                        break;
                    case 0: 
                        switch (Bridge.Int.clip32(current.v.Y - last.v.Y)) {
                            case 1: 
                                return 2;
                            case -1: 
                                return 6;
                        }
                        break;
                    case -1: 
                        switch (Bridge.Int.clip32(current.v.Y - last.v.Y)) {
                            case 1: 
                                return 3;
                            case 0: 
                                return 4;
                            case -1: 
                                return 5;
                        }
                        break;
                }

                return 0;
            }
        }
    });

    /**
     * A transform contains translation and rotation. It is used to represent
     the position and orientation of rigid frames.
     *
     * @public
     * @class FarseerPhysics.Common.Transform
     */
    Bridge.define("FarseerPhysics.Common.Transform", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Common.Transform(); }
            }
        },
        fields: {
            Position: null,
            R: null
        },
        props: {
            /**
             * Calculate the angle that the rotation matrix represents.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Common.Transform
             * @function Angle
             * @type number
             */
            Angle: {
                get: function () {
                    return Math.atan2(this.R.Col1.Y, this.R.Col1.X);
                }
            }
        },
        ctors: {
            init: function () {
                this.Position = new Microsoft.Xna.Framework.Vector2();
                this.R = new FarseerPhysics.Common.Mat22();
            },
            /**
             * Initialize using a position vector and a rotation matrix.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Transform
             * @memberof FarseerPhysics.Common.Transform
             * @param   {Microsoft.Xna.Framework.Vector2}    position    The position.
             * @param   {FarseerPhysics.Common.Mat22}        r           The r.
             * @return  {void}
             */
            $ctor1: function (position, r) {
                this.$initialize();
                this.Position = position.v.$clone();
                this.R = r.v.$clone();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            /**
             * Set this to the identity transform.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Transform
             * @memberof FarseerPhysics.Common.Transform
             * @return  {void}
             */
            SetIdentity: function () {
                this.Position = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                this.R.SetIdentity();
            },
            /**
             * Set this based on the position and angle.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.Transform
             * @memberof FarseerPhysics.Common.Transform
             * @param   {Microsoft.Xna.Framework.Vector2}    position    The position.
             * @param   {number}                             angle       The angle.
             * @return  {void}
             */
            Set: function (position, angle) {
                this.Position = position.$clone();
                this.R.Set$1(angle);
            },
            getHashCode: function () {
                var h = Bridge.addHash([3771783476, this.Position, this.R]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Common.Transform)) {
                    return false;
                }
                return Bridge.equals(this.Position, o.Position) && Bridge.equals(this.R, o.R);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Common.Transform();
                s.Position = this.Position.$clone();
                s.R = this.R.$clone();
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Vertices.PolyNode", {
        $kind: "nested class",
        statics: {
            fields: {
                MaxConnected: 0
            },
            ctors: {
                init: function () {
                    this.MaxConnected = 32;
                }
            }
        },
        fields: {
            Connected: null,
            NConnected: 0,
            Position: null
        },
        ctors: {
            init: function () {
                this.Position = new Microsoft.Xna.Framework.Vector2();
                this.Connected = System.Array.init(FarseerPhysics.Common.Vertices.PolyNode.MaxConnected, null, FarseerPhysics.Common.Vertices.PolyNode);
            },
            ctor: function (pos) {
                this.$initialize();
                this.Position = pos.$clone();
                this.NConnected = 0;
            }
        },
        methods: {
            IsRighter: function (sinA, cosA, sinB, cosB) {
                if (sinA < 0) {
                    if (sinB > 0 || cosA <= cosB) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    if (sinB < 0 || cosA <= cosB) {
                        return false;
                    } else {
                        return true;
                    }
                }
            },
            AddConnection: function (toMe) {
                System.Diagnostics.Debug.Assert(this.NConnected < FarseerPhysics.Common.Vertices.PolyNode.MaxConnected);

                for (var i = 0; i < this.NConnected; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this.Connected[System.Array.index(i, this.Connected)], toMe)) {
                        return;
                    }
                }
                this.Connected[System.Array.index(this.NConnected, this.Connected)] = toMe;
                this.NConnected = (this.NConnected + 1) | 0;
            },
            RemoveConnection: function (fromMe) {
                var isFound = false;
                var foundIndex = -1;
                for (var i = 0; i < this.NConnected; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(fromMe, this.Connected[System.Array.index(i, this.Connected)])) {
                        isFound = true;
                        foundIndex = i;
                        break;
                    }
                }
                System.Diagnostics.Debug.Assert(isFound);
                this.NConnected = (this.NConnected - 1) | 0;
                for (var i1 = foundIndex; i1 < this.NConnected; i1 = (i1 + 1) | 0) {
                    this.Connected[System.Array.index(i1, this.Connected)] = this.Connected[System.Array.index(((i1 + 1) | 0), this.Connected)];
                }
            },
            GetRightestConnection: function (incoming) {
                if (this.NConnected === 0) {
                    System.Diagnostics.Debug.Assert(false);
                }
                if (this.NConnected === 1) {
                    return incoming;
                }
                var inDir = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.Position.$clone(), incoming.Position.$clone());

                var inLength = inDir.Length();
                inDir.Normalize();

                System.Diagnostics.Debug.Assert(inLength > FarseerPhysics.Settings.Epsilon);

                var result = null;
                for (var i = 0; i < this.NConnected; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this.Connected[System.Array.index(i, this.Connected)], incoming)) {
                        continue;
                    }
                    var testDir = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.Connected[System.Array.index(i, this.Connected)].Position.$clone(), this.Position.$clone());
                    var testLengthSqr = testDir.LengthSquared();
                    testDir.Normalize();
                    System.Diagnostics.Debug.Assert(testLengthSqr >= 1.42108547E-14);
                    var myCos = Microsoft.Xna.Framework.Vector2.Dot(inDir.$clone(), testDir.$clone());
                    var mySin = FarseerPhysics.Common.MathUtils.Cross$2(inDir.$clone(), testDir.$clone());
                    if (result != null) {
                        var resultDir = Microsoft.Xna.Framework.Vector2.op_Subtraction(result.Position.$clone(), this.Position.$clone());
                        resultDir.Normalize();
                        var resCos = Microsoft.Xna.Framework.Vector2.Dot(inDir.$clone(), resultDir.$clone());
                        var resSin = FarseerPhysics.Common.MathUtils.Cross$2(inDir.$clone(), resultDir.$clone());
                        if (this.IsRighter(mySin, myCos, resSin, resCos)) {
                            result = this.Connected[System.Array.index(i, this.Connected)];
                        }
                    } else {
                        result = this.Connected[System.Array.index(i, this.Connected)];
                    }
                }

                System.Diagnostics.Debug.Assert(result != null);

                return result;
            },
            GetRightestConnection$1: function (incomingDir) {
                var diff = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.Position.$clone(), incomingDir.$clone());
                var temp = new FarseerPhysics.Common.Vertices.PolyNode(diff.$clone());
                var res = this.GetRightestConnection(temp);
                System.Diagnostics.Debug.Assert(res != null);
                return res;
            }
        }
    });

    /**
     * The detection type affects the resulting polygon data.
     *
     * @public
     * @class FarseerPhysics.Common.VerticesDetectionType
     */
    Bridge.define("FarseerPhysics.Common.VerticesDetectionType", {
        $kind: "enum",
        statics: {
            fields: {
                /**
                 * Holes are integrated into the main polygon.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Common.VerticesDetectionType
                 * @constant
                 * @default 0
                 * @type FarseerPhysics.Common.VerticesDetectionType
                 */
                Integrated: 0,
                /**
                 * The data of the main polygon and hole polygons is returned separately.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Common.VerticesDetectionType
                 * @constant
                 * @default 1
                 * @type FarseerPhysics.Common.VerticesDetectionType
                 */
                Separated: 1
            }
        }
    });

    /** @namespace FarseerPhysics.Controllers */

    /**
     * Modes for Decay. Actual Decay must be implemented in inheriting 
     classes
     *
     * @public
     * @class number
     */
    Bridge.define("FarseerPhysics.Controllers.AbstractForceController.DecayModes", {
        $kind: "nested enum",
        statics: {
            fields: {
                None: 0,
                Step: 1,
                Linear: 2,
                InverseSquare: 3,
                Curve: 4
            }
        }
    });

    /**
     * Forcetypes are used in the decay math to properly get the distance.
     They are also used to draw a representation in DebugView
     *
     * @public
     * @class number
     */
    Bridge.define("FarseerPhysics.Controllers.AbstractForceController.ForceTypes", {
        $kind: "nested enum",
        statics: {
            fields: {
                Point: 0,
                Line: 1,
                Area: 2
            }
        }
    });

    /**
     * Timing Modes
     Switched: Standard on/off mode using the baseclass enabled property
     Triggered: When the Trigger() method is called the force is active 
     for a specified Impulse Length
     Curve: Still to be defined. The basic idea is having a Trigger 
     combined with a curve for the strength
     *
     * @public
     * @class number
     */
    Bridge.define("FarseerPhysics.Controllers.AbstractForceController.TimingModes", {
        $kind: "nested enum",
        statics: {
            fields: {
                Switched: 0,
                Triggered: 1,
                Curve: 2
            }
        }
    });

    Bridge.define("FarseerPhysics.Controllers.ControllerFilter", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Controllers.ControllerFilter(); }
            }
        },
        fields: {
            ControllerFlags: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            /**
             * Ignores the controller. The controller has no effect on this body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Controllers.ControllerFilter
             * @memberof FarseerPhysics.Controllers.ControllerFilter
             * @param   {FarseerPhysics.Controllers.ControllerType}    controller    The controller type.
             * @return  {void}
             */
            IgnoreController: function (controller) {
                this.ControllerFlags |= controller;
            },
            /**
             * Restore the controller. The controller affects this body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Controllers.ControllerFilter
             * @memberof FarseerPhysics.Controllers.ControllerFilter
             * @param   {FarseerPhysics.Controllers.ControllerType}    controller    The controller type.
             * @return  {void}
             */
            RestoreController: function (controller) {
                this.ControllerFlags &= ~controller;
            },
            /**
             * Determines whether this body ignores the the specified controller.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Controllers.ControllerFilter
             * @memberof FarseerPhysics.Controllers.ControllerFilter
             * @param   {FarseerPhysics.Controllers.ControllerType}    controller    The controller type.
             * @return  {boolean}                                                    <pre><code>true</code></pre> if the body has the specified flag; otherwise, <pre><code>false</code></pre>.
             */
            IsControllerIgnored: function (controller) {
                return (this.ControllerFlags & controller) === controller;
            },
            getHashCode: function () {
                var h = Bridge.addHash([7457916294, this.ControllerFlags]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Controllers.ControllerFilter)) {
                    return false;
                }
                return Bridge.equals(this.ControllerFlags, o.ControllerFlags);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Controllers.ControllerFilter();
                s.ControllerFlags = this.ControllerFlags;
                return s;
            }
        }
    });

    Bridge.define("FarseerPhysics.Controllers.ControllerType", {
        $kind: "enum",
        statics: {
            fields: {
                GravityController: 1,
                VelocityLimitController: 2,
                AbstractForceController: 4,
                BuoyancyController: 8
            }
        },
        $flags: true
    });

    Bridge.define("FarseerPhysics.Controllers.GravityType", {
        $kind: "enum",
        statics: {
            fields: {
                Linear: 0,
                DistanceSquared: 1
            }
        }
    });

    /** @namespace FarseerPhysics */

    /**
     * @abstract
     * @public
     * @class FarseerPhysics.DebugView
     */
    Bridge.define("FarseerPhysics.DebugView", {
        fields: {
            World: null,
            /**
             * Gets or sets the debug view flags.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.DebugView
             * @function Flags
             * @type FarseerPhysics.DebugViewFlags
             */
            Flags: 0
        },
        ctors: {
            ctor: function (world) {
                this.$initialize();
                this.World = world;
            }
        },
        methods: {
            /**
             * Append flags to the current flags.
             *
             * @instance
             * @public
             * @this FarseerPhysics.DebugView
             * @memberof FarseerPhysics.DebugView
             * @param   {FarseerPhysics.DebugViewFlags}    flags    The flags.
             * @return  {void}
             */
            AppendFlags: function (flags) {
                this.Flags |= flags;
            },
            /**
             * Remove flags from the current flags.
             *
             * @instance
             * @public
             * @this FarseerPhysics.DebugView
             * @memberof FarseerPhysics.DebugView
             * @param   {FarseerPhysics.DebugViewFlags}    flags    The flags.
             * @return  {void}
             */
            RemoveFlags: function (flags) {
                this.Flags &= ~flags;
            }
        }
    });

    Bridge.define("FarseerPhysics.DebugViewFlags", {
        $kind: "enum",
        statics: {
            fields: {
                /**
                 * Draw shapes.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.DebugViewFlags
                 * @constant
                 * @default 1
                 * @type FarseerPhysics.DebugViewFlags
                 */
                Shape: 1,
                /**
                 * Draw joint connections.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.DebugViewFlags
                 * @constant
                 * @default 2
                 * @type FarseerPhysics.DebugViewFlags
                 */
                Joint: 2,
                /**
                 * Draw axis aligned bounding boxes.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.DebugViewFlags
                 * @constant
                 * @default 4
                 * @type FarseerPhysics.DebugViewFlags
                 */
                AABB: 4,
                /**
                 * Draw broad-phase pairs.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.DebugViewFlags
                 * @constant
                 * @default 8
                 * @type FarseerPhysics.DebugViewFlags
                 */
                Pair: 8,
                /**
                 * Draw center of mass frame.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.DebugViewFlags
                 * @constant
                 * @default 16
                 * @type FarseerPhysics.DebugViewFlags
                 */
                CenterOfMass: 16,
                /**
                 * Draw useful debug data such as timings and number of bodies, joints, contacts and more.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.DebugViewFlags
                 * @constant
                 * @default 32
                 * @type FarseerPhysics.DebugViewFlags
                 */
                DebugPanel: 32,
                /**
                 * Draw contact points between colliding bodies.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.DebugViewFlags
                 * @constant
                 * @default 64
                 * @type FarseerPhysics.DebugViewFlags
                 */
                ContactPoints: 64,
                /**
                 * Draw contact normals. Need ContactPoints to be enabled first.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.DebugViewFlags
                 * @constant
                 * @default 128
                 * @type FarseerPhysics.DebugViewFlags
                 */
                ContactNormals: 128,
                /**
                 * Draws the vertices of polygons.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.DebugViewFlags
                 * @constant
                 * @default 256
                 * @type FarseerPhysics.DebugViewFlags
                 */
                PolygonPoints: 256,
                /**
                 * Draws the performance graph.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.DebugViewFlags
                 * @constant
                 * @default 512
                 * @type FarseerPhysics.DebugViewFlags
                 */
                PerformanceGraph: 512,
                /**
                 * Draws controllers.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.DebugViewFlags
                 * @constant
                 * @default 1024
                 * @type FarseerPhysics.DebugViewFlags
                 */
                Controllers: 1024
            }
        },
        $flags: true
    });

    Bridge.define("FarseerPhysics.Dynamics.Body", {
        inherits: [System.IDisposable],
        statics: {
            fields: {
                _bodyIdCounter: 0
            }
        },
        fields: {
            AngularVelocityInternal: 0,
            BodyId: 0,
            ControllerFilter: null,
            Flags: 0,
            Force: null,
            InvI: 0,
            InvMass: 0,
            LinearVelocityInternal: null,
            PhysicsLogicFilter: null,
            SleepTime: 0,
            Sweep: null,
            Torque: 0,
            World: null,
            Xf: null,
            _angularDamping: 0,
            _bodyType: 0,
            _inertia: 0,
            _linearDamping: 0,
            _mass: 0,
            /**
             * Get or set this body is penetrable
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function Penetrable
             * @type boolean
             */
            Penetrable: false,
            /**
             * Gets all the fixtures attached to this body.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function FixtureList
             * @type System.Collections.Generic.List$1
             */
            FixtureList: null,
            /**
             * Get the list of all joints attached to this body.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function JointList
             * @type FarseerPhysics.Dynamics.Joints.JointEdge
             */
            JointList: null,
            /**
             * Get the list of all contacts attached to this body.
             Warning: this list changes during the time step and you may
             miss some collisions if you don't use ContactListener.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function ContactList
             * @type FarseerPhysics.Dynamics.Contacts.ContactEdge
             */
            ContactList: null,
            /**
             * Set the user data. Use this to store your application specific data.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function UserData
             * @type System.Object
             */
            UserData: null,
            IsDisposed: false
        },
        props: {
            /**
             * Gets the total number revolutions the body has made.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.Body
             * @function Revolutions
             * @type number
             */
            Revolutions: {
                get: function () {
                    return this.Rotation / 3.14159274;
                }
            },
            /**
             * Gets or sets the body type.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function BodyType
             * @type FarseerPhysics.Dynamics.BodyType
             */
            BodyType: {
                get: function () {
                    return this._bodyType;
                },
                set: function (value) {
                    if (this._bodyType === value) {
                        return;
                    }

                    this._bodyType = value;

                    this.ResetMassData();

                    if (this._bodyType === FarseerPhysics.Dynamics.BodyType.Static) {
                        this.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                        this.AngularVelocityInternal = 0.0;
                    }

                    this.Awake = true;

                    this.Force = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    this.Torque = 0.0;

                    for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                        var f = this.FixtureList.getItem(i);
                        f.Refilter();
                    }
                }
            },
            /**
             * Get or sets the linear velocity of the center of mass.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function LinearVelocity
             * @type Microsoft.Xna.Framework.Vector2
             */
            LinearVelocity: {
                get: function () {
                    return this.LinearVelocityInternal.$clone();
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert(!isNaN(value.X) && !isNaN(value.Y));

                    if (this._bodyType === FarseerPhysics.Dynamics.BodyType.Static) {
                        return;
                    }

                    if (Microsoft.Xna.Framework.Vector2.Dot(value.$clone(), value.$clone()) > 0.0) {
                        this.Awake = true;
                    }

                    this.LinearVelocityInternal = value.$clone();
                }
            },
            /**
             * Gets or sets the angular velocity. Radians/second.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function AngularVelocity
             * @type number
             */
            AngularVelocity: {
                get: function () {
                    return this.AngularVelocityInternal;
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert(!isNaN(value));

                    if (this._bodyType === FarseerPhysics.Dynamics.BodyType.Static) {
                        return;
                    }

                    if (value * value > 0.0) {
                        this.Awake = true;
                    }

                    this.AngularVelocityInternal = value;
                }
            },
            /**
             * Gets or sets the linear damping.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function LinearDamping
             * @type number
             */
            LinearDamping: {
                get: function () {
                    return this._linearDamping;
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert(!isNaN(value));

                    this._linearDamping = value;
                }
            },
            /**
             * Gets or sets the angular damping.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function AngularDamping
             * @type number
             */
            AngularDamping: {
                get: function () {
                    return this._angularDamping;
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert(!isNaN(value));

                    this._angularDamping = value;
                }
            },
            /**
             * Gets or sets a value indicating whether this body should be included in the CCD solver.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function IsBullet
             * @type boolean
             */
            IsBullet: {
                get: function () {
                    return (this.Flags & FarseerPhysics.Dynamics.BodyFlags.Bullet) === FarseerPhysics.Dynamics.BodyFlags.Bullet;
                },
                set: function (value) {
                    if (value) {
                        this.Flags |= FarseerPhysics.Dynamics.BodyFlags.Bullet;
                    } else {
                        this.Flags &= -9;
                    }
                }
            },
            /**
             * You can disable sleeping on this body. If you disable sleeping, the
             body will be woken.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function SleepingAllowed
             * @type boolean
             */
            SleepingAllowed: {
                get: function () {
                    return (this.Flags & FarseerPhysics.Dynamics.BodyFlags.AutoSleep) === FarseerPhysics.Dynamics.BodyFlags.AutoSleep;
                },
                set: function (value) {
                    if (value) {
                        this.Flags |= FarseerPhysics.Dynamics.BodyFlags.AutoSleep;
                    } else {
                        this.Flags &= -5;
                        this.Awake = true;
                    }
                }
            },
            /**
             * Set the sleep state of the body. A sleeping body has very
             low CPU cost.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function Awake
             * @type boolean
             */
            Awake: {
                get: function () {
                    return (this.Flags & FarseerPhysics.Dynamics.BodyFlags.Awake) === FarseerPhysics.Dynamics.BodyFlags.Awake;
                },
                set: function (value) {
                    if (value) {
                        if ((this.Flags & FarseerPhysics.Dynamics.BodyFlags.Awake) === 0) {
                            this.Flags |= FarseerPhysics.Dynamics.BodyFlags.Awake;
                            this.SleepTime = 0.0;
                        }
                    } else {
                        this.Flags &= -3;
                        this.SleepTime = 0.0;
                        this.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                        this.AngularVelocityInternal = 0.0;
                        this.Force = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                        this.Torque = 0.0;
                    }
                }
            },
            /**
             * Set the active state of the body. An inactive body is not
             simulated and cannot be collided with or woken up.
             If you pass a flag of true, all fixtures will be added to the
             broad-phase.
             If you pass a flag of false, all fixtures will be removed from
             the broad-phase and all contacts will be destroyed.
             Fixtures and joints are otherwise unaffected. You may continue
             to create/destroy fixtures and joints on inactive bodies.
             Fixtures on an inactive body are implicitly inactive and will
             not participate in collisions, ray-casts, or queries.
             Joints connected to an inactive body are implicitly inactive.
             An inactive body is still owned by a b2World object and remains
             in the body list.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function Enabled
             * @type boolean
             */
            Enabled: {
                get: function () {
                    return (this.Flags & FarseerPhysics.Dynamics.BodyFlags.Enabled) === FarseerPhysics.Dynamics.BodyFlags.Enabled;
                },
                set: function (value) {
                    if (value === this.Enabled) {
                        return;
                    }

                    if (value) {
                        this.Flags |= FarseerPhysics.Dynamics.BodyFlags.Enabled;

                        var broadPhase = this.World.ContactManager.BroadPhase;
                        for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                            this.FixtureList.getItem(i).CreateProxies(broadPhase, Bridge.ref(this, "Xf"));
                        }

                    } else {
                        this.Flags &= -33;

                        var broadPhase1 = this.World.ContactManager.BroadPhase;

                        for (var i1 = 0; i1 < this.FixtureList.Count; i1 = (i1 + 1) | 0) {
                            this.FixtureList.getItem(i1).DestroyProxies(broadPhase1);
                        }

                        var ce = this.ContactList;
                        while (ce != null) {
                            var ce0 = ce;
                            ce = ce.Next;
                            this.World.ContactManager.Destroy(ce0.Contact);
                        }
                        this.ContactList = null;
                    }
                }
            },
            /**
             * Set this body to have fixed rotation. This causes the mass
             to be reset.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function FixedRotation
             * @type boolean
             */
            FixedRotation: {
                get: function () {
                    return (this.Flags & FarseerPhysics.Dynamics.BodyFlags.FixedRotation) === FarseerPhysics.Dynamics.BodyFlags.FixedRotation;
                },
                set: function (value) {
                    if (value) {
                        this.Flags |= FarseerPhysics.Dynamics.BodyFlags.FixedRotation;
                    } else {
                        this.Flags &= -17;
                    }

                    this.ResetMassData();
                }
            },
            /**
             * Get the world body origin position.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function Position
             * @type Microsoft.Xna.Framework.Vector2
             * @return  {[type]}        Return the world position of the body's origin.
             */
            Position: {
                get: function () {
                    return this.Xf.Position.$clone();
                },
                set: function (value) {
                    value = {v:value};
                    System.Diagnostics.Debug.Assert(!isNaN(value.v.X) && !isNaN(value.v.Y));

                    this.SetTransform$1(value, this.Rotation);
                }
            },
            /**
             * Get the angle in radians.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function Rotation
             * @type number
             * @return  {[type]}        Return the current world rotation angle in radians.
             */
            Rotation: {
                get: function () {
                    return this.Sweep.A;
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert(!isNaN(value));

                    this.SetTransform$1(Bridge.ref(this.Xf, "Position"), value);
                }
            },
            /**
             * Gets or sets a value indicating whether this body is static.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function IsStatic
             * @type boolean
             */
            IsStatic: {
                get: function () {
                    return this._bodyType === FarseerPhysics.Dynamics.BodyType.Static;
                },
                set: function (value) {
                    if (value) {
                        this.BodyType = FarseerPhysics.Dynamics.BodyType.Static;
                    } else {
                        this.BodyType = FarseerPhysics.Dynamics.BodyType.Dynamic;
                    }
                }
            },
            /**
             * Gets or sets a value indicating whether this body ignores gravity.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function IgnoreGravity
             * @type boolean
             */
            IgnoreGravity: {
                get: function () {
                    return (this.Flags & FarseerPhysics.Dynamics.BodyFlags.IgnoreGravity) === FarseerPhysics.Dynamics.BodyFlags.IgnoreGravity;
                },
                set: function (value) {
                    if (value) {
                        this.Flags |= FarseerPhysics.Dynamics.BodyFlags.IgnoreGravity;
                    } else {
                        this.Flags &= -65;
                    }
                }
            },
            /**
             * Get the world position of the center of mass.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.Body
             * @function WorldCenter
             * @type Microsoft.Xna.Framework.Vector2
             */
            WorldCenter: {
                get: function () {
                    return this.Sweep.C.$clone();
                }
            },
            /**
             * Get the local position of the center of mass.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function LocalCenter
             * @type Microsoft.Xna.Framework.Vector2
             */
            LocalCenter: {
                get: function () {
                    return this.Sweep.LocalCenter.$clone();
                },
                set: function (value) {
                    var $t;
                    if (this._bodyType !== FarseerPhysics.Dynamics.BodyType.Dynamic) {
                        return;
                    }

                    var oldCenter = this.Sweep.C.$clone();
                    this.Sweep.LocalCenter = value.$clone();
                    this.Sweep.C0 = ($t = FarseerPhysics.Common.MathUtils.Multiply$3(Bridge.ref(this, "Xf"), Bridge.ref(this.Sweep, "LocalCenter")), this.Sweep.C = $t.$clone(), $t);

                    var a = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.Sweep.C.$clone(), oldCenter.$clone());
                    this.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(this.LinearVelocityInternal.$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(-this.AngularVelocityInternal * a.Y, this.AngularVelocityInternal * a.X));
                }
            },
            /**
             * Gets or sets the mass. Usually in kilograms (kg).
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function Mass
             * @type number
             */
            Mass: {
                get: function () {
                    return this._mass;
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert(!isNaN(value));

                    if (this._bodyType !== FarseerPhysics.Dynamics.BodyType.Dynamic) {
                        return;
                    }

                    this._mass = value;

                    if (this._mass <= 0.0) {
                        this._mass = 1.0;
                    }

                    this.InvMass = 1.0 / this._mass;
                }
            },
            /**
             * Get or set the rotational inertia of the body about the local origin. usually in kg-m^2.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Body
             * @function Inertia
             * @type number
             */
            Inertia: {
                get: function () {
                    return this._inertia + this.Mass * Microsoft.Xna.Framework.Vector2.Dot(this.Sweep.LocalCenter.$clone(), this.Sweep.LocalCenter.$clone());
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert(!isNaN(value));

                    if (this._bodyType !== FarseerPhysics.Dynamics.BodyType.Dynamic) {
                        return;
                    }

                    if (value > 0.0 && (this.Flags & FarseerPhysics.Dynamics.BodyFlags.FixedRotation) === 0) {
                        this._inertia = value - this.Mass * Microsoft.Xna.Framework.Vector2.Dot(this.LocalCenter.$clone(), this.LocalCenter.$clone());
                        System.Diagnostics.Debug.Assert(this._inertia > 0.0);
                        this.InvI = 1.0 / this._inertia;
                    }
                }
            },
            Restitution: {
                get: function () {
                    var res = 0;

                    for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                        var f = this.FixtureList.getItem(i);
                        res += f.Restitution;
                    }

                    return res / this.FixtureList.Count;
                },
                set: function (value) {
                    for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                        var f = this.FixtureList.getItem(i);
                        f.Restitution = value;
                    }
                }
            },
            Friction: {
                get: function () {
                    var res = 0;

                    for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                        var f = this.FixtureList.getItem(i);
                        res += f.Friction;
                    }

                    return res / this.FixtureList.Count;
                },
                set: function (value) {
                    for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                        var f = this.FixtureList.getItem(i);
                        f.Friction = value;
                    }
                }
            },
            CollisionCategories: {
                set: function (value) {
                    for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                        var f = this.FixtureList.getItem(i);
                        f.CollisionCategories = value;
                    }
                }
            },
            CollidesWith: {
                set: function (value) {
                    for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                        var f = this.FixtureList.getItem(i);
                        f.CollidesWith = value;
                    }
                }
            },
            CollisionGroup: {
                set: function (value) {
                    for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                        var f = this.FixtureList.getItem(i);
                        f.CollisionGroup = value;
                    }
                }
            },
            IsSensor: {
                set: function (value) {
                    for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                        var f = this.FixtureList.getItem(i);
                        f.IsSensor = value;
                    }
                }
            },
            IgnoreCCD: {
                get: function () {
                    return (this.Flags & FarseerPhysics.Dynamics.BodyFlags.IgnoreCCD) === FarseerPhysics.Dynamics.BodyFlags.IgnoreCCD;
                },
                set: function (value) {
                    if (value) {
                        this.Flags |= FarseerPhysics.Dynamics.BodyFlags.IgnoreCCD;
                    } else {
                        this.Flags &= -129;
                    }
                }
            }
        },
        alias: ["Dispose", "System$IDisposable$Dispose"],
        ctors: {
            init: function () {
                this.ControllerFilter = new FarseerPhysics.Controllers.ControllerFilter();
                this.Force = new Microsoft.Xna.Framework.Vector2();
                this.LinearVelocityInternal = new Microsoft.Xna.Framework.Vector2();
                this.PhysicsLogicFilter = new FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter();
                this.Sweep = new FarseerPhysics.Common.Sweep();
                this.Xf = new FarseerPhysics.Common.Transform();
            },
            ctor: function () {
                this.$initialize();
                this.FixtureList = new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Fixture)).$ctor2(32);
            },
            $ctor1: function (world) {
                FarseerPhysics.Dynamics.Body.$ctor2.call(this, world, null);
            },
            $ctor2: function (world, userData) {
                var $t;
                this.$initialize();
                this.FixtureList = new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Fixture)).$ctor2(32);
                this.BodyId = Bridge.identity(FarseerPhysics.Dynamics.Body._bodyIdCounter, ($t = (FarseerPhysics.Dynamics.Body._bodyIdCounter + 1) | 0, FarseerPhysics.Dynamics.Body._bodyIdCounter = $t, $t));

                this.World = world;
                this.UserData = userData;

                this.FixedRotation = false;
                this.IsBullet = false;
                this.SleepingAllowed = true;
                this.Awake = true;
                this.BodyType = FarseerPhysics.Dynamics.BodyType.Static;
                this.Enabled = true;

                this.Xf.R.Set$1(0);

                world.AddBody(this);
            }
        },
        methods: {
            addOnCollision: function (value) {
                for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                    this.FixtureList.getItem(i).OnCollision = Bridge.fn.combine(this.FixtureList.getItem(i).OnCollision, value);
                }
            },
            removeOnCollision: function (value) {
                for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                    this.FixtureList.getItem(i).OnCollision = Bridge.fn.remove(this.FixtureList.getItem(i).OnCollision, value);
                }
            },
            addOnSeparation: function (value) {
                for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                    this.FixtureList.getItem(i).OnSeparation = Bridge.fn.combine(this.FixtureList.getItem(i).OnSeparation, value);
                }
            },
            removeOnSeparation: function (value) {
                for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                    this.FixtureList.getItem(i).OnSeparation = Bridge.fn.remove(this.FixtureList.getItem(i).OnSeparation, value);
                }
            },
            Dispose: function () {
                if (!this.IsDisposed) {

                    this.World.RemoveBody(this);
                    this.IsDisposed = true;
                }
            },
            /**
             * Resets the dynamics of this body.
             Sets torque, force and linear/angular velocity to 0
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @return  {void}
             */
            ResetDynamics: function () {
                this.Torque = 0;
                this.AngularVelocityInternal = 0;
                this.Force = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                this.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.Zero.$clone();
            },
            /**
             * Creates a fixture and attach it to this body.
             If the density is non-zero, this function automatically updates the mass of the body.
             Contacts are not created until the next time step.
             Warning: This function is locked during callbacks.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {FarseerPhysics.Collision.Shapes.Shape}    shape    The shape.
             * @return  {FarseerPhysics.Dynamics.Fixture}
             */
            CreateFixture: function (shape) {
                return new FarseerPhysics.Dynamics.Fixture.$ctor1(this, shape);
            },
            /**
             * Creates a fixture and attach it to this body.
             If the density is non-zero, this function automatically updates the mass of the body.
             Contacts are not created until the next time step.
             Warning: This function is locked during callbacks.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {FarseerPhysics.Collision.Shapes.Shape}    shape       The shape.
             * @param   {System.Object}                            userData    Application specific data
             * @return  {FarseerPhysics.Dynamics.Fixture}
             */
            CreateFixture$1: function (shape, userData) {
                return new FarseerPhysics.Dynamics.Fixture.$ctor2(this, shape, userData);
            },
            /**
             * Destroy a fixture. This removes the fixture from the broad-phase and
             destroys all contacts associated with this fixture. This will
             automatically adjust the mass of the body if the body is dynamic and the
             fixture has positive density.
             All fixtures attached to a body are implicitly destroyed when the body is destroyed.
             Warning: This function is locked during callbacks.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {FarseerPhysics.Dynamics.Fixture}    fixture    The fixture to be removed.
             * @return  {void}
             */
            DestroyFixture: function (fixture) {
                System.Diagnostics.Debug.Assert(Bridge.referenceEquals(fixture.Body, this));

                System.Diagnostics.Debug.Assert(this.FixtureList.Count > 0);

                System.Diagnostics.Debug.Assert(this.FixtureList.contains(fixture));

                var edge = this.ContactList;
                while (edge != null) {
                    var c = edge.Contact;
                    edge = edge.Next;

                    var fixtureA = c.FixtureA;
                    var fixtureB = c.FixtureB;

                    if (Bridge.referenceEquals(fixture, fixtureA) || Bridge.referenceEquals(fixture, fixtureB)) {
                        this.World.ContactManager.Destroy(c);
                    }
                }

                if ((this.Flags & FarseerPhysics.Dynamics.BodyFlags.Enabled) === FarseerPhysics.Dynamics.BodyFlags.Enabled) {
                    var broadPhase = this.World.ContactManager.BroadPhase;
                    fixture.DestroyProxies(broadPhase);
                }

                this.FixtureList.remove(fixture);
                fixture.Destroy();
                fixture.Body = null;

                this.ResetMassData();
            },
            /**
             * Set the position of the body's origin and rotation.
             This breaks any contacts and wakes the other bodies.
             Manipulating a body's transform may cause non-physical behavior.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    position    The world position of the body's local origin.
             * @param   {number}                             rotation    The world rotation in radians.
             * @return  {void}
             */
            SetTransform$1: function (position, rotation) {
                this.SetTransformIgnoreContacts(position, rotation);

                this.World.ContactManager.FindNewContacts();
            },
            /**
             * Set the position of the body's origin and rotation.
             This breaks any contacts and wakes the other bodies.
             Manipulating a body's transform may cause non-physical behavior.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    position    The world position of the body's local origin.
             * @param   {number}                             rotation    The world rotation in radians.
             * @return  {void}
             */
            SetTransform: function (position, rotation) {
                position = {v:position};
                this.SetTransform$1(position, rotation);
            },
            /**
             * For teleporting a body without considering new contacts immediately.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    position    The position.
             * @param   {number}                             angle       The angle.
             * @return  {void}
             */
            SetTransformIgnoreContacts: function (position, angle) {
                var $t;
                this.Xf.R.Set$1(angle);
                this.Xf.Position = position.v.$clone();

                this.Sweep.C0 = ($t = new Microsoft.Xna.Framework.Vector2.$ctor2(this.Xf.Position.X + this.Xf.R.Col1.X * this.Sweep.LocalCenter.X + this.Xf.R.Col2.X * this.Sweep.LocalCenter.Y, this.Xf.Position.Y + this.Xf.R.Col1.Y * this.Sweep.LocalCenter.X + this.Xf.R.Col2.Y * this.Sweep.LocalCenter.Y), this.Sweep.C = $t.$clone(), $t);
                this.Sweep.A0 = (this.Sweep.A = angle, angle);

                var broadPhase = this.World.ContactManager.BroadPhase;
                for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                    this.FixtureList.getItem(i).Synchronize(broadPhase, Bridge.ref(this, "Xf"), Bridge.ref(this, "Xf"));
                }
            },
            /**
             * Get the body transform for the body's origin.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {FarseerPhysics.Common.Transform}    transform    The transform of the body's origin.
             * @return  {void}
             */
            GetTransform: function (transform) {
                transform.v = this.Xf.$clone();
            },
            /**
             * Apply a force at a world point. If the force is not
             applied at the center of mass, it will generate a torque and
             affect the angular velocity. This wakes up the body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    force    The world force vector, usually in Newtons (N).
             * @param   {Microsoft.Xna.Framework.Vector2}    point    The world position of the point of application.
             * @return  {void}
             */
            ApplyForce$1: function (force, point) {
                force = {v:force};
                point = {v:point};
                this.ApplyForce$3(force, point);
            },
            /**
             * Applies a force at the center of mass.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    force    The force.
             * @return  {void}
             */
            ApplyForce$2: function (force) {
                this.ApplyForce$3(force, Bridge.ref(this.Xf, "Position"));
            },
            /**
             * Applies a force at the center of mass.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    force    The force.
             * @return  {void}
             */
            ApplyForce: function (force) {
                force = {v:force};
                this.ApplyForce$3(force, Bridge.ref(this.Xf, "Position"));
            },
            /**
             * Apply a force at a world point. If the force is not
             applied at the center of mass, it will generate a torque and
             affect the angular velocity. This wakes up the body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    force    The world force vector, usually in Newtons (N).
             * @param   {Microsoft.Xna.Framework.Vector2}    point    The world position of the point of application.
             * @return  {void}
             */
            ApplyForce$3: function (force, point) {
                System.Diagnostics.Debug.Assert(!isNaN(force.v.X));
                System.Diagnostics.Debug.Assert(!isNaN(force.v.Y));
                System.Diagnostics.Debug.Assert(!isNaN(point.v.X));
                System.Diagnostics.Debug.Assert(!isNaN(point.v.Y));

                if (this._bodyType === FarseerPhysics.Dynamics.BodyType.Dynamic) {
                    if (this.Awake === false) {
                        this.Awake = true;
                    }

                    this.Force = Microsoft.Xna.Framework.Vector2.op_Addition(this.Force.$clone(), force.v.$clone());
                    this.Torque += (point.v.X - this.Sweep.C.X) * force.v.Y - (point.v.Y - this.Sweep.C.Y) * force.v.X;
                }
            },
            /**
             * Apply a torque. This affects the angular velocity
             without affecting the linear velocity of the center of mass.
             This wakes up the body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {number}    torque    The torque about the z-axis (out of the screen), usually in N-m.
             * @return  {void}
             */
            ApplyTorque: function (torque) {
                System.Diagnostics.Debug.Assert(!isNaN(torque));

                if (this._bodyType === FarseerPhysics.Dynamics.BodyType.Dynamic) {
                    if (this.Awake === false) {
                        this.Awake = true;
                    }

                    this.Torque += torque;
                }
            },
            /**
             * Apply an impulse at a point. This immediately modifies the velocity.
             This wakes up the body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    impulse    The world impulse vector, usually in N-seconds or kg-m/s.
             * @return  {void}
             */
            ApplyLinearImpulse: function (impulse) {
                impulse = {v:impulse};
                this.ApplyLinearImpulse$2(impulse);
            },
            /**
             * Apply an impulse at a point. This immediately modifies the velocity.
             It also modifies the angular velocity if the point of application
             is not at the center of mass.
             This wakes up the body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    impulse    The world impulse vector, usually in N-seconds or kg-m/s.
             * @param   {Microsoft.Xna.Framework.Vector2}    point      The world position of the point of application.
             * @return  {void}
             */
            ApplyLinearImpulse$1: function (impulse, point) {
                impulse = {v:impulse};
                point = {v:point};
                this.ApplyLinearImpulse$3(impulse, point);
            },
            /**
             * Apply an impulse at a point. This immediately modifies the velocity.
             This wakes up the body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    impulse    The world impulse vector, usually in N-seconds or kg-m/s.
             * @return  {void}
             */
            ApplyLinearImpulse$2: function (impulse) {
                if (this._bodyType !== FarseerPhysics.Dynamics.BodyType.Dynamic) {
                    return;
                }
                if (this.Awake === false) {
                    this.Awake = true;
                }
                this.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(this.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMass, impulse.v.$clone()));
            },
            /**
             * Apply an impulse at a point. This immediately modifies the velocity.
             It also modifies the angular velocity if the point of application
             is not at the center of mass.
             This wakes up the body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    impulse    The world impulse vector, usually in N-seconds or kg-m/s.
             * @param   {Microsoft.Xna.Framework.Vector2}    point      The world position of the point of application.
             * @return  {void}
             */
            ApplyLinearImpulse$3: function (impulse, point) {
                if (this._bodyType !== FarseerPhysics.Dynamics.BodyType.Dynamic) {
                    return;
                }

                if (this.Awake === false) {
                    this.Awake = true;
                }

                this.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(this.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMass, impulse.v.$clone()));
                this.AngularVelocityInternal += this.InvI * ((point.v.X - this.Sweep.C.X) * impulse.v.Y - (point.v.Y - this.Sweep.C.Y) * impulse.v.X);
            },
            /**
             * Apply an angular impulse.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {number}    impulse    The angular impulse in units of kg*m*m/s.
             * @return  {void}
             */
            ApplyAngularImpulse: function (impulse) {
                if (this._bodyType !== FarseerPhysics.Dynamics.BodyType.Dynamic) {
                    return;
                }

                if (this.Awake === false) {
                    this.Awake = true;
                }

                this.AngularVelocityInternal += this.InvI * impulse;
            },
            /**
             * This resets the mass properties to the sum of the mass properties of the fixtures.
             This normally does not need to be called unless you called SetMassData to override
             the mass and you later want to reset the mass.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @return  {void}
             */
            ResetMassData: function () {
                var $t, $t1, $t2, $t3;
                this._mass = 0.0;
                this.InvMass = 0.0;
                this._inertia = 0.0;
                this.InvI = 0.0;
                this.Sweep.LocalCenter = Microsoft.Xna.Framework.Vector2.Zero.$clone();

                if (this.BodyType === FarseerPhysics.Dynamics.BodyType.Kinematic) {
                    this.Sweep.C0 = ($t = this.Xf.Position.$clone(), this.Sweep.C = $t.$clone(), $t);
                    return;
                }

                System.Diagnostics.Debug.Assert(this.BodyType === FarseerPhysics.Dynamics.BodyType.Dynamic || this.BodyType === FarseerPhysics.Dynamics.BodyType.Static);

                var center = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                $t1 = Bridge.getEnumerator(this.FixtureList);
                try {
                    while ($t1.moveNext()) {
                        var f = $t1.Current;
                        if (f.Shape._density === 0) {
                            continue;
                        }

                        var massData = f.Shape.MassData.$clone();
                        this._mass += massData.Mass;
                        center = Microsoft.Xna.Framework.Vector2.op_Addition(center.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(massData.Mass, massData.Centroid.$clone()));
                        this._inertia += massData.Inertia;
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }
                if (this.BodyType === FarseerPhysics.Dynamics.BodyType.Static) {
                    this.Sweep.C0 = ($t2 = this.Xf.Position.$clone(), this.Sweep.C = $t2.$clone(), $t2);
                    return;
                }

                if (this._mass > 0.0) {
                    this.InvMass = 1.0 / this._mass;
                    center = Microsoft.Xna.Framework.Vector2.op_Multiply$1(center.$clone(), this.InvMass);
                } else {
                    this._mass = 1.0;
                    this.InvMass = 1.0;
                }

                if (this._inertia > 0.0 && (this.Flags & FarseerPhysics.Dynamics.BodyFlags.FixedRotation) === 0) {
                    this._inertia -= this._mass * Microsoft.Xna.Framework.Vector2.Dot(center.$clone(), center.$clone());

                    System.Diagnostics.Debug.Assert(this._inertia > 0.0);
                    this.InvI = 1.0 / this._inertia;
                } else {
                    this._inertia = 0.0;
                    this.InvI = 0.0;
                }

                var oldCenter = this.Sweep.C.$clone();
                this.Sweep.LocalCenter = center.$clone();
                this.Sweep.C0 = ($t3 = FarseerPhysics.Common.MathUtils.Multiply$3(Bridge.ref(this, "Xf"), Bridge.ref(this.Sweep, "LocalCenter")), this.Sweep.C = $t3.$clone(), $t3);

                var a = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.Sweep.C.$clone(), oldCenter.$clone());
                this.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(this.LinearVelocityInternal.$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(-this.AngularVelocityInternal * a.Y, this.AngularVelocityInternal * a.X));
            },
            /**
             * Get the world coordinates of a point given the local coordinates.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    localPoint    A point on the body measured relative the the body's origin.
             * @return  {Microsoft.Xna.Framework.Vector2}                  The same point expressed in world coordinates.
             */
            GetWorldPoint$1: function (localPoint) {
                return new Microsoft.Xna.Framework.Vector2.$ctor2(this.Xf.Position.X + this.Xf.R.Col1.X * localPoint.v.X + this.Xf.R.Col2.X * localPoint.v.Y, this.Xf.Position.Y + this.Xf.R.Col1.Y * localPoint.v.X + this.Xf.R.Col2.Y * localPoint.v.Y);
            },
            /**
             * Get the world coordinates of a point given the local coordinates.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    localPoint    A point on the body measured relative the the body's origin.
             * @return  {Microsoft.Xna.Framework.Vector2}                  The same point expressed in world coordinates.
             */
            GetWorldPoint: function (localPoint) {
                localPoint = {v:localPoint};
                return this.GetWorldPoint$1(localPoint);
            },
            /**
             * Get the world coordinates of a vector given the local coordinates.
             Note that the vector only takes the rotation into account, not the position.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    localVector    A vector fixed in the body.
             * @return  {Microsoft.Xna.Framework.Vector2}                   The same vector expressed in world coordinates.
             */
            GetWorldVector$1: function (localVector) {
                return new Microsoft.Xna.Framework.Vector2.$ctor2(this.Xf.R.Col1.X * localVector.v.X + this.Xf.R.Col2.X * localVector.v.Y, this.Xf.R.Col1.Y * localVector.v.X + this.Xf.R.Col2.Y * localVector.v.Y);
            },
            /**
             * Get the world coordinates of a vector given the local coordinates.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    localVector    A vector fixed in the body.
             * @return  {Microsoft.Xna.Framework.Vector2}                   The same vector expressed in world coordinates.
             */
            GetWorldVector: function (localVector) {
                localVector = {v:localVector};
                return this.GetWorldVector$1(localVector);
            },
            /**
             * Gets a local point relative to the body's origin given a world point.
             Note that the vector only takes the rotation into account, not the position.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    worldPoint    A point in world coordinates.
             * @return  {Microsoft.Xna.Framework.Vector2}                  The corresponding local point relative to the body's origin.
             */
            GetLocalPoint$1: function (worldPoint) {
                return new Microsoft.Xna.Framework.Vector2.$ctor2((worldPoint.v.X - this.Xf.Position.X) * this.Xf.R.Col1.X + (worldPoint.v.Y - this.Xf.Position.Y) * this.Xf.R.Col1.Y, (worldPoint.v.X - this.Xf.Position.X) * this.Xf.R.Col2.X + (worldPoint.v.Y - this.Xf.Position.Y) * this.Xf.R.Col2.Y);
            },
            /**
             * Gets a local point relative to the body's origin given a world point.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    worldPoint    A point in world coordinates.
             * @return  {Microsoft.Xna.Framework.Vector2}                  The corresponding local point relative to the body's origin.
             */
            GetLocalPoint: function (worldPoint) {
                worldPoint = {v:worldPoint};
                return this.GetLocalPoint$1(worldPoint);
            },
            /**
             * Gets a local vector given a world vector.
             Note that the vector only takes the rotation into account, not the position.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    worldVector    A vector in world coordinates.
             * @return  {Microsoft.Xna.Framework.Vector2}                   The corresponding local vector.
             */
            GetLocalVector$1: function (worldVector) {
                return new Microsoft.Xna.Framework.Vector2.$ctor2(worldVector.v.X * this.Xf.R.Col1.X + worldVector.v.Y * this.Xf.R.Col1.Y, worldVector.v.X * this.Xf.R.Col2.X + worldVector.v.Y * this.Xf.R.Col2.Y);
            },
            /**
             * Gets a local vector given a world vector.
             Note that the vector only takes the rotation into account, not the position.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    worldVector    A vector in world coordinates.
             * @return  {Microsoft.Xna.Framework.Vector2}                   The corresponding local vector.
             */
            GetLocalVector: function (worldVector) {
                worldVector = {v:worldVector};
                return this.GetLocalVector$1(worldVector);
            },
            /**
             * Get the world linear velocity of a world point attached to this body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    worldPoint    A point in world coordinates.
             * @return  {Microsoft.Xna.Framework.Vector2}                  The world velocity of a point.
             */
            GetLinearVelocityFromWorldPoint: function (worldPoint) {
                worldPoint = {v:worldPoint};
                return this.GetLinearVelocityFromWorldPoint$1(worldPoint);
            },
            /**
             * Get the world linear velocity of a world point attached to this body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    worldPoint    A point in world coordinates.
             * @return  {Microsoft.Xna.Framework.Vector2}                  The world velocity of a point.
             */
            GetLinearVelocityFromWorldPoint$1: function (worldPoint) {
                return Microsoft.Xna.Framework.Vector2.op_Addition(this.LinearVelocityInternal.$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(-this.AngularVelocityInternal * (worldPoint.v.Y - this.Sweep.C.Y), this.AngularVelocityInternal * (worldPoint.v.X - this.Sweep.C.X)));
            },
            /**
             * Get the world velocity of a local point.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    localPoint    A point in local coordinates.
             * @return  {Microsoft.Xna.Framework.Vector2}                  The world velocity of a point.
             */
            GetLinearVelocityFromLocalPoint: function (localPoint) {
                localPoint = {v:localPoint};
                return this.GetLinearVelocityFromLocalPoint$1(localPoint);
            },
            /**
             * Get the world velocity of a local point.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {Microsoft.Xna.Framework.Vector2}    localPoint    A point in local coordinates.
             * @return  {Microsoft.Xna.Framework.Vector2}                  The world velocity of a point.
             */
            GetLinearVelocityFromLocalPoint$1: function (localPoint) {
                return this.GetLinearVelocityFromWorldPoint(this.GetWorldPoint$1(localPoint));
            },
            DeepClone: function () {
                var body = this.Clone();

                for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                    this.FixtureList.getItem(i).Clone(body);
                }

                return body;
            },
            Clone: function () {
                var body = new FarseerPhysics.Dynamics.Body.ctor();
                body.World = this.World;
                body.UserData = this.UserData;
                body.LinearDamping = this.LinearDamping;
                body.LinearVelocityInternal = this.LinearVelocityInternal.$clone();
                body.AngularDamping = this.AngularDamping;
                body.AngularVelocityInternal = this.AngularVelocityInternal;
                body.Position = this.Position.$clone();
                body.Rotation = this.Rotation;
                body._bodyType = this._bodyType;
                body.Flags = this.Flags;

                this.World.AddBody(body);

                return body;
            },
            SynchronizeFixtures: function () {
                var xf1 = { v : new FarseerPhysics.Common.Transform.ctor() };
                var c = Math.cos(this.Sweep.A0), s = Math.sin(this.Sweep.A0);
                xf1.v.R.Col1.X = c;
                xf1.v.R.Col2.X = -s;
                xf1.v.R.Col1.Y = s;
                xf1.v.R.Col2.Y = c;

                xf1.v.Position.X = this.Sweep.C0.X - (xf1.v.R.Col1.X * this.Sweep.LocalCenter.X + xf1.v.R.Col2.X * this.Sweep.LocalCenter.Y);
                xf1.v.Position.Y = this.Sweep.C0.Y - (xf1.v.R.Col1.Y * this.Sweep.LocalCenter.X + xf1.v.R.Col2.Y * this.Sweep.LocalCenter.Y);

                var broadPhase = this.World.ContactManager.BroadPhase;
                for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                    this.FixtureList.getItem(i).Synchronize(broadPhase, xf1, Bridge.ref(this, "Xf"));
                }
            },
            SynchronizeTransform: function () {
                this.Xf.R.Set$1(this.Sweep.A);

                var vx = this.Xf.R.Col1.X * this.Sweep.LocalCenter.X + this.Xf.R.Col2.X * this.Sweep.LocalCenter.Y;
                var vy = this.Xf.R.Col1.Y * this.Sweep.LocalCenter.X + this.Xf.R.Col2.Y * this.Sweep.LocalCenter.Y;

                this.Xf.Position.X = this.Sweep.C.X - vx;
                this.Xf.Position.Y = this.Sweep.C.Y - vy;
            },
            /**
             * This is used to prevent connected bodies from colliding.
             It may lie, depending on the collideConnected flag.
             *
             * @instance
             * @this FarseerPhysics.Dynamics.Body
             * @memberof FarseerPhysics.Dynamics.Body
             * @param   {FarseerPhysics.Dynamics.Body}    other    The other body.
             * @return  {boolean}
             */
            ShouldCollide: function (other) {
                if (this._bodyType !== FarseerPhysics.Dynamics.BodyType.Dynamic && other._bodyType !== FarseerPhysics.Dynamics.BodyType.Dynamic) {
                    return false;
                }

                for (var jn = this.JointList; jn != null; jn = jn.Next) {
                    if (Bridge.referenceEquals(jn.Other, other)) {
                        if (jn.Joint.CollideConnected === false) {
                            return false;
                        }
                    }
                }

                return true;
            },
            Advance: function (alpha) {
                this.Sweep.Advance(alpha);
                this.Sweep.C = this.Sweep.C0.$clone();
                this.Sweep.A = this.Sweep.A0;
                this.SynchronizeTransform();
            },
            IgnoreCollisionWith: function (other) {
                for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                    var f = this.FixtureList.getItem(i);
                    for (var j = 0; j < other.FixtureList.Count; j = (j + 1) | 0) {
                        var f2 = other.FixtureList.getItem(j);

                        f.IgnoreCollisionWith(f2);
                    }
                }
            },
            RestoreCollisionWith: function (other) {
                for (var i = 0; i < this.FixtureList.Count; i = (i + 1) | 0) {
                    var f = this.FixtureList.getItem(i);
                    for (var j = 0; j < other.FixtureList.Count; j = (j + 1) | 0) {
                        var f2 = other.FixtureList.getItem(j);

                        f.RestoreCollisionWith(f2);
                    }
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Dynamics.BodyFlags", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                Island: 1,
                Awake: 2,
                AutoSleep: 4,
                Bullet: 8,
                FixedRotation: 16,
                Enabled: 32,
                IgnoreGravity: 64,
                IgnoreCCD: 128
            }
        },
        $flags: true
    });

    /**
     * The body type.
     *
     * @public
     * @class FarseerPhysics.Dynamics.BodyType
     */
    Bridge.define("FarseerPhysics.Dynamics.BodyType", {
        $kind: "enum",
        statics: {
            fields: {
                /**
                 * Zero velocity, may be manually moved. Note: even static bodies have mass.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Dynamics.BodyType
                 * @constant
                 * @default 0
                 * @type FarseerPhysics.Dynamics.BodyType
                 */
                Static: 0,
                /**
                 * Zero mass, non-zero velocity set by user, moved by solver
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Dynamics.BodyType
                 * @constant
                 * @default 1
                 * @type FarseerPhysics.Dynamics.BodyType
                 */
                Kinematic: 1,
                /**
                 * Positive mass, non-zero velocity determined by forces, moved by solver
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Dynamics.BodyType
                 * @constant
                 * @default 2
                 * @type FarseerPhysics.Dynamics.BodyType
                 */
                Dynamic: 2
            }
        }
    });

    /**
     * A type of body that supports multiple fixtures that can break apart.
     *
     * @public
     * @class FarseerPhysics.Dynamics.BreakableBody
     */
    Bridge.define("FarseerPhysics.Dynamics.BreakableBody", {
        fields: {
            Broken: false,
            MainBody: null,
            Parts: null,
            /**
             * The force needed to break the body apart.
             Default: 500
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.BreakableBody
             * @default 500.0
             * @type number
             */
            Strength: 0,
            _angularVelocitiesCache: null,
            _break: false,
            _velocitiesCache: null,
            _world: null
        },
        ctors: {
            init: function () {
                this.Parts = new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Fixture)).$ctor2(8);
                this.Strength = 500.0;
                this._angularVelocitiesCache = System.Array.init(8, 0, System.Single);
                this._velocitiesCache = System.Array.init(8, function (){
                    return new Microsoft.Xna.Framework.Vector2();
                }, Microsoft.Xna.Framework.Vector2);
            },
            ctor: function (vertices, world, density) {
                FarseerPhysics.Dynamics.BreakableBody.$ctor1.call(this, vertices, world, density, null);
            },
            $ctor1: function (vertices, world, density, userData) {
                var $t;
                this.$initialize();
                this._world = world;
                this._world.ContactManager.PostSolve = Bridge.fn.combine(this._world.ContactManager.PostSolve, Bridge.fn.cacheBind(this, this.PostSolve));
                this.MainBody = new FarseerPhysics.Dynamics.Body.$ctor1(this._world);
                this.MainBody.BodyType = FarseerPhysics.Dynamics.BodyType.Dynamic;

                $t = Bridge.getEnumerator(vertices, FarseerPhysics.Common.Vertices);
                try {
                    while ($t.moveNext()) {
                        var part = $t.Current;
                        var polygonShape = new FarseerPhysics.Collision.Shapes.PolygonShape.$ctor1(part, density);
                        var fixture = this.MainBody.CreateFixture$1(polygonShape, userData);
                        this.Parts.add(fixture);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }}
        },
        methods: {
            PostSolve: function (contact, impulse) {
                if (!this.Broken) {
                    if (this.Parts.contains(contact.FixtureA) || this.Parts.contains(contact.FixtureB)) {
                        var maxImpulse = 0.0;
                        var count = contact.Manifold.PointCount;

                        for (var i = 0; i < count; i = (i + 1) | 0) {
                            maxImpulse = Math.max(maxImpulse, impulse.Points[System.Array.index(i, impulse.Points)].NormalImpulse);
                        }

                        if (maxImpulse > this.Strength) {
                            this._break = true;
                        }
                    }
                }
            },
            Update: function () {
                if (this._break) {
                    this.Decompose();
                    this.Broken = true;
                    this._break = false;
                }

                if (this.Broken === false) {
                    if (this.Parts.Count > this._angularVelocitiesCache.length) {
                        this._velocitiesCache = System.Array.init(this.Parts.Count, function (){
                            return new Microsoft.Xna.Framework.Vector2();
                        }, Microsoft.Xna.Framework.Vector2);
                        this._angularVelocitiesCache = System.Array.init(this.Parts.Count, 0, System.Single);
                    }

                    for (var i = 0; i < this.Parts.Count; i = (i + 1) | 0) {
                        this._velocitiesCache[System.Array.index(i, this._velocitiesCache)] = this.Parts.getItem(i).Body.LinearVelocity.$clone();
                        this._angularVelocitiesCache[System.Array.index(i, this._angularVelocitiesCache)] = this.Parts.getItem(i).Body.AngularVelocity;
                    }
                }
            },
            Decompose: function () {
                this._world.ContactManager.PostSolve = Bridge.fn.remove(this._world.ContactManager.PostSolve, Bridge.fn.cacheBind(this, this.PostSolve));

                for (var i = 0; i < this.Parts.Count; i = (i + 1) | 0) {
                    var fixture = this.Parts.getItem(i);

                    var shape = fixture.Shape.Clone();

                    var userdata = fixture.UserData;
                    this.MainBody.DestroyFixture(fixture);

                    var body = FarseerPhysics.Factories.BodyFactory.CreateBody(this._world);
                    body.BodyType = FarseerPhysics.Dynamics.BodyType.Dynamic;
                    body.Position = this.MainBody.Position.$clone();
                    body.Rotation = this.MainBody.Rotation;
                    body.UserData = this.MainBody.UserData;

                    body.CreateFixture$1(shape, userdata);

                    body.AngularVelocity = this._angularVelocitiesCache[System.Array.index(i, this._angularVelocitiesCache)];
                    body.LinearVelocity = this._velocitiesCache[System.Array.index(i, this._velocitiesCache)].$clone();
                }

                this._world.RemoveBody(this.MainBody);
                this._world.RemoveBreakableBody(this);
            },
            Break: function () {
                this._break = true;
            }
        }
    });

    Bridge.define("FarseerPhysics.Dynamics.Category", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                All: 0,
                Cat1: 1,
                Cat2: 2,
                Cat3: 4,
                Cat4: 8,
                Cat5: 16,
                Cat6: 32,
                Cat7: 64,
                Cat8: 128,
                Cat9: 256,
                Cat10: 512,
                Cat11: 1024,
                Cat12: 2048,
                Cat13: 4096,
                Cat14: 8192,
                Cat15: 16384,
                Cat16: 32768,
                Cat17: 65536,
                Cat18: 131072,
                Cat19: 262144,
                Cat20: 524288,
                Cat21: 1048576,
                Cat22: 2097152,
                Cat23: 4194304,
                Cat24: 8388608,
                Cat25: 16777216,
                Cat26: 33554432,
                Cat27: 67108864,
                Cat28: 134217728,
                Cat29: 268435456,
                Cat30: 536870912,
                Cat31: 1073741824
            },
            ctors: {
                init: function () {
                    this.All = 2147483647;
                }
            }
        },
        $flags: true
    });

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.PreSolveDelegate
     * @param   {FarseerPhysics.Dynamics.Contacts.Contact}    contact        
     * @param   {FarseerPhysics.Collision.Manifold}           oldManifold
     * @return  {void}
     */

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.PostSolveDelegate
     * @param   {FarseerPhysics.Dynamics.Contacts.Contact}              contact    
     * @param   {FarseerPhysics.Dynamics.Contacts.ContactConstraint}    impulse
     * @return  {void}
     */

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.BroadphaseDelegate
     * @param   {FarseerPhysics.Dynamics.FixtureProxy}    proxyA    
     * @param   {FarseerPhysics.Dynamics.FixtureProxy}    proxyB
     * @return  {void}
     */

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.EndContactDelegate
     * @param   {FarseerPhysics.Dynamics.Contacts.Contact}    contact
     * @return  {void}
     */

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.CollisionFilterDelegate
     * @param   {FarseerPhysics.Dynamics.Fixture}    fixtureA    
     * @param   {FarseerPhysics.Dynamics.Fixture}    fixtureB
     * @return  {boolean}
     */

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.BeginContactDelegate
     * @param   {FarseerPhysics.Dynamics.Contacts.Contact}    contact
     * @return  {boolean}
     */

    Bridge.define("FarseerPhysics.Dynamics.ContactManager", {
        statics: {
            methods: {
                ShouldCollide: function (fixtureA, fixtureB) {
                    if (FarseerPhysics.Settings.UseFPECollisionCategories) {
                        if ((fixtureA.CollisionGroup === fixtureB.CollisionGroup) && fixtureA.CollisionGroup !== 0 && fixtureB.CollisionGroup !== 0) {
                            return false;
                        }

                        if (!!(((fixtureA.CollisionCategories & fixtureB.CollidesWith) === FarseerPhysics.Dynamics.Category.None) & ((fixtureB.CollisionCategories & fixtureA.CollidesWith) === FarseerPhysics.Dynamics.Category.None))) {
                            return false;
                        }

                        if (fixtureA.IsFixtureIgnored(fixtureB) || fixtureB.IsFixtureIgnored(fixtureA)) {
                            return false;
                        }

                        return true;
                    }

                    if (fixtureA.CollisionGroup === fixtureB.CollisionGroup && fixtureA.CollisionGroup !== 0) {
                        return fixtureA.CollisionGroup > 0;
                    }

                    var collide = (fixtureA.CollidesWith & fixtureB.CollisionCategories) !== 0 && (fixtureA.CollisionCategories & fixtureB.CollidesWith) !== 0;

                    if (collide) {
                        if (fixtureA.IsFixtureIgnored(fixtureB) || fixtureB.IsFixtureIgnored(fixtureA)) {
                            return false;
                        }
                    }

                    return collide;
                }
            }
        },
        fields: {
            /**
             * Fires when a contact is created
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.ContactManager
             * @type FarseerPhysics.Dynamics.BeginContactDelegate
             */
            BeginContact: null,
            BroadPhase: null,
            /**
             * The filter used by the contact manager.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.ContactManager
             * @type FarseerPhysics.Dynamics.CollisionFilterDelegate
             */
            ContactFilter: null,
            ContactList: null,
            /**
             * Fires when a contact is deleted
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.ContactManager
             * @type FarseerPhysics.Dynamics.EndContactDelegate
             */
            EndContact: null,
            /**
             * Fires when the broadphase detects that two Fixtures are close to each other.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.ContactManager
             * @type FarseerPhysics.Dynamics.BroadphaseDelegate
             */
            OnBroadphaseCollision: null,
            /**
             * Fires after the solver has run
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.ContactManager
             * @type FarseerPhysics.Dynamics.PostSolveDelegate
             */
            PostSolve: null,
            /**
             * Fires before the solver runs
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.ContactManager
             * @type FarseerPhysics.Dynamics.PreSolveDelegate
             */
            PreSolve: null
        },
        ctors: {
            init: function () {
                this.ContactList = new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Contacts.Contact)).$ctor2(128);
            },
            ctor: function (broadPhase) {
                this.$initialize();
                this.BroadPhase = broadPhase;
                this.OnBroadphaseCollision = Bridge.fn.cacheBind(this, this.AddPair);
            }
        },
        methods: {
            AddPair: function (proxyA, proxyB) {
                var fixtureA = proxyA.v.Fixture;
                var fixtureB = proxyB.v.Fixture;

                var indexA = proxyA.v.ChildIndex;
                var indexB = proxyB.v.ChildIndex;

                var bodyA = fixtureA.Body;
                var bodyB = fixtureB.Body;

                if (Bridge.referenceEquals(bodyA, bodyB)) {
                    return;
                }

                var edge = bodyB.ContactList;
                while (edge != null) {
                    if (Bridge.referenceEquals(edge.Other, bodyA)) {
                        var fA = edge.Contact.FixtureA;
                        var fB = edge.Contact.FixtureB;
                        var iA = edge.Contact.ChildIndexA;
                        var iB = edge.Contact.ChildIndexB;

                        if (Bridge.referenceEquals(fA, fixtureA) && Bridge.referenceEquals(fB, fixtureB) && iA === indexA && iB === indexB) {
                            return;
                        }

                        if (Bridge.referenceEquals(fA, fixtureB) && Bridge.referenceEquals(fB, fixtureA) && iA === indexB && iB === indexA) {
                            return;
                        }
                    }

                    edge = edge.Next;
                }

                if (bodyB.ShouldCollide(bodyA) === false) {
                    return;
                }

                if (FarseerPhysics.Dynamics.ContactManager.ShouldCollide(fixtureA, fixtureB) === false) {
                    return;
                }

                if (!Bridge.staticEquals(this.ContactFilter, null) && this.ContactFilter(fixtureA, fixtureB) === false) {
                    return;
                }

                if (!Bridge.staticEquals(fixtureA.BeforeCollision, null) && fixtureA.BeforeCollision(fixtureA, fixtureB) === false) {
                    return;
                }

                if (!Bridge.staticEquals(fixtureB.BeforeCollision, null) && fixtureB.BeforeCollision(fixtureB, fixtureA) === false) {
                    return;
                }

                var c = FarseerPhysics.Dynamics.Contacts.Contact.Create(fixtureA, indexA, fixtureB, indexB);

                fixtureA = c.FixtureA;
                fixtureB = c.FixtureB;
                bodyA = fixtureA.Body;
                bodyB = fixtureB.Body;

                this.ContactList.add(c);


                c.NodeA.Contact = c;
                c.NodeA.Other = bodyB;

                c.NodeA.Prev = null;
                c.NodeA.Next = bodyA.ContactList;
                if (bodyA.ContactList != null) {
                    bodyA.ContactList.Prev = c.NodeA;
                }
                bodyA.ContactList = c.NodeA;

                c.NodeB.Contact = c;
                c.NodeB.Other = bodyA;

                c.NodeB.Prev = null;
                c.NodeB.Next = bodyB.ContactList;
                if (bodyB.ContactList != null) {
                    bodyB.ContactList.Prev = c.NodeB;
                }
                bodyB.ContactList = c.NodeB;
            },
            FindNewContacts: function () {
                this.BroadPhase.FarseerPhysics$Collision$IBroadPhase$UpdatePairs(this.OnBroadphaseCollision);
            },
            Destroy: function (contact) {
                var fixtureA = contact.FixtureA;
                var fixtureB = contact.FixtureB;
                var bodyA = fixtureA.Body;
                var bodyB = fixtureB.Body;

                if (!Bridge.staticEquals(this.EndContact, null) && contact.IsTouching()) {
                    this.EndContact(contact);
                }

                this.ContactList.remove(contact);

                if (contact.NodeA.Prev != null) {
                    contact.NodeA.Prev.Next = contact.NodeA.Next;
                }

                if (contact.NodeA.Next != null) {
                    contact.NodeA.Next.Prev = contact.NodeA.Prev;
                }

                if (Bridge.referenceEquals(contact.NodeA, bodyA.ContactList)) {
                    bodyA.ContactList = contact.NodeA.Next;
                }

                if (contact.NodeB.Prev != null) {
                    contact.NodeB.Prev.Next = contact.NodeB.Next;
                }

                if (contact.NodeB.Next != null) {
                    contact.NodeB.Next.Prev = contact.NodeB.Prev;
                }

                if (Bridge.referenceEquals(contact.NodeB, bodyB.ContactList)) {
                    bodyB.ContactList = contact.NodeB.Next;
                }

                contact.Destroy();
            },
            Collide: function () {
                for (var i = 0; i < this.ContactList.Count; i = (i + 1) | 0) {
                    var c = this.ContactList.getItem(i);
                    var fixtureA = c.FixtureA;
                    var fixtureB = c.FixtureB;
                    var indexA = c.ChildIndexA;
                    var indexB = c.ChildIndexB;
                    var bodyA = fixtureA.Body;
                    var bodyB = fixtureB.Body;

                    if (bodyA.Awake === false && bodyB.Awake === false) {
                        continue;
                    }

                    if ((c.Flags & FarseerPhysics.Dynamics.Contacts.ContactFlags.Filter) === FarseerPhysics.Dynamics.Contacts.ContactFlags.Filter) {
                        if (bodyB.ShouldCollide(bodyA) === false) {
                            var cNuke = c;
                            this.Destroy(cNuke);
                            continue;
                        }

                        if (FarseerPhysics.Dynamics.ContactManager.ShouldCollide(fixtureA, fixtureB) === false) {
                            var cNuke1 = c;
                            this.Destroy(cNuke1);
                            continue;
                        }

                        if (!Bridge.staticEquals(this.ContactFilter, null) && this.ContactFilter(fixtureA, fixtureB) === false) {
                            var cNuke2 = c;
                            this.Destroy(cNuke2);
                            continue;
                        }

                        c.Flags &= -9;
                    }

                    var proxyIdA = fixtureA.Proxies[System.Array.index(indexA, fixtureA.Proxies)].ProxyId;
                    var proxyIdB = fixtureB.Proxies[System.Array.index(indexB, fixtureB.Proxies)].ProxyId;

                    var overlap = this.BroadPhase.FarseerPhysics$Collision$IBroadPhase$TestOverlap(proxyIdA, proxyIdB);

                    if (overlap === false) {
                        var cNuke3 = c;
                        this.Destroy(cNuke3);
                        continue;
                    }

                    c.Update(this);
                }
            }
        }
    });

    /** @namespace FarseerPhysics.Dynamics.Contacts */

    /**
     * The class manages contact between two shapes. A contact exists for each overlapping
     AABB in the broad-phase (except if filtered). Therefore a contact object may exist
     that has no contact points.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Contacts.Contact
     */
    Bridge.define("FarseerPhysics.Dynamics.Contacts.Contact", {
        statics: {
            fields: {
                _edge: null,
                _registers: null
            },
            ctors: {
                init: function () {
                    this._edge = new FarseerPhysics.Collision.Shapes.EdgeShape.ctor();
                    this._registers = System.Array.create(0, [[
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.Circle, 
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.EdgeAndCircle, 
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.PolygonAndCircle, 
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.LoopAndCircle
                    ], [
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.EdgeAndCircle, 
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.NotSupported, 
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.EdgeAndPolygon, 
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.NotSupported
                    ], [
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.PolygonAndCircle, 
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.EdgeAndPolygon, 
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.Polygon, 
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.LoopAndPolygon
                    ], [
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.LoopAndCircle, 
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.NotSupported, 
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.LoopAndPolygon, 
                        FarseerPhysics.Dynamics.Contacts.Contact.ContactType.NotSupported
                    ]], FarseerPhysics.Dynamics.Contacts.Contact.ContactType, 4, 4);
                }
            },
            methods: {
                Create: function (fixtureA, indexA, fixtureB, indexB) {
                    var type1 = fixtureA.ShapeType;
                    var type2 = fixtureB.ShapeType;

                    System.Diagnostics.Debug.Assert(FarseerPhysics.Collision.Shapes.ShapeType.Unknown < type1 && type1 < FarseerPhysics.Collision.Shapes.ShapeType.TypeCount);
                    System.Diagnostics.Debug.Assert(FarseerPhysics.Collision.Shapes.ShapeType.Unknown < type2 && type2 < FarseerPhysics.Collision.Shapes.ShapeType.TypeCount);

                    var c;
                    var pool = fixtureA.Body.World.ContactPool;
                    if (pool.Count > 0) {
                        c = pool.Dequeue();
                        if ((type1 >= type2 || (type1 === FarseerPhysics.Collision.Shapes.ShapeType.Edge && type2 === FarseerPhysics.Collision.Shapes.ShapeType.Polygon)) && !(type2 === FarseerPhysics.Collision.Shapes.ShapeType.Edge && type1 === FarseerPhysics.Collision.Shapes.ShapeType.Polygon)) {
                            c.Reset(fixtureA, indexA, fixtureB, indexB);
                        } else {
                            c.Reset(fixtureB, indexB, fixtureA, indexA);
                        }
                    } else {
                        if ((type1 >= type2 || (type1 === FarseerPhysics.Collision.Shapes.ShapeType.Edge && type2 === FarseerPhysics.Collision.Shapes.ShapeType.Polygon)) && !(type2 === FarseerPhysics.Collision.Shapes.ShapeType.Edge && type1 === FarseerPhysics.Collision.Shapes.ShapeType.Polygon)) {
                            c = new FarseerPhysics.Dynamics.Contacts.Contact(fixtureA, indexA, fixtureB, indexB);
                        } else {
                            c = new FarseerPhysics.Dynamics.Contacts.Contact(fixtureB, indexB, fixtureA, indexA);
                        }
                    }

                    c._type = FarseerPhysics.Dynamics.Contacts.Contact._registers.get([type1, type2]);

                    return c;
                }
            }
        },
        fields: {
            FixtureA: null,
            FixtureB: null,
            Flags: 0,
            Manifold: null,
            NodeA: null,
            NodeB: null,
            TOI: 0,
            TOICount: 0,
            _type: 0,
            /**
             * Get the child primitive index for fixture A.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Contacts.Contact
             * @function ChildIndexA
             * @type number
             */
            ChildIndexA: 0,
            /**
             * Get the child primitive index for fixture B.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Contacts.Contact
             * @function ChildIndexB
             * @type number
             */
            ChildIndexB: 0
        },
        props: {
            /**
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Contacts.Contact
             * @function Enabled
             * @type boolean
             */
            Enabled: {
                get: function () {
                    return (this.Flags & FarseerPhysics.Dynamics.Contacts.ContactFlags.Enabled) === FarseerPhysics.Dynamics.Contacts.ContactFlags.Enabled;
                },
                set: function (value) {
                    if (value) {
                        this.Flags |= FarseerPhysics.Dynamics.Contacts.ContactFlags.Enabled;
                    } else {
                        this.Flags &= -5;
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.Manifold = new FarseerPhysics.Collision.Manifold();
                this.NodeA = new FarseerPhysics.Dynamics.Contacts.ContactEdge();
                this.NodeB = new FarseerPhysics.Dynamics.Contacts.ContactEdge();
            },
            ctor: function (fA, indexA, fB, indexB) {
                this.$initialize();
                this.Reset(fA, indexA, fB, indexB);
            }
        },
        methods: {
            /**
             * Get the contact manifold. Do not modify the manifold unless you understand the
             internals of Box2D.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Contacts.Contact
             * @memberof FarseerPhysics.Dynamics.Contacts.Contact
             * @param   {FarseerPhysics.Collision.Manifold}    manifold    The manifold.
             * @return  {void}
             */
            GetManifold: function (manifold) {
                manifold.v = this.Manifold.$clone();
            },
            /**
             * Gets the world manifold.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Contacts.Contact
             * @memberof FarseerPhysics.Dynamics.Contacts.Contact
             * @param   {Microsoft.Xna.Framework.Vector2}      normal    
             * @param   {FarseerPhysics.Common.FixedArray2}    points
             * @return  {void}
             */
            GetWorldManifold: function (normal, points) {
                var bodyA = this.FixtureA.Body;
                var bodyB = this.FixtureB.Body;
                var shapeA = this.FixtureA.Shape;
                var shapeB = this.FixtureB.Shape;

                FarseerPhysics.Collision.Collision.GetWorldManifold(Bridge.ref(this, "Manifold"), Bridge.ref(bodyA, "Xf"), shapeA.Radius, Bridge.ref(bodyB, "Xf"), shapeB.Radius, normal, points);
            },
            /**
             * Determines whether this contact is touching.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Contacts.Contact
             * @memberof FarseerPhysics.Dynamics.Contacts.Contact
             * @return  {boolean}        <pre><code>true</code></pre> if this instance is touching; otherwise, <pre><code>false</code></pre>.
             */
            IsTouching: function () {
                return (this.Flags & FarseerPhysics.Dynamics.Contacts.ContactFlags.Touching) === FarseerPhysics.Dynamics.Contacts.ContactFlags.Touching;
            },
            /**
             * Flag this contact for filtering. Filtering will occur the next time step.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Contacts.Contact
             * @memberof FarseerPhysics.Dynamics.Contacts.Contact
             * @return  {void}
             */
            FlagForFiltering: function () {
                this.Flags |= FarseerPhysics.Dynamics.Contacts.ContactFlags.Filter;
            },
            Reset: function (fA, indexA, fB, indexB) {
                this.Flags = FarseerPhysics.Dynamics.Contacts.ContactFlags.Enabled;

                this.FixtureA = fA;
                this.FixtureB = fB;

                this.ChildIndexA = indexA;
                this.ChildIndexB = indexB;

                this.Manifold.PointCount = 0;

                this.NodeA.Contact = null;
                this.NodeA.Prev = null;
                this.NodeA.Next = null;
                this.NodeA.Other = null;

                this.NodeB.Contact = null;
                this.NodeB.Prev = null;
                this.NodeB.Next = null;
                this.NodeB.Other = null;

                this.TOICount = 0;
            },
            /**
             * Update the contact manifold and touching status.
             Note: do not assume the fixture AABBs are overlapping or are valid.
             *
             * @instance
             * @this FarseerPhysics.Dynamics.Contacts.Contact
             * @memberof FarseerPhysics.Dynamics.Contacts.Contact
             * @param   {FarseerPhysics.Dynamics.ContactManager}    contactManager    The contact manager.
             * @return  {void}
             */
            Update: function (contactManager) {
                var oldManifold = { v : this.Manifold.$clone() };

                this.Flags |= FarseerPhysics.Dynamics.Contacts.ContactFlags.Enabled;

                var touching;
                var wasTouching = (this.Flags & FarseerPhysics.Dynamics.Contacts.ContactFlags.Touching) === FarseerPhysics.Dynamics.Contacts.ContactFlags.Touching;

                var sensor = this.FixtureA.IsSensor || this.FixtureB.IsSensor;

                var bodyA = this.FixtureA.Body;
                var bodyB = this.FixtureB.Body;

                if (sensor) {
                    var shapeA = this.FixtureA.Shape;
                    var shapeB = this.FixtureB.Shape;
                    touching = FarseerPhysics.Collision.AABB.TestOverlap$2(shapeA, this.ChildIndexA, shapeB, this.ChildIndexB, Bridge.ref(bodyA, "Xf"), Bridge.ref(bodyB, "Xf"));

                    this.Manifold.PointCount = 0;
                } else {
                    this.Evaluate(Bridge.ref(this, "Manifold"), Bridge.ref(bodyA, "Xf"), Bridge.ref(bodyB, "Xf"));
                    touching = this.Manifold.PointCount > 0;

                    for (var i = 0; i < this.Manifold.PointCount; i = (i + 1) | 0) {
                        var mp2 = this.Manifold.Points.getItem(i).$clone();
                        mp2.NormalImpulse = 0.0;
                        mp2.TangentImpulse = 0.0;
                        var id2 = mp2.Id.$clone();
                        var found = false;

                        for (var j = 0; j < oldManifold.v.PointCount; j = (j + 1) | 0) {
                            var mp1 = oldManifold.v.Points.getItem(j).$clone();

                            if (mp1.Id.Key === id2.Key) {
                                mp2.NormalImpulse = mp1.NormalImpulse;
                                mp2.TangentImpulse = mp1.TangentImpulse;
                                found = true;
                                break;
                            }
                        }
                        if (found === false) {
                            mp2.NormalImpulse = 0.0;
                            mp2.TangentImpulse = 0.0;
                        }

                        this.Manifold.Points.setItem(i, mp2.$clone());
                    }

                    if (touching !== wasTouching) {
                        bodyA.Awake = true;
                        bodyB.Awake = true;
                    }
                }

                if (touching) {
                    this.Flags |= FarseerPhysics.Dynamics.Contacts.ContactFlags.Touching;
                } else {
                    this.Flags &= -3;
                }

                if (wasTouching === false && touching) {
                    if (!Bridge.staticEquals(this.FixtureA.OnCollision, null)) {
                        this.Enabled = this.FixtureA.OnCollision(this.FixtureA, this.FixtureB, this);
                    }

                    if (!Bridge.staticEquals(this.FixtureB.OnCollision, null)) {
                        this.Enabled = this.FixtureB.OnCollision(this.FixtureB, this.FixtureA, this);
                    }

                    if (!Bridge.staticEquals(contactManager.BeginContact, null)) {
                        this.Enabled = contactManager.BeginContact(this);
                    }

                    if (this.Enabled === false) {
                        this.Flags &= -3;
                    }
                }

                if (wasTouching && touching === false) {
                    if (this.FixtureA != null && !Bridge.staticEquals(this.FixtureA.OnSeparation, null)) {
                        this.FixtureA.OnSeparation(this.FixtureA, this.FixtureB);
                    }

                    if (this.FixtureB != null && !Bridge.staticEquals(this.FixtureB.OnSeparation, null)) {
                        this.FixtureB.OnSeparation(this.FixtureB, this.FixtureA);
                    }

                    if (!Bridge.staticEquals(contactManager.EndContact, null)) {
                        contactManager.EndContact(this);
                    }
                }

                if (sensor) {
                    return;
                }

                if (!Bridge.staticEquals(contactManager.PreSolve, null)) {
                    contactManager.PreSolve(this, oldManifold);
                }
            },
            /**
             * Evaluate this contact with your own manifold and transforms.
             *
             * @instance
             * @private
             * @this FarseerPhysics.Dynamics.Contacts.Contact
             * @memberof FarseerPhysics.Dynamics.Contacts.Contact
             * @param   {FarseerPhysics.Collision.Manifold}    manifold      The manifold.
             * @param   {FarseerPhysics.Common.Transform}      transformA    The first transform.
             * @param   {FarseerPhysics.Common.Transform}      transformB    The second transform.
             * @return  {void}
             */
            Evaluate: function (manifold, transformA, transformB) {
                switch (this._type) {
                    case FarseerPhysics.Dynamics.Contacts.Contact.ContactType.Polygon: 
                        FarseerPhysics.Collision.Collision.CollidePolygons(manifold, Bridge.cast(this.FixtureA.Shape, FarseerPhysics.Collision.Shapes.PolygonShape), transformA, Bridge.cast(this.FixtureB.Shape, FarseerPhysics.Collision.Shapes.PolygonShape), transformB);
                        break;
                    case FarseerPhysics.Dynamics.Contacts.Contact.ContactType.PolygonAndCircle: 
                        FarseerPhysics.Collision.Collision.CollidePolygonAndCircle(manifold, Bridge.cast(this.FixtureA.Shape, FarseerPhysics.Collision.Shapes.PolygonShape), transformA, Bridge.cast(this.FixtureB.Shape, FarseerPhysics.Collision.Shapes.CircleShape), transformB);
                        break;
                    case FarseerPhysics.Dynamics.Contacts.Contact.ContactType.EdgeAndCircle: 
                        FarseerPhysics.Collision.Collision.CollideEdgeAndCircle(manifold, Bridge.cast(this.FixtureA.Shape, FarseerPhysics.Collision.Shapes.EdgeShape), transformA, Bridge.cast(this.FixtureB.Shape, FarseerPhysics.Collision.Shapes.CircleShape), transformB);
                        break;
                    case FarseerPhysics.Dynamics.Contacts.Contact.ContactType.EdgeAndPolygon: 
                        FarseerPhysics.Collision.Collision.CollideEdgeAndPolygon(manifold, Bridge.cast(this.FixtureA.Shape, FarseerPhysics.Collision.Shapes.EdgeShape), transformA, Bridge.cast(this.FixtureB.Shape, FarseerPhysics.Collision.Shapes.PolygonShape), transformB);
                        break;
                    case FarseerPhysics.Dynamics.Contacts.Contact.ContactType.LoopAndCircle: 
                        var loop = Bridge.cast(this.FixtureA.Shape, FarseerPhysics.Collision.Shapes.LoopShape);
                        loop.GetChildEdge(Bridge.ref(FarseerPhysics.Dynamics.Contacts.Contact, "_edge"), this.ChildIndexA);
                        FarseerPhysics.Collision.Collision.CollideEdgeAndCircle(manifold, FarseerPhysics.Dynamics.Contacts.Contact._edge, transformA, Bridge.cast(this.FixtureB.Shape, FarseerPhysics.Collision.Shapes.CircleShape), transformB);
                        break;
                    case FarseerPhysics.Dynamics.Contacts.Contact.ContactType.LoopAndPolygon: 
                        var loop2 = Bridge.cast(this.FixtureA.Shape, FarseerPhysics.Collision.Shapes.LoopShape);
                        loop2.GetChildEdge(Bridge.ref(FarseerPhysics.Dynamics.Contacts.Contact, "_edge"), this.ChildIndexA);
                        FarseerPhysics.Collision.Collision.CollideEdgeAndPolygon(manifold, FarseerPhysics.Dynamics.Contacts.Contact._edge, transformA, Bridge.cast(this.FixtureB.Shape, FarseerPhysics.Collision.Shapes.PolygonShape), transformB);
                        break;
                    case FarseerPhysics.Dynamics.Contacts.Contact.ContactType.Circle: 
                        FarseerPhysics.Collision.Collision.CollideCircles(manifold, Bridge.cast(this.FixtureA.Shape, FarseerPhysics.Collision.Shapes.CircleShape), transformA, Bridge.cast(this.FixtureB.Shape, FarseerPhysics.Collision.Shapes.CircleShape), transformB);
                        break;
                }
            },
            Destroy: function () {
                this.FixtureA.Body.World.ContactPool.Enqueue(this);
                this.Reset(null, 0, null, 0);
            }
        }
    });

    Bridge.define("FarseerPhysics.Dynamics.Contacts.Contact.ContactType", {
        $kind: "nested enum",
        statics: {
            fields: {
                NotSupported: 0,
                Polygon: 1,
                PolygonAndCircle: 2,
                Circle: 3,
                EdgeAndPolygon: 4,
                EdgeAndCircle: 5,
                LoopAndPolygon: 6,
                LoopAndCircle: 7
            }
        }
    });

    Bridge.define("FarseerPhysics.Dynamics.Contacts.ContactConstraint", {
        fields: {
            BodyA: null,
            BodyB: null,
            Friction: 0,
            K: null,
            LocalNormal: null,
            LocalPoint: null,
            Manifold: null,
            Normal: null,
            NormalMass: null,
            PointCount: 0,
            Points: null,
            RadiusA: 0,
            RadiusB: 0,
            Restitution: 0,
            Type: 0
        },
        ctors: {
            init: function () {
                this.K = new FarseerPhysics.Common.Mat22();
                this.LocalNormal = new Microsoft.Xna.Framework.Vector2();
                this.LocalPoint = new Microsoft.Xna.Framework.Vector2();
                this.Manifold = new FarseerPhysics.Collision.Manifold();
                this.Normal = new Microsoft.Xna.Framework.Vector2();
                this.NormalMass = new FarseerPhysics.Common.Mat22();
                this.Points = System.Array.init(FarseerPhysics.Settings.MaxPolygonVertices, null, FarseerPhysics.Dynamics.Contacts.ContactConstraintPoint);
            },
            ctor: function () {
                this.$initialize();
                for (var i = 0; i < FarseerPhysics.Settings.MaxManifoldPoints; i = (i + 1) | 0) {
                    this.Points[System.Array.index(i, this.Points)] = new FarseerPhysics.Dynamics.Contacts.ContactConstraintPoint();
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Dynamics.Contacts.ContactConstraintPoint", {
        fields: {
            LocalPoint: null,
            NormalImpulse: 0,
            NormalMass: 0,
            TangentImpulse: 0,
            TangentMass: 0,
            VelocityBias: 0,
            rA: null,
            rB: null
        },
        ctors: {
            init: function () {
                this.LocalPoint = new Microsoft.Xna.Framework.Vector2();
                this.rA = new Microsoft.Xna.Framework.Vector2();
                this.rB = new Microsoft.Xna.Framework.Vector2();
            }
        }
    });

    /**
     * A contact edge is used to connect bodies and contacts together
     in a contact graph where each body is a node and each contact
     is an edge. A contact edge belongs to a doubly linked list
     maintained in each attached body. Each contact has two contact
     nodes, one for each attached body.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Contacts.ContactEdge
     */
    Bridge.define("FarseerPhysics.Dynamics.Contacts.ContactEdge", {
        fields: {
            /**
             * The contact
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Contacts.ContactEdge
             * @type FarseerPhysics.Dynamics.Contacts.Contact
             */
            Contact: null,
            /**
             * The next contact edge in the body's contact list
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Contacts.ContactEdge
             * @type FarseerPhysics.Dynamics.Contacts.ContactEdge
             */
            Next: null,
            /**
             * Provides quick access to the other body attached.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Contacts.ContactEdge
             * @type FarseerPhysics.Dynamics.Body
             */
            Other: null,
            /**
             * The previous contact edge in the body's contact list
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Contacts.ContactEdge
             * @type FarseerPhysics.Dynamics.Contacts.ContactEdge
             */
            Prev: null
        }
    });

    Bridge.define("FarseerPhysics.Dynamics.Contacts.ContactFlags", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                /**
                 * Used when crawling contact graph when forming islands.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Dynamics.Contacts.ContactFlags
                 * @constant
                 * @default 1
                 * @type FarseerPhysics.Dynamics.Contacts.ContactFlags
                 */
                Island: 1,
                /**
                 * Set when the shapes are touching.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Dynamics.Contacts.ContactFlags
                 * @constant
                 * @default 2
                 * @type FarseerPhysics.Dynamics.Contacts.ContactFlags
                 */
                Touching: 2,
                /**
                 * This contact can be disabled (by user)
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Dynamics.Contacts.ContactFlags
                 * @constant
                 * @default 4
                 * @type FarseerPhysics.Dynamics.Contacts.ContactFlags
                 */
                Enabled: 4,
                /**
                 * This contact needs filtering because a fixture filter was changed.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Dynamics.Contacts.ContactFlags
                 * @constant
                 * @default 8
                 * @type FarseerPhysics.Dynamics.Contacts.ContactFlags
                 */
                Filter: 8,
                /**
                 * This bullet contact had a TOI event
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Dynamics.Contacts.ContactFlags
                 * @constant
                 * @default 16
                 * @type FarseerPhysics.Dynamics.Contacts.ContactFlags
                 */
                BulletHit: 16,
                /**
                 * This contact has a valid TOI i the field TOI
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Dynamics.Contacts.ContactFlags
                 * @constant
                 * @default 32
                 * @type FarseerPhysics.Dynamics.Contacts.ContactFlags
                 */
                TOI: 32
            }
        },
        $flags: true
    });

    Bridge.define("FarseerPhysics.Dynamics.Contacts.ContactSolver", {
        statics: {
            methods: {
                Solve: function (cc, index, normal, point, separation) {
                    System.Diagnostics.Debug.Assert(cc.PointCount > 0);

                    normal.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();

                    switch (cc.Type) {
                        case FarseerPhysics.Collision.ManifoldType.Circles: 
                            {
                                var pointA = cc.BodyA.GetWorldPoint$1(Bridge.ref(cc, "LocalPoint"));
                                var pointB = cc.BodyB.GetWorldPoint$1(Bridge.ref(cc.Points[System.Array.index(0, cc.Points)], "LocalPoint"));
                                var a = (pointA.X - pointB.X) * (pointA.X - pointB.X) + (pointA.Y - pointB.Y) * (pointA.Y - pointB.Y);
                                if (a > 1.42108547E-14) {
                                    var normalTmp = Microsoft.Xna.Framework.Vector2.op_Subtraction(pointB.$clone(), pointA.$clone());
                                    var factor = 1.0 / Math.sqrt(normalTmp.X * normalTmp.X + normalTmp.Y * normalTmp.Y);
                                    normal.v.X = normalTmp.X * factor;
                                    normal.v.Y = normalTmp.Y * factor;
                                } else {
                                    normal.v.X = 1;
                                    normal.v.Y = 0;
                                }

                                point.v = Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, (Microsoft.Xna.Framework.Vector2.op_Addition(pointA.$clone(), pointB.$clone())));
                                separation.v = (pointB.X - pointA.X) * normal.v.X + (pointB.Y - pointA.Y) * normal.v.Y - cc.RadiusA - cc.RadiusB;
                            }
                            break;
                        case FarseerPhysics.Collision.ManifoldType.FaceA: 
                            {
                                normal.v = cc.BodyA.GetWorldVector$1(Bridge.ref(cc, "LocalNormal"));
                                var planePoint = cc.BodyA.GetWorldPoint$1(Bridge.ref(cc, "LocalPoint"));
                                var clipPoint = cc.BodyB.GetWorldPoint$1(Bridge.ref(cc.Points[System.Array.index(index, cc.Points)], "LocalPoint"));
                                separation.v = (clipPoint.X - planePoint.X) * normal.v.X + (clipPoint.Y - planePoint.Y) * normal.v.Y - cc.RadiusA - cc.RadiusB;
                                point.v = clipPoint.$clone();
                            }
                            break;
                        case FarseerPhysics.Collision.ManifoldType.FaceB: 
                            {
                                normal.v = cc.BodyB.GetWorldVector$1(Bridge.ref(cc, "LocalNormal"));
                                var planePoint1 = cc.BodyB.GetWorldPoint$1(Bridge.ref(cc, "LocalPoint"));

                                var clipPoint1 = cc.BodyA.GetWorldPoint$1(Bridge.ref(cc.Points[System.Array.index(index, cc.Points)], "LocalPoint"));
                                separation.v = (clipPoint1.X - planePoint1.X) * normal.v.X + (clipPoint1.Y - planePoint1.Y) * normal.v.Y - cc.RadiusA - cc.RadiusB;
                                point.v = clipPoint1.$clone();

                                normal.v = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(normal.v.$clone());
                            }
                            break;
                        default: 
                            point.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                            separation.v = 0.0;
                            break;
                    }
                }
            }
        },
        fields: {
            Constraints: null,
            _constraintCount: 0,
            _contacts: null
        },
        methods: {
            Reset: function (contacts, contactCount, impulseRatio, warmstarting) {
                this._contacts = contacts;
                this._constraintCount = contactCount;

                if (this.Constraints == null || this.Constraints.length < this._constraintCount) {
                    this.Constraints = System.Array.init(Bridge.Int.mul(contactCount, 2), null, FarseerPhysics.Dynamics.Contacts.ContactConstraint);
                    for (var i = 0; i < this.Constraints.length; i = (i + 1) | 0) {
                        this.Constraints[System.Array.index(i, this.Constraints)] = new FarseerPhysics.Dynamics.Contacts.ContactConstraint();
                    }
                }

                for (var i1 = 0; i1 < this._constraintCount; i1 = (i1 + 1) | 0) {
                    var contact = this._contacts[System.Array.index(i1, this._contacts)];

                    var fixtureA = contact.FixtureA;
                    var fixtureB = contact.FixtureB;
                    var shapeA = fixtureA.Shape;
                    var shapeB = fixtureB.Shape;
                    var radiusA = shapeA.Radius;
                    var radiusB = shapeB.Radius;
                    var bodyA = fixtureA.Body;
                    var bodyB = fixtureB.Body;
                    var manifold = contact.Manifold.$clone();

                    System.Diagnostics.Debug.Assert(manifold.PointCount > 0);

                    var cc = this.Constraints[System.Array.index(i1, this.Constraints)];
                    cc.Friction = FarseerPhysics.Settings.MixFriction(fixtureA.Friction, fixtureB.Friction);
                    cc.Restitution = FarseerPhysics.Settings.MixRestitution(fixtureA.Restitution, fixtureB.Restitution);
                    cc.BodyA = bodyA;
                    cc.BodyB = bodyB;
                    cc.Manifold = manifold.$clone();
                    cc.Normal = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    cc.PointCount = manifold.PointCount;

                    cc.LocalNormal = manifold.LocalNormal.$clone();
                    cc.LocalPoint = manifold.LocalPoint.$clone();
                    cc.RadiusA = radiusA;
                    cc.RadiusB = radiusB;
                    cc.Type = manifold.Type;

                    for (var j = 0; j < cc.PointCount; j = (j + 1) | 0) {
                        var cp = manifold.Points.getItem(j).$clone();
                        var ccp = cc.Points[System.Array.index(j, cc.Points)];

                        if (warmstarting) {
                            ccp.NormalImpulse = impulseRatio * cp.NormalImpulse;
                            ccp.TangentImpulse = impulseRatio * cp.TangentImpulse;
                        } else {
                            ccp.NormalImpulse = 0.0;
                            ccp.TangentImpulse = 0.0;
                        }

                        ccp.LocalPoint = cp.LocalPoint.$clone();
                        ccp.rA = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                        ccp.rB = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                        ccp.NormalMass = 0.0;
                        ccp.TangentMass = 0.0;
                        ccp.VelocityBias = 0.0;
                    }

                    cc.K.SetZero();
                    cc.NormalMass.SetZero();
                }
            },
            InitializeVelocityConstraints: function () {
                for (var i = 0; i < this._constraintCount; i = (i + 1) | 0) {
                    var cc = this.Constraints[System.Array.index(i, this.Constraints)];

                    var radiusA = cc.RadiusA;
                    var radiusB = cc.RadiusB;
                    var bodyA = cc.BodyA;
                    var bodyB = cc.BodyB;
                    var manifold = { v : cc.Manifold.$clone() };

                    var vA = bodyA.LinearVelocity.$clone();
                    var vB = bodyB.LinearVelocity.$clone();
                    var wA = bodyA.AngularVelocity;
                    var wB = bodyB.AngularVelocity;

                    System.Diagnostics.Debug.Assert(manifold.v.PointCount > 0);
                    var points = { v : new (FarseerPhysics.Common.FixedArray2$1(Microsoft.Xna.Framework.Vector2))() };

                    FarseerPhysics.Collision.Collision.GetWorldManifold(manifold, Bridge.ref(bodyA, "Xf"), radiusA, Bridge.ref(bodyB, "Xf"), radiusB, Bridge.ref(cc, "Normal"), points);
                    var tangent = new Microsoft.Xna.Framework.Vector2.$ctor2(cc.Normal.Y, -cc.Normal.X);

                    for (var j = 0; j < cc.PointCount; j = (j + 1) | 0) {
                        var ccp = cc.Points[System.Array.index(j, cc.Points)];

                        ccp.rA = Microsoft.Xna.Framework.Vector2.op_Subtraction(points.v.getItem(j).$clone(), bodyA.Sweep.C.$clone());
                        ccp.rB = Microsoft.Xna.Framework.Vector2.op_Subtraction(points.v.getItem(j).$clone(), bodyB.Sweep.C.$clone());

                        var rnA = ccp.rA.X * cc.Normal.Y - ccp.rA.Y * cc.Normal.X;
                        var rnB = ccp.rB.X * cc.Normal.Y - ccp.rB.Y * cc.Normal.X;
                        rnA *= rnA;
                        rnB *= rnB;

                        var kNormal = bodyA.InvMass + bodyB.InvMass + bodyA.InvI * rnA + bodyB.InvI * rnB;

                        System.Diagnostics.Debug.Assert(kNormal > FarseerPhysics.Settings.Epsilon);
                        ccp.NormalMass = 1.0 / kNormal;

                        var rtA = ccp.rA.X * tangent.Y - ccp.rA.Y * tangent.X;
                        var rtB = ccp.rB.X * tangent.Y - ccp.rB.Y * tangent.X;

                        rtA *= rtA;
                        rtB *= rtB;
                        var kTangent = bodyA.InvMass + bodyB.InvMass + bodyA.InvI * rtA + bodyB.InvI * rtB;

                        System.Diagnostics.Debug.Assert(kTangent > FarseerPhysics.Settings.Epsilon);
                        ccp.TangentMass = 1.0 / kTangent;

                        ccp.VelocityBias = 0.0;
                        var vRel = cc.Normal.X * (vB.X + -wB * ccp.rB.Y - vA.X - -wA * ccp.rA.Y) + cc.Normal.Y * (vB.Y + wB * ccp.rB.X - vA.Y - wA * ccp.rA.X);
                        if (vRel < -1.0) {
                            ccp.VelocityBias = -cc.Restitution * vRel;
                        }
                    }

                    if (cc.PointCount === 2) {
                        var ccp1 = cc.Points[System.Array.index(0, cc.Points)];
                        var ccp2 = cc.Points[System.Array.index(1, cc.Points)];

                        var invMassA = bodyA.InvMass;
                        var invIA = bodyA.InvI;
                        var invMassB = bodyB.InvMass;
                        var invIB = bodyB.InvI;

                        var rn1A = ccp1.rA.X * cc.Normal.Y - ccp1.rA.Y * cc.Normal.X;
                        var rn1B = ccp1.rB.X * cc.Normal.Y - ccp1.rB.Y * cc.Normal.X;
                        var rn2A = ccp2.rA.X * cc.Normal.Y - ccp2.rA.Y * cc.Normal.X;
                        var rn2B = ccp2.rB.X * cc.Normal.Y - ccp2.rB.Y * cc.Normal.X;

                        var k11 = invMassA + invMassB + invIA * rn1A * rn1A + invIB * rn1B * rn1B;
                        var k22 = invMassA + invMassB + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
                        var k12 = invMassA + invMassB + invIA * rn1A * rn2A + invIB * rn1B * rn2B;

                        var k_maxConditionNumber = 100.0;
                        if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {
                            cc.K.Col1.X = k11;
                            cc.K.Col1.Y = k12;
                            cc.K.Col2.X = k12;
                            cc.K.Col2.Y = k22;

                            var a = cc.K.Col1.X, b = cc.K.Col2.X, c = cc.K.Col1.Y, d = cc.K.Col2.Y;
                            var det = a * d - b * c;
                            if (det !== 0.0) {
                                det = 1.0 / det;
                            }

                            cc.NormalMass.Col1.X = det * d;
                            cc.NormalMass.Col1.Y = -det * c;
                            cc.NormalMass.Col2.X = -det * b;
                            cc.NormalMass.Col2.Y = det * a;
                        } else {
                            cc.PointCount = 1;
                        }
                    }
                }
            },
            WarmStart: function () {
                for (var i = 0; i < this._constraintCount; i = (i + 1) | 0) {
                    var c = this.Constraints[System.Array.index(i, this.Constraints)];

                    var tangentx = c.Normal.Y;
                    var tangenty = -c.Normal.X;

                    for (var j = 0; j < c.PointCount; j = (j + 1) | 0) {
                        var ccp = c.Points[System.Array.index(j, c.Points)];
                        var px = ccp.NormalImpulse * c.Normal.X + ccp.TangentImpulse * tangentx;
                        var py = ccp.NormalImpulse * c.Normal.Y + ccp.TangentImpulse * tangenty;
                        c.BodyA.AngularVelocityInternal -= c.BodyA.InvI * (ccp.rA.X * py - ccp.rA.Y * px);
                        c.BodyA.LinearVelocityInternal.X -= c.BodyA.InvMass * px;
                        c.BodyA.LinearVelocityInternal.Y -= c.BodyA.InvMass * py;
                        c.BodyB.AngularVelocityInternal += c.BodyB.InvI * (ccp.rB.X * py - ccp.rB.Y * px);
                        c.BodyB.LinearVelocityInternal.X += c.BodyB.InvMass * px;
                        c.BodyB.LinearVelocityInternal.Y += c.BodyB.InvMass * py;
                    }
                }
            },
            SolveVelocityConstraints: function () {
                for (var i = 0; i < this._constraintCount; i = (i + 1) | 0) {
                    var c = this.Constraints[System.Array.index(i, this.Constraints)];
                    if (c.BodyA.Penetrable || c.BodyB.Penetrable) {
                        continue;
                    }
                    var wA = c.BodyA.AngularVelocityInternal;
                    var wB = c.BodyB.AngularVelocityInternal;

                    var tangentx = c.Normal.Y;
                    var tangenty = -c.Normal.X;

                    var friction = c.Friction;

                    System.Diagnostics.Debug.Assert(c.PointCount === 1 || c.PointCount === 2);

                    for (var j = 0; j < c.PointCount; j = (j + 1) | 0) {
                        var ccp = c.Points[System.Array.index(j, c.Points)];
                        var lambda = ccp.TangentMass * -((c.BodyB.LinearVelocityInternal.X + (-wB * ccp.rB.Y) - c.BodyA.LinearVelocityInternal.X - (-wA * ccp.rA.Y)) * tangentx + (c.BodyB.LinearVelocityInternal.Y + (wB * ccp.rB.X) - c.BodyA.LinearVelocityInternal.Y - (wA * ccp.rA.X)) * tangenty);

                        var maxFriction = friction * ccp.NormalImpulse;
                        var newImpulse = Math.max(-maxFriction, Math.min(ccp.TangentImpulse + lambda, maxFriction));
                        lambda = newImpulse - ccp.TangentImpulse;

                        var px = lambda * tangentx;
                        var py = lambda * tangenty;

                        c.BodyA.LinearVelocityInternal.X -= c.BodyA.InvMass * px;
                        c.BodyA.LinearVelocityInternal.Y -= c.BodyA.InvMass * py;
                        wA -= c.BodyA.InvI * (ccp.rA.X * py - ccp.rA.Y * px);

                        c.BodyB.LinearVelocityInternal.X += c.BodyB.InvMass * px;
                        c.BodyB.LinearVelocityInternal.Y += c.BodyB.InvMass * py;
                        wB += c.BodyB.InvI * (ccp.rB.X * py - ccp.rB.Y * px);

                        ccp.TangentImpulse = newImpulse;
                    }

                    if (c.PointCount === 1) {
                        var ccp1 = c.Points[System.Array.index(0, c.Points)];

                        var lambda1 = -ccp1.NormalMass * ((c.BodyB.LinearVelocityInternal.X + (-wB * ccp1.rB.Y) - c.BodyA.LinearVelocityInternal.X - (-wA * ccp1.rA.Y)) * c.Normal.X + (c.BodyB.LinearVelocityInternal.Y + (wB * ccp1.rB.X) - c.BodyA.LinearVelocityInternal.Y - (wA * ccp1.rA.X)) * c.Normal.Y - ccp1.VelocityBias);

                        var newImpulse1 = Math.max(ccp1.NormalImpulse + lambda1, 0.0);
                        lambda1 = newImpulse1 - ccp1.NormalImpulse;

                        var px1 = lambda1 * c.Normal.X;
                        var py1 = lambda1 * c.Normal.Y;

                        c.BodyA.LinearVelocityInternal.X -= c.BodyA.InvMass * px1;
                        c.BodyA.LinearVelocityInternal.Y -= c.BodyA.InvMass * py1;
                        wA -= c.BodyA.InvI * (ccp1.rA.X * py1 - ccp1.rA.Y * px1);

                        c.BodyB.LinearVelocityInternal.X += c.BodyB.InvMass * px1;
                        c.BodyB.LinearVelocityInternal.Y += c.BodyB.InvMass * py1;
                        wB += c.BodyB.InvI * (ccp1.rB.X * py1 - ccp1.rB.Y * px1);

                        ccp1.NormalImpulse = newImpulse1;
                    } else {

                        var cp1 = c.Points[System.Array.index(0, c.Points)];
                        var cp2 = c.Points[System.Array.index(1, c.Points)];

                        var ax = cp1.NormalImpulse;
                        var ay = cp2.NormalImpulse;
                        System.Diagnostics.Debug.Assert(ax >= 0.0 && ay >= 0.0);

                        var vn1 = (c.BodyB.LinearVelocityInternal.X + (-wB * cp1.rB.Y) - c.BodyA.LinearVelocityInternal.X - (-wA * cp1.rA.Y)) * c.Normal.X + (c.BodyB.LinearVelocityInternal.Y + (wB * cp1.rB.X) - c.BodyA.LinearVelocityInternal.Y - (wA * cp1.rA.X)) * c.Normal.Y;
                        var vn2 = (c.BodyB.LinearVelocityInternal.X + (-wB * cp2.rB.Y) - c.BodyA.LinearVelocityInternal.X - (-wA * cp2.rA.Y)) * c.Normal.X + (c.BodyB.LinearVelocityInternal.Y + (wB * cp2.rB.X) - c.BodyA.LinearVelocityInternal.Y - (wA * cp2.rA.X)) * c.Normal.Y;

                        var bx = vn1 - cp1.VelocityBias - (c.K.Col1.X * ax + c.K.Col2.X * ay);
                        var by = vn2 - cp2.VelocityBias - (c.K.Col1.Y * ax + c.K.Col2.Y * ay);

                        var xx = -(c.NormalMass.Col1.X * bx + c.NormalMass.Col2.X * by);
                        var xy = -(c.NormalMass.Col1.Y * bx + c.NormalMass.Col2.Y * by);

                        while (true) {
                            if (xx >= 0.0 && xy >= 0.0) {
                                var dx = xx - ax;
                                var dy = xy - ay;

                                var p1x = dx * c.Normal.X;
                                var p1y = dx * c.Normal.Y;

                                var p2x = dy * c.Normal.X;
                                var p2y = dy * c.Normal.Y;

                                var p12x = p1x + p2x;
                                var p12y = p1y + p2y;

                                c.BodyA.LinearVelocityInternal.X -= c.BodyA.InvMass * p12x;
                                c.BodyA.LinearVelocityInternal.Y -= c.BodyA.InvMass * p12y;
                                wA -= c.BodyA.InvI * ((cp1.rA.X * p1y - cp1.rA.Y * p1x) + (cp2.rA.X * p2y - cp2.rA.Y * p2x));

                                c.BodyB.LinearVelocityInternal.X += c.BodyB.InvMass * p12x;
                                c.BodyB.LinearVelocityInternal.Y += c.BodyB.InvMass * p12y;
                                wB += c.BodyB.InvI * ((cp1.rB.X * p1y - cp1.rB.Y * p1x) + (cp2.rB.X * p2y - cp2.rB.Y * p2x));

                                cp1.NormalImpulse = xx;
                                cp2.NormalImpulse = xy;

                                break;
                            }

                            xx = -cp1.NormalMass * bx;
                            xy = 0.0;
                            vn1 = 0.0;
                            vn2 = c.K.Col1.Y * xx + by;

                            if (xx >= 0.0 && vn2 >= 0.0) {
                                var dx1 = xx - ax;
                                var dy1 = xy - ay;

                                var p1x1 = dx1 * c.Normal.X;
                                var p1y1 = dx1 * c.Normal.Y;

                                var p2x1 = dy1 * c.Normal.X;
                                var p2y1 = dy1 * c.Normal.Y;

                                var p12x1 = p1x1 + p2x1;
                                var p12y1 = p1y1 + p2y1;

                                c.BodyA.LinearVelocityInternal.X -= c.BodyA.InvMass * p12x1;
                                c.BodyA.LinearVelocityInternal.Y -= c.BodyA.InvMass * p12y1;
                                wA -= c.BodyA.InvI * ((cp1.rA.X * p1y1 - cp1.rA.Y * p1x1) + (cp2.rA.X * p2y1 - cp2.rA.Y * p2x1));

                                c.BodyB.LinearVelocityInternal.X += c.BodyB.InvMass * p12x1;
                                c.BodyB.LinearVelocityInternal.Y += c.BodyB.InvMass * p12y1;
                                wB += c.BodyB.InvI * ((cp1.rB.X * p1y1 - cp1.rB.Y * p1x1) + (cp2.rB.X * p2y1 - cp2.rB.Y * p2x1));

                                cp1.NormalImpulse = xx;
                                cp2.NormalImpulse = xy;

                                break;
                            }


                            xx = 0.0;
                            xy = -cp2.NormalMass * by;
                            vn1 = c.K.Col2.X * xy + bx;
                            vn2 = 0.0;

                            if (xy >= 0.0 && vn1 >= 0.0) {
                                var dx2 = xx - ax;
                                var dy2 = xy - ay;

                                var p1x2 = dx2 * c.Normal.X;
                                var p1y2 = dx2 * c.Normal.Y;

                                var p2x2 = dy2 * c.Normal.X;
                                var p2y2 = dy2 * c.Normal.Y;

                                var p12x2 = p1x2 + p2x2;
                                var p12y2 = p1y2 + p2y2;

                                c.BodyA.LinearVelocityInternal.X -= c.BodyA.InvMass * p12x2;
                                c.BodyA.LinearVelocityInternal.Y -= c.BodyA.InvMass * p12y2;
                                wA -= c.BodyA.InvI * ((cp1.rA.X * p1y2 - cp1.rA.Y * p1x2) + (cp2.rA.X * p2y2 - cp2.rA.Y * p2x2));

                                c.BodyB.LinearVelocityInternal.X += c.BodyB.InvMass * p12x2;
                                c.BodyB.LinearVelocityInternal.Y += c.BodyB.InvMass * p12y2;
                                wB += c.BodyB.InvI * ((cp1.rB.X * p1y2 - cp1.rB.Y * p1x2) + (cp2.rB.X * p2y2 - cp2.rB.Y * p2x2));

                                cp1.NormalImpulse = xx;
                                cp2.NormalImpulse = xy;

                                break;
                            }

                            xx = 0.0;
                            xy = 0.0;
                            vn1 = bx;
                            vn2 = by;

                            if (vn1 >= 0.0 && vn2 >= 0.0) {
                                var dx3 = xx - ax;
                                var dy3 = xy - ay;

                                var p1x3 = dx3 * c.Normal.X;
                                var p1y3 = dx3 * c.Normal.Y;

                                var p2x3 = dy3 * c.Normal.X;
                                var p2y3 = dy3 * c.Normal.Y;

                                var p12x3 = p1x3 + p2x3;
                                var p12y3 = p1y3 + p2y3;

                                c.BodyA.LinearVelocityInternal.X -= c.BodyA.InvMass * p12x3;
                                c.BodyA.LinearVelocityInternal.Y -= c.BodyA.InvMass * p12y3;
                                wA -= c.BodyA.InvI * ((cp1.rA.X * p1y3 - cp1.rA.Y * p1x3) + (cp2.rA.X * p2y3 - cp2.rA.Y * p2x3));

                                c.BodyB.LinearVelocityInternal.X += c.BodyB.InvMass * p12x3;
                                c.BodyB.LinearVelocityInternal.Y += c.BodyB.InvMass * p12y3;
                                wB += c.BodyB.InvI * ((cp1.rB.X * p1y3 - cp1.rB.Y * p1x3) + (cp2.rB.X * p2y3 - cp2.rB.Y * p2x3));

                                cp1.NormalImpulse = xx;
                                cp2.NormalImpulse = xy;

                                break;
                            }

                            break;
                        }
                    }

                    c.BodyA.AngularVelocityInternal = wA;
                    c.BodyB.AngularVelocityInternal = wB;
                }
            },
            StoreImpulses: function () {
                for (var i = 0; i < this._constraintCount; i = (i + 1) | 0) {
                    var c = this.Constraints[System.Array.index(i, this.Constraints)];
                    if (c.BodyA.Penetrable || c.BodyB.Penetrable) {
                        continue;
                    }

                    var m = c.Manifold.$clone();

                    for (var j = 0; j < c.PointCount; j = (j + 1) | 0) {
                        var pj = m.Points.getItem(j).$clone();
                        var cp = c.Points[System.Array.index(j, c.Points)];

                        pj.NormalImpulse = cp.NormalImpulse;
                        pj.TangentImpulse = cp.TangentImpulse;

                        m.Points.setItem(j, pj.$clone());
                    }

                    c.Manifold = m.$clone();
                    this._contacts[System.Array.index(i, this._contacts)].Manifold = m.$clone();
                }
            },
            SolvePositionConstraints: function (baumgarte) {
                var minSeparation = 0.0;

                for (var i = 0; i < this._constraintCount; i = (i + 1) | 0) {
                    var c = this.Constraints[System.Array.index(i, this.Constraints)];
                    if (c.BodyA.Penetrable || c.BodyB.Penetrable) {
                        continue;
                    }

                    var bodyA = c.BodyA;
                    var bodyB = c.BodyB;

                    var invMassA = bodyA.Mass * bodyA.InvMass;
                    var invIA = bodyA.Mass * bodyA.InvI;
                    var invMassB = bodyB.Mass * bodyB.InvMass;
                    var invIB = bodyB.Mass * bodyB.InvI;

                    for (var j = 0; j < c.PointCount; j = (j + 1) | 0) {
                        var normal = { v : new Microsoft.Xna.Framework.Vector2() };
                        var point = { v : new Microsoft.Xna.Framework.Vector2() };
                        var separation = { };

                        FarseerPhysics.Dynamics.Contacts.ContactSolver.Solve(c, j, normal, point, separation);

                        var rax = point.v.X - bodyA.Sweep.C.X;
                        var ray = point.v.Y - bodyA.Sweep.C.Y;

                        var rbx = point.v.X - bodyB.Sweep.C.X;
                        var rby = point.v.Y - bodyB.Sweep.C.Y;

                        minSeparation = Math.min(minSeparation, separation.v);

                        var C = Math.max(-0.2, Math.min(baumgarte * (separation.v + FarseerPhysics.Settings.LinearSlop), 0.0));

                        var rnA = rax * normal.v.Y - ray * normal.v.X;
                        var rnB = rbx * normal.v.Y - rby * normal.v.X;
                        var K = invMassA + invMassB + invIA * rnA * rnA + invIB * rnB * rnB;

                        var impulse = K > 0.0 ? -C / K : 0.0;

                        var px = impulse * normal.v.X;
                        var py = impulse * normal.v.Y;

                        bodyA.Sweep.C.X -= invMassA * px;
                        bodyA.Sweep.C.Y -= invMassA * py;
                        bodyA.Sweep.A -= invIA * (rax * py - ray * px);

                        bodyB.Sweep.C.X += invMassB * px;
                        bodyB.Sweep.C.Y += invMassB * py;
                        bodyB.Sweep.A += invIB * (rbx * py - rby * px);

                        bodyA.SynchronizeTransform();
                        bodyB.SynchronizeTransform();
                    }
                }

                return minSeparation >= -0.0075;
            }
        }
    });

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.OnSeparationEventHandler
     * @param   {FarseerPhysics.Dynamics.Fixture}    fixtureA    
     * @param   {FarseerPhysics.Dynamics.Fixture}    fixtureB
     * @return  {void}
     */

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.OnCollisionEventHandler
     * @param   {FarseerPhysics.Dynamics.Fixture}             fixtureA    
     * @param   {FarseerPhysics.Dynamics.Fixture}             fixtureB    
     * @param   {FarseerPhysics.Dynamics.Contacts.Contact}    contact
     * @return  {boolean}
     */

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.BeforeCollisionEventHandler
     * @param   {FarseerPhysics.Dynamics.Fixture}    fixtureA    
     * @param   {FarseerPhysics.Dynamics.Fixture}    fixtureB
     * @return  {boolean}
     */

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.AfterCollisionEventHandler
     * @param   {FarseerPhysics.Dynamics.Fixture}             fixtureA    
     * @param   {FarseerPhysics.Dynamics.Fixture}             fixtureB    
     * @param   {FarseerPhysics.Dynamics.Contacts.Contact}    contact
     * @return  {void}
     */

    /**
     * A fixture is used to attach a Shape to a body for collision detection. A fixture
     inherits its transform from its parent. Fixtures hold additional non-geometric data
     such as friction, collision filters, etc.
     Fixtures are created via Body.CreateFixture.
     Warning: You cannot reuse fixtures.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Fixture
     * @implements  System.IDisposable
     */
    Bridge.define("FarseerPhysics.Dynamics.Fixture", {
        inherits: [System.IDisposable],
        statics: {
            fields: {
                _fixtureIdCounter: 0
            }
        },
        fields: {
            /**
             * Fires after two shapes has collided and are solved. This gives you a chance to get the impact force.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @type FarseerPhysics.Dynamics.AfterCollisionEventHandler
             */
            AfterCollision: null,
            /**
             * Fires when two fixtures are close to each other.
             Due to how the broadphase works, this can be quite inaccurate as shapes are approximated using AABBs.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @type FarseerPhysics.Dynamics.BeforeCollisionEventHandler
             */
            BeforeCollision: null,
            /**
             * Fires when two shapes collide and a contact is created between them.
             Note that the first fixture argument is always the fixture that the delegate is subscribed to.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @type FarseerPhysics.Dynamics.OnCollisionEventHandler
             */
            OnCollision: null,
            /**
             * Fires when two shapes separate and a contact is removed between them.
             Note that the first fixture argument is always the fixture that the delegate is subscribed to.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @type FarseerPhysics.Dynamics.OnSeparationEventHandler
             */
            OnSeparation: null,
            Proxies: null,
            ProxyCount: 0,
            _collidesWith: 0,
            _collisionCategories: 0,
            _collisionGroup: 0,
            _collisionIgnores: null,
            _friction: 0,
            _restitution: 0,
            /**
             * Get the child Shape. You can modify the child Shape, however you should not change the
             number of vertices because this will crash some collision caching mechanisms.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @function Shape
             * @type FarseerPhysics.Collision.Shapes.Shape
             */
            Shape: null,
            /**
             * Gets or sets a value indicating whether this fixture is a sensor.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @function IsSensor
             * @type boolean
             */
            IsSensor: false,
            /**
             * Get the parent body of this fixture. This is null if the fixture is not attached.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @function Body
             * @type FarseerPhysics.Dynamics.Body
             */
            Body: null,
            /**
             * Set the user data. Use this to store your application specific data.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @function UserData
             * @type System.Object
             */
            UserData: null,
            /**
             * Gets a unique ID for this fixture.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @function FixtureId
             * @type number
             */
            FixtureId: 0,
            IsDisposed: false
        },
        props: {
            /**
             * Defaults to 0
             If Settings.UseFPECollisionCategories is set to false:
             Collision groups allow a certain group of objects to never collide (negative)
             or always collide (positive). Zero means no collision group. Non-zero group
             filtering always wins against the mask bits.
             If Settings.UseFPECollisionCategories is set to true:
             If 2 fixtures are in the same collision group, they will not collide.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @function CollisionGroup
             * @type number
             */
            CollisionGroup: {
                get: function () {
                    return this._collisionGroup;
                },
                set: function (value) {
                    if (this._collisionGroup === value) {
                        return;
                    }

                    this._collisionGroup = value;
                    this.Refilter();
                }
            },
            /**
             * Defaults to Category.All
             The collision mask bits. This states the categories that this
             fixture would accept for collision.
             Use Settings.UseFPECollisionCategories to change the behavior.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @function CollidesWith
             * @type FarseerPhysics.Dynamics.Category
             */
            CollidesWith: {
                get: function () {
                    return this._collidesWith;
                },
                set: function (value) {
                    if (this._collidesWith === value) {
                        return;
                    }

                    this._collidesWith = value;
                    this.Refilter();
                }
            },
            /**
             * The collision categories this fixture is a part of.
             If Settings.UseFPECollisionCategories is set to false:
             Defaults to Category.Cat1
             If Settings.UseFPECollisionCategories is set to true:
             Defaults to Category.All
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @function CollisionCategories
             * @type FarseerPhysics.Dynamics.Category
             */
            CollisionCategories: {
                get: function () {
                    return this._collisionCategories;
                },
                set: function (value) {
                    if (this._collisionCategories === value) {
                        return;
                    }

                    this._collisionCategories = value;
                    this.Refilter();
                }
            },
            /**
             * Get the type of the child Shape. You can use this to down cast to the concrete Shape.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @function ShapeType
             * @type FarseerPhysics.Collision.Shapes.ShapeType
             */
            ShapeType: {
                get: function () {
                    return this.Shape.ShapeType;
                }
            },
            /**
             * Get or set the coefficient of friction.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @function Friction
             * @type number
             */
            Friction: {
                get: function () {
                    return this._friction;
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert(!isNaN(value));

                    this._friction = value;
                }
            },
            /**
             * Get or set the coefficient of restitution.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @function Restitution
             * @type number
             */
            Restitution: {
                get: function () {
                    return this._restitution;
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert(!isNaN(value));

                    this._restitution = value;
                }
            }
        },
        alias: ["Dispose", "System$IDisposable$Dispose"],
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (body, shape) {
                FarseerPhysics.Dynamics.Fixture.$ctor2.call(this, body, shape, null);
            },
            $ctor2: function (body, shape, userData) {
                this.$initialize();
                if (FarseerPhysics.Settings.UseFPECollisionCategories) {
                    this._collisionCategories = FarseerPhysics.Dynamics.Category.All;
                } else {
                    this._collisionCategories = FarseerPhysics.Dynamics.Category.Cat1;
                }

                this._collidesWith = FarseerPhysics.Dynamics.Category.All;
                this._collisionGroup = 0;

                this.Friction = 0.2;
                this.Restitution = 0;

                this.IsSensor = false;

                this.Body = body;
                this.UserData = userData;

                if (FarseerPhysics.Settings.ConserveMemory) {
                    this.Shape = shape;
                } else {
                    this.Shape = shape.Clone();
                }

                this.RegisterFixture();
            }
        },
        methods: {
            Dispose: function () {
                if (!this.IsDisposed) {
                    this.Body.DestroyFixture(this);
                    this.IsDisposed = true;
                }
            },
            /**
             * Restores collisions between this fixture and the provided fixture.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Fixture
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @param   {FarseerPhysics.Dynamics.Fixture}    fixture    The fixture.
             * @return  {void}
             */
            RestoreCollisionWith: function (fixture) {
                if (this._collisionIgnores == null) {
                    return;
                }

                if (this._collisionIgnores.containsKey(fixture.FixtureId)) {
                    this._collisionIgnores.set(fixture.FixtureId, false);
                    this.Refilter();
                }
            },
            /**
             * Ignores collisions between this fixture and the provided fixture.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Fixture
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @param   {FarseerPhysics.Dynamics.Fixture}    fixture    The fixture.
             * @return  {void}
             */
            IgnoreCollisionWith: function (fixture) {
                if (this._collisionIgnores == null) {
                    this._collisionIgnores = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Boolean))();
                }

                if (this._collisionIgnores.containsKey(fixture.FixtureId)) {
                    this._collisionIgnores.set(fixture.FixtureId, true);
                } else {
                    this._collisionIgnores.add(fixture.FixtureId, true);
                }

                this.Refilter();
            },
            /**
             * Determines whether collisions are ignored between this fixture and the provided fixture.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Fixture
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @param   {FarseerPhysics.Dynamics.Fixture}    fixture    The fixture.
             * @return  {boolean}                                       <pre><code>true</code></pre> if the fixture is ignored; otherwise, <pre><code>false</code></pre>.
             */
            IsFixtureIgnored: function (fixture) {
                if (this._collisionIgnores == null) {
                    return false;
                }

                if (this._collisionIgnores.containsKey(fixture.FixtureId)) {
                    return this._collisionIgnores.get(fixture.FixtureId);
                }

                return false;
            },
            /**
             * Contacts are persistant and will keep being persistant unless they are
             flagged for filtering.
             This methods flags all contacts associated with the body for filtering.
             *
             * @instance
             * @this FarseerPhysics.Dynamics.Fixture
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @return  {void}
             */
            Refilter: function () {
                var edge = this.Body.ContactList;
                while (edge != null) {
                    var contact = edge.Contact;
                    var fixtureA = contact.FixtureA;
                    var fixtureB = contact.FixtureB;
                    if (Bridge.referenceEquals(fixtureA, this) || Bridge.referenceEquals(fixtureB, this)) {
                        contact.FlagForFiltering();
                    }

                    edge = edge.Next;
                }

                var world = this.Body.World;

                if (world == null) {
                    return;
                }

                var broadPhase = world.ContactManager.BroadPhase;
                for (var i = 0; i < this.ProxyCount; i = (i + 1) | 0) {
                    broadPhase.FarseerPhysics$Collision$IBroadPhase$TouchProxy(this.Proxies[System.Array.index(i, this.Proxies)].ProxyId);
                }
            },
            RegisterFixture: function () {
                var $t;
                this.Proxies = System.Array.init(this.Shape.ChildCount, function (){
                    return new FarseerPhysics.Dynamics.FixtureProxy();
                }, FarseerPhysics.Dynamics.FixtureProxy);
                this.ProxyCount = 0;

                this.FixtureId = Bridge.identity(FarseerPhysics.Dynamics.Fixture._fixtureIdCounter, ($t = (FarseerPhysics.Dynamics.Fixture._fixtureIdCounter + 1) | 0, FarseerPhysics.Dynamics.Fixture._fixtureIdCounter = $t, $t));

                if ((this.Body.Flags & FarseerPhysics.Dynamics.BodyFlags.Enabled) === FarseerPhysics.Dynamics.BodyFlags.Enabled) {
                    var broadPhase = this.Body.World.ContactManager.BroadPhase;
                    this.CreateProxies(broadPhase, Bridge.ref(this.Body, "Xf"));
                }

                this.Body.FixtureList.add(this);

                if (this.Shape._density > 0.0) {
                    this.Body.ResetMassData();
                }

                this.Body.World.Flags |= FarseerPhysics.Dynamics.WorldFlags.NewFixture;

                if (!Bridge.staticEquals(this.Body.World.FixtureAdded, null)) {
                    this.Body.World.FixtureAdded(this);
                }
            },
            /**
             * Test a point for containment in this fixture.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Fixture
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @param   {Microsoft.Xna.Framework.Vector2}    point    A point in world coordinates.
             * @return  {boolean}
             */
            TestPoint: function (point) {
                return this.Shape.TestPoint(Bridge.ref(this.Body, "Xf"), point);
            },
            /**
             * Cast a ray against this Shape.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Fixture
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @param   {FarseerPhysics.Collision.RayCastOutput}    output        The ray-cast results.
             * @param   {FarseerPhysics.Collision.RayCastInput}     input         The ray-cast input parameters.
             * @param   {number}                                    childIndex    Index of the child.
             * @return  {boolean}
             */
            RayCast: function (output, input, childIndex) {
                return this.Shape.RayCast(output, input, Bridge.ref(this.Body, "Xf"), childIndex);
            },
            /**
             * Get the fixture's AABB. This AABB may be enlarge and/or stale.
             If you need a more accurate AABB, compute it using the Shape and
             the body transform.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Fixture
             * @memberof FarseerPhysics.Dynamics.Fixture
             * @param   {FarseerPhysics.Collision.AABB}    aabb          The aabb.
             * @param   {number}                           childIndex    Index of the child.
             * @return  {void}
             */
            GetAABB: function (aabb, childIndex) {
                System.Diagnostics.Debug.Assert(0 <= childIndex && childIndex < this.ProxyCount);
                aabb.v = this.Proxies[System.Array.index(childIndex, this.Proxies)].AABB.$clone();
            },
            Clone: function (body) {
                var $t;
                var fixture = new FarseerPhysics.Dynamics.Fixture.ctor();
                fixture.Body = body;

                if (FarseerPhysics.Settings.ConserveMemory) {
                    fixture.Shape = this.Shape;
                } else {
                    fixture.Shape = this.Shape.Clone();
                }

                fixture.UserData = this.UserData;
                fixture.Restitution = this.Restitution;
                fixture.Friction = this.Friction;
                fixture.IsSensor = this.IsSensor;
                fixture._collisionGroup = this.CollisionGroup;
                fixture._collisionCategories = this.CollisionCategories;
                fixture._collidesWith = this.CollidesWith;

                if (this._collisionIgnores != null) {
                    fixture._collisionIgnores = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Boolean))();

                    $t = Bridge.getEnumerator(this._collisionIgnores);
                    try {
                        while ($t.moveNext()) {
                            var pair = $t.Current;
                            fixture._collisionIgnores.add(pair.key, pair.value);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }}

                fixture.RegisterFixture();
                return fixture;
            },
            DeepClone: function () {
                var fix = this.Clone(this.Body.Clone());
                return fix;
            },
            Destroy: function () {
                System.Diagnostics.Debug.Assert(this.ProxyCount === 0);

                this.Proxies = null;
                this.Shape = null;

                this.BeforeCollision = null;
                this.OnCollision = null;
                this.OnSeparation = null;
                this.AfterCollision = null;

                if (!Bridge.staticEquals(this.Body.World.FixtureRemoved, null)) {
                    this.Body.World.FixtureRemoved(this);
                }

                this.Body.World.FixtureAdded = null;
                this.Body.World.FixtureRemoved = null;
                this.OnSeparation = null;
                this.OnCollision = null;
            },
            CreateProxies: function (broadPhase, xf) {
                System.Diagnostics.Debug.Assert(this.ProxyCount === 0);

                this.ProxyCount = this.Shape.ChildCount;

                for (var i = 0; i < this.ProxyCount; i = (i + 1) | 0) {
                    var proxy = { v : new FarseerPhysics.Dynamics.FixtureProxy() };
                    this.Shape.ComputeAABB(Bridge.ref(proxy.v, "AABB"), xf, i);

                    proxy.v.Fixture = this;
                    proxy.v.ChildIndex = i;
                    proxy.v.ProxyId = broadPhase.FarseerPhysics$Collision$IBroadPhase$AddProxy(proxy);

                    this.Proxies[System.Array.index(i, this.Proxies)] = proxy.v.$clone();
                }
            },
            DestroyProxies: function (broadPhase) {
                for (var i = 0; i < this.ProxyCount; i = (i + 1) | 0) {
                    broadPhase.FarseerPhysics$Collision$IBroadPhase$RemoveProxy(this.Proxies[System.Array.index(i, this.Proxies)].ProxyId);
                    this.Proxies[System.Array.index(i, this.Proxies)].ProxyId = -1;
                }

                this.ProxyCount = 0;
            },
            Synchronize: function (broadPhase, transform1, transform2) {
                if (this.ProxyCount === 0) {
                    return;
                }

                for (var i = 0; i < this.ProxyCount; i = (i + 1) | 0) {
                    var proxy = this.Proxies[System.Array.index(i, this.Proxies)].$clone();

                    var aabb1 = { v : new FarseerPhysics.Collision.AABB() }, aabb2 = { v : new FarseerPhysics.Collision.AABB() };
                    this.Shape.ComputeAABB(aabb1, transform1, proxy.ChildIndex);
                    this.Shape.ComputeAABB(aabb2, transform2, proxy.ChildIndex);

                    proxy.AABB.Combine$1(aabb1, aabb2);

                    var displacement = Microsoft.Xna.Framework.Vector2.op_Subtraction(transform2.v.Position.$clone(), transform1.v.Position.$clone());

                    broadPhase.FarseerPhysics$Collision$IBroadPhase$MoveProxy(proxy.ProxyId, Bridge.ref(proxy, "AABB"), displacement.$clone());
                }
            },
            CompareTo: function (fixture) {
                return (this.CollidesWith === fixture.CollidesWith && this.CollisionCategories === fixture.CollisionCategories && this.CollisionGroup === fixture.CollisionGroup && this.Friction === fixture.Friction && this.IsSensor === fixture.IsSensor && this.Restitution === fixture.Restitution && this.Shape.CompareTo(fixture.Shape) && Bridge.referenceEquals(this.UserData, fixture.UserData));
            }
        }
    });

    /**
     * This proxy is used internally to connect fixtures to the broad-phase.
     *
     * @public
     * @class FarseerPhysics.Dynamics.FixtureProxy
     */
    Bridge.define("FarseerPhysics.Dynamics.FixtureProxy", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Dynamics.FixtureProxy(); }
            }
        },
        fields: {
            AABB: null,
            ChildIndex: 0,
            Fixture: null,
            ProxyId: 0
        },
        ctors: {
            init: function () {
                this.AABB = new FarseerPhysics.Collision.AABB();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5340810029, this.AABB, this.ChildIndex, this.Fixture, this.ProxyId]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Dynamics.FixtureProxy)) {
                    return false;
                }
                return Bridge.equals(this.AABB, o.AABB) && Bridge.equals(this.ChildIndex, o.ChildIndex) && Bridge.equals(this.Fixture, o.Fixture) && Bridge.equals(this.ProxyId, o.ProxyId);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Dynamics.FixtureProxy();
                s.AABB = this.AABB.$clone();
                s.ChildIndex = this.ChildIndex;
                s.Fixture = this.Fixture;
                s.ProxyId = this.ProxyId;
                return s;
            }
        }
    });

    /**
     * This is an internal class.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Island
     */
    Bridge.define("FarseerPhysics.Dynamics.Island", {
        statics: {
            fields: {
                LinTolSqr: 0,
                AngTolSqr: 0
            },
            ctors: {
                init: function () {
                    this.LinTolSqr = 0.0001;
                    this.AngTolSqr = 0.00121846993;
                }
            }
        },
        fields: {
            Bodies: null,
            BodyCount: 0,
            ContactCount: 0,
            JointCount: 0,
            _bodyCapacity: 0,
            _contactCapacity: 0,
            _contactManager: null,
            _contactSolver: null,
            _contacts: null,
            _jointCapacity: 0,
            _joints: null,
            JointUpdateTime: 0,
            _tmpTime: 0
        },
        ctors: {
            init: function () {
                this._contactSolver = new FarseerPhysics.Dynamics.Contacts.ContactSolver();
            }
        },
        methods: {
            Reset: function (bodyCapacity, contactCapacity, jointCapacity, contactManager) {
                this._bodyCapacity = bodyCapacity;
                this._contactCapacity = contactCapacity;
                this._jointCapacity = jointCapacity;

                this.BodyCount = 0;
                this.ContactCount = 0;
                this.JointCount = 0;

                this._contactManager = contactManager;

                if (this.Bodies == null || this.Bodies.length < bodyCapacity) {
                    this.Bodies = System.Array.init(bodyCapacity, null, FarseerPhysics.Dynamics.Body);
                }

                if (this._contacts == null || this._contacts.length < contactCapacity) {
                    this._contacts = System.Array.init(Bridge.Int.mul(contactCapacity, 2), null, FarseerPhysics.Dynamics.Contacts.Contact);
                }

                if (this._joints == null || this._joints.length < jointCapacity) {
                    this._joints = System.Array.init(Bridge.Int.mul(jointCapacity, 2), null, FarseerPhysics.Dynamics.Joints.Joint);
                }
            },
            Clear: function () {
                this.BodyCount = 0;
                this.ContactCount = 0;
                this.JointCount = 0;
            },
            Solve: function (step, gravity) {
                for (var i = 0; i < this.BodyCount; i = (i + 1) | 0) {
                    var b = this.Bodies[System.Array.index(i, this.Bodies)];

                    if (b.BodyType !== FarseerPhysics.Dynamics.BodyType.Dynamic) {
                        continue;
                    }

                    if (b.IgnoreGravity) {
                        b.LinearVelocityInternal.X += step.v.dt * (b.InvMass * b.Force.X);
                        b.LinearVelocityInternal.Y += step.v.dt * (b.InvMass * b.Force.Y);
                        b.AngularVelocityInternal += step.v.dt * b.InvI * b.Torque;
                    } else {
                        b.LinearVelocityInternal.X += step.v.dt * (gravity.v.X + b.InvMass * b.Force.X);
                        b.LinearVelocityInternal.Y += step.v.dt * (gravity.v.Y + b.InvMass * b.Force.Y);
                        b.AngularVelocityInternal += step.v.dt * b.InvI * b.Torque;
                    }

                    b.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Multiply$1(b.LinearVelocityInternal.$clone(), FarseerPhysics.Common.MathUtils.Clamp$2(1.0 - step.v.dt * b.LinearDamping, 0.0, 1.0));
                    b.AngularVelocityInternal *= FarseerPhysics.Common.MathUtils.Clamp$2(1.0 - step.v.dt * b.AngularDamping, 0.0, 1.0);
                }

                var i1 = -1;
                for (var i2 = 0; i2 < this.ContactCount; i2 = (i2 + 1) | 0) {
                    var fixtureA = this._contacts[System.Array.index(i2, this._contacts)].FixtureA;
                    var fixtureB = this._contacts[System.Array.index(i2, this._contacts)].FixtureB;
                    var bodyA = fixtureA.Body;
                    var bodyB = fixtureB.Body;
                    var nonStatic = bodyA.BodyType !== FarseerPhysics.Dynamics.BodyType.Static && bodyB.BodyType !== FarseerPhysics.Dynamics.BodyType.Static;
                    if (nonStatic) {
                        i1 = (i1 + 1) | 0;

                        var tmp = this._contacts[System.Array.index(i1, this._contacts)];
                        this._contacts[System.Array.index(i1, this._contacts)] = this._contacts[System.Array.index(i2, this._contacts)];
                        this._contacts[System.Array.index(i2, this._contacts)] = tmp;
                    }
                }

                this._contactSolver.Reset(this._contacts, this.ContactCount, step.v.dtRatio, FarseerPhysics.Settings.EnableWarmstarting);
                this._contactSolver.InitializeVelocityConstraints();

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._contactSolver.WarmStart();
                }


                for (var i3 = 0; i3 < this.JointCount; i3 = (i3 + 1) | 0) {
                    if (this._joints[System.Array.index(i3, this._joints)].Enabled) {
                        this._joints[System.Array.index(i3, this._joints)].InitVelocityConstraints(step);
                    }
                }


                for (var i4 = 0; i4 < FarseerPhysics.Settings.VelocityIterations; i4 = (i4 + 1) | 0) {
                    for (var j = 0; j < this.JointCount; j = (j + 1) | 0) {
                        var joint = this._joints[System.Array.index(j, this._joints)];

                        if (!joint.Enabled) {
                            continue;
                        }

                        joint.SolveVelocityConstraints(step);
                        joint.Validate(step.v.inv_dt);
                    }


                    this._contactSolver.SolveVelocityConstraints();
                }

                this._contactSolver.StoreImpulses();

                for (var i5 = 0; i5 < this.BodyCount; i5 = (i5 + 1) | 0) {
                    var b1 = this.Bodies[System.Array.index(i5, this.Bodies)];

                    if (b1.BodyType === FarseerPhysics.Dynamics.BodyType.Static) {
                        continue;
                    }

                    var translationX = step.v.dt * b1.LinearVelocityInternal.X;
                    var translationY = step.v.dt * b1.LinearVelocityInternal.Y;
                    var result = translationX * translationX + translationY * translationY;

                    if (result > FarseerPhysics.Settings.MaxTranslationSquared) {
                        var sq = Math.sqrt(result);

                        var ratio = FarseerPhysics.Settings.MaxTranslation / sq;
                        b1.LinearVelocityInternal.X *= ratio;
                        b1.LinearVelocityInternal.Y *= ratio;
                    }

                    var rotation = step.v.dt * b1.AngularVelocityInternal;
                    if (rotation * rotation > FarseerPhysics.Settings.MaxRotationSquared) {
                        var ratio1 = FarseerPhysics.Settings.MaxRotation / Math.abs(rotation);
                        b1.AngularVelocityInternal *= ratio1;
                    }

                    b1.Sweep.C0.X = b1.Sweep.C.X;
                    b1.Sweep.C0.Y = b1.Sweep.C.Y;
                    b1.Sweep.A0 = b1.Sweep.A;

                    b1.Sweep.C.X += step.v.dt * b1.LinearVelocityInternal.X;
                    b1.Sweep.C.Y += step.v.dt * b1.LinearVelocityInternal.Y;
                    b1.Sweep.A += step.v.dt * b1.AngularVelocityInternal;

                    b1.SynchronizeTransform();

                }

                for (var i6 = 0; i6 < FarseerPhysics.Settings.PositionIterations; i6 = (i6 + 1) | 0) {
                    var contactsOkay = this._contactSolver.SolvePositionConstraints(FarseerPhysics.Settings.ContactBaumgarte);
                    var jointsOkay = true;

                    for (var j1 = 0; j1 < this.JointCount; j1 = (j1 + 1) | 0) {
                        var joint1 = this._joints[System.Array.index(j1, this._joints)];
                        if (!joint1.Enabled) {
                            continue;
                        }

                        var jointOkay = joint1.SolvePositionConstraints();
                        jointsOkay = jointsOkay && jointOkay;
                    }

                    if (contactsOkay && jointsOkay) {
                        break;
                    }
                }


                this.Report(this._contactSolver.Constraints);

                if (FarseerPhysics.Settings.AllowSleep) {
                    var minSleepTime = FarseerPhysics.Settings.MaxFloat;

                    for (var i7 = 0; i7 < this.BodyCount; i7 = (i7 + 1) | 0) {
                        var b2 = this.Bodies[System.Array.index(i7, this.Bodies)];
                        if (b2.BodyType === FarseerPhysics.Dynamics.BodyType.Static) {
                            continue;
                        }

                        if ((b2.Flags & FarseerPhysics.Dynamics.BodyFlags.AutoSleep) === 0) {
                            b2.SleepTime = 0.0;
                            minSleepTime = 0.0;
                        }

                        if ((b2.Flags & FarseerPhysics.Dynamics.BodyFlags.AutoSleep) === 0 || b2.AngularVelocityInternal * b2.AngularVelocityInternal > FarseerPhysics.Dynamics.Island.AngTolSqr || Microsoft.Xna.Framework.Vector2.Dot(b2.LinearVelocityInternal.$clone(), b2.LinearVelocityInternal.$clone()) > FarseerPhysics.Dynamics.Island.LinTolSqr) {
                            b2.SleepTime = 0.0;
                            minSleepTime = 0.0;
                        } else {
                            b2.SleepTime += step.v.dt;
                            minSleepTime = Math.min(minSleepTime, b2.SleepTime);
                        }
                    }

                    if (minSleepTime >= FarseerPhysics.Settings.TimeToSleep) {
                        for (var i8 = 0; i8 < this.BodyCount; i8 = (i8 + 1) | 0) {
                            var b3 = this.Bodies[System.Array.index(i8, this.Bodies)];
                            b3.Awake = false;
                        }
                    }
                }
            },
            SolveTOI: function (subStep) {
                this._contactSolver.Reset(this._contacts, this.ContactCount, subStep.v.dtRatio, false);

                var kTOIBaumgarte = 0.75;
                for (var i = 0; i < FarseerPhysics.Settings.TOIPositionIterations; i = (i + 1) | 0) {
                    var contactsOkay = this._contactSolver.SolvePositionConstraints(kTOIBaumgarte);
                    if (contactsOkay) {
                        break;
                    }

                    if (i === ((FarseerPhysics.Settings.TOIPositionIterations - 1) | 0)) {
                        i = (i + 0) | 0;
                    }
                }

                for (var i1 = 0; i1 < this.BodyCount; i1 = (i1 + 1) | 0) {
                    var body = this.Bodies[System.Array.index(i1, this.Bodies)];
                    body.Sweep.A0 = body.Sweep.A;
                    body.Sweep.C0 = body.Sweep.C.$clone();
                }

                this._contactSolver.InitializeVelocityConstraints();

                for (var i2 = 0; i2 < FarseerPhysics.Settings.TOIVelocityIterations; i2 = (i2 + 1) | 0) {
                    this._contactSolver.SolveVelocityConstraints();
                }


                for (var i3 = 0; i3 < this.BodyCount; i3 = (i3 + 1) | 0) {
                    var b = this.Bodies[System.Array.index(i3, this.Bodies)];

                    if (b.BodyType === FarseerPhysics.Dynamics.BodyType.Static) {
                        continue;
                    }

                    var translationx = subStep.v.dt * b.LinearVelocityInternal.X;
                    var translationy = subStep.v.dt * b.LinearVelocityInternal.Y;
                    var dot = translationx * translationx + translationy * translationy;
                    if (dot > FarseerPhysics.Settings.MaxTranslationSquared) {
                        var norm = 1.0 / Math.sqrt(dot);
                        var value = FarseerPhysics.Settings.MaxTranslation * subStep.v.inv_dt;
                        b.LinearVelocityInternal.X = value * (translationx * norm);
                        b.LinearVelocityInternal.Y = value * (translationy * norm);
                    }

                    var rotation = subStep.v.dt * b.AngularVelocity;
                    if (rotation * rotation > FarseerPhysics.Settings.MaxRotationSquared) {
                        if (rotation < 0.0) {
                            b.AngularVelocityInternal = -subStep.v.inv_dt * FarseerPhysics.Settings.MaxRotation;
                        } else {
                            b.AngularVelocityInternal = subStep.v.inv_dt * FarseerPhysics.Settings.MaxRotation;
                        }
                    }

                    b.Sweep.C.X += subStep.v.dt * b.LinearVelocityInternal.X;
                    b.Sweep.C.Y += subStep.v.dt * b.LinearVelocityInternal.Y;
                    b.Sweep.A += subStep.v.dt * b.AngularVelocityInternal;

                    b.SynchronizeTransform();

                }

                this.Report(this._contactSolver.Constraints);
            },
            Add: function (body) {
                System.Diagnostics.Debug.Assert(this.BodyCount < this._bodyCapacity);
                this.Bodies[System.Array.index(Bridge.identity(this.BodyCount, (this.BodyCount = (this.BodyCount + 1) | 0)), this.Bodies)] = body;
            },
            Add$1: function (contact) {
                System.Diagnostics.Debug.Assert(this.ContactCount < this._contactCapacity);
                this._contacts[System.Array.index(Bridge.identity(this.ContactCount, (this.ContactCount = (this.ContactCount + 1) | 0)), this._contacts)] = contact;
            },
            Add$2: function (joint) {
                System.Diagnostics.Debug.Assert(this.JointCount < this._jointCapacity);
                this._joints[System.Array.index(Bridge.identity(this.JointCount, (this.JointCount = (this.JointCount + 1) | 0)), this._joints)] = joint;
            },
            Report: function (constraints) {
                if (this._contactManager == null) {
                    return;
                }

                for (var i = 0; i < this.ContactCount; i = (i + 1) | 0) {
                    var c = this._contacts[System.Array.index(i, this._contacts)];

                    if (!Bridge.staticEquals(c.FixtureA.AfterCollision, null)) {
                        c.FixtureA.AfterCollision(c.FixtureA, c.FixtureB, c);
                    }

                    if (!Bridge.staticEquals(c.FixtureB.AfterCollision, null)) {
                        c.FixtureB.AfterCollision(c.FixtureB, c.FixtureA, c);
                    }

                    if (!Bridge.staticEquals(this._contactManager.PostSolve, null)) {
                        var cc = constraints[System.Array.index(i, constraints)];

                        this._contactManager.PostSolve(c, cc);
                    }
                }
            }
        }
    });

    /**
     * @memberof System
     * @callback System.Action
     * @param   {FarseerPhysics.Dynamics.Joints.Joint}    arg1    
     * @param   {number}                                  arg2
     * @return  {void}
     */

    Bridge.define("FarseerPhysics.Dynamics.Joints.Joint", {
        fields: {
            /**
             * The Breakpoint simply indicates the maximum Value the JointError can be before it breaks.
             The default value is float.MaxValue
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.Joint
             * @type number
             */
            Breakpoint: 0,
            EdgeA: null,
            EdgeB: null,
            Enabled: false,
            InvIA: 0,
            InvIB: 0,
            InvMassA: 0,
            InvMassB: 0,
            IslandFlag: false,
            LocalCenterA: null,
            LocalCenterB: null,
            /**
             * Gets or sets the type of the joint.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.Joint
             * @function JointType
             * @type FarseerPhysics.Dynamics.Joints.JointType
             */
            JointType: 0,
            /**
             * Get the first body attached to this joint.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.Joint
             * @function BodyA
             * @type FarseerPhysics.Dynamics.Body
             */
            BodyA: null,
            /**
             * Get the second body attached to this joint.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.Joint
             * @function BodyB
             * @type FarseerPhysics.Dynamics.Body
             */
            BodyB: null,
            /**
             * Set the user data pointer.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.Joint
             * @function UserData
             * @type System.Object
             */
            UserData: null,
            /**
             * Set this flag to true if the attached bodies should collide.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.Joint
             * @function CollideConnected
             * @type boolean
             */
            CollideConnected: false
        },
        events: {
            /**
             * Fires when the joint is broken.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.Joint
             * @memberof FarseerPhysics.Dynamics.Joints.Joint
             * @function addBroke
             * @param   {System.Action}    value
             * @return  {void}
             */
            /**
             * Fires when the joint is broken.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.Joint
             * @memberof FarseerPhysics.Dynamics.Joints.Joint
             * @function removeBroke
             * @param   {System.Action}    value
             * @return  {void}
             */
            Broke: null
        },
        props: {
            /**
             * Short-cut function to determine if either body is inactive.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.Joints.Joint
             * @function Active
             * @type boolean
             */
            Active: {
                get: function () {
                    return this.BodyA.Enabled && this.BodyB.Enabled;
                }
            }
        },
        ctors: {
            init: function () {
                this.LocalCenterA = new Microsoft.Xna.Framework.Vector2();
                this.LocalCenterB = new Microsoft.Xna.Framework.Vector2();
                this.Breakpoint = 3.40282347E+38;
                this.EdgeA = new FarseerPhysics.Dynamics.Joints.JointEdge();
                this.EdgeB = new FarseerPhysics.Dynamics.Joints.JointEdge();
                this.Enabled = true;
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor2: function (body, bodyB) {
                this.$initialize();
                System.Diagnostics.Debug.Assert(!Bridge.referenceEquals(body, bodyB));

                this.BodyA = body;
                this.BodyB = bodyB;

                this.CollideConnected = false;
            },
            /**
             * Constructor for fixed joint
             *
             * @instance
             * @protected
             * @this FarseerPhysics.Dynamics.Joints.Joint
             * @memberof FarseerPhysics.Dynamics.Joints.Joint
             * @param   {FarseerPhysics.Dynamics.Body}    body
             * @return  {void}
             */
            $ctor1: function (body) {
                this.$initialize();
                this.BodyA = body;

                this.CollideConnected = false;
            }
        },
        methods: {
            WakeBodies: function () {
                this.BodyA.Awake = true;
                if (this.BodyB != null) {
                    this.BodyB.Awake = true;
                }
            },
            /**
             * Return true if the joint is a fixed type.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.Joint
             * @memberof FarseerPhysics.Dynamics.Joints.Joint
             * @return  {boolean}
             */
            IsFixedType: function () {
                return this.JointType === FarseerPhysics.Dynamics.Joints.JointType.FixedRevolute || this.JointType === FarseerPhysics.Dynamics.Joints.JointType.FixedDistance || this.JointType === FarseerPhysics.Dynamics.Joints.JointType.FixedPrismatic || this.JointType === FarseerPhysics.Dynamics.Joints.JointType.FixedLine || this.JointType === FarseerPhysics.Dynamics.Joints.JointType.FixedMouse || this.JointType === FarseerPhysics.Dynamics.Joints.JointType.FixedAngle || this.JointType === FarseerPhysics.Dynamics.Joints.JointType.FixedFriction;
            },
            Validate: function (invDT) {
                if (!this.Enabled) {
                    return;
                }

                var jointError = this.GetReactionForce(invDT).Length();
                if (Math.abs(jointError) <= this.Breakpoint) {
                    return;
                }

                this.Enabled = false;

                if (!Bridge.staticEquals(this.Broke, null)) {
                    this.Broke(this, jointError);
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Dynamics.Joints.Jacobian", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Dynamics.Joints.Jacobian(); }
            }
        },
        fields: {
            AngularA: 0,
            AngularB: 0,
            LinearA: null,
            LinearB: null
        },
        ctors: {
            init: function () {
                this.LinearA = new Microsoft.Xna.Framework.Vector2();
                this.LinearB = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            SetZero: function () {
                this.LinearA = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                this.AngularA = 0.0;
                this.LinearB = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                this.AngularB = 0.0;
            },
            Set: function (x1, a1, x2, a2) {
                this.LinearA = x1.$clone();
                this.AngularA = a1;
                this.LinearB = x2.$clone();
                this.AngularB = a2;
            },
            Compute: function (x1, a1, x2, a2) {
                return Microsoft.Xna.Framework.Vector2.Dot(this.LinearA.$clone(), x1.$clone()) + this.AngularA * a1 + Microsoft.Xna.Framework.Vector2.Dot(this.LinearB.$clone(), x2.$clone()) + this.AngularB * a2;
            },
            getHashCode: function () {
                var h = Bridge.addHash([3720661676, this.AngularA, this.AngularB, this.LinearA, this.LinearB]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Dynamics.Joints.Jacobian)) {
                    return false;
                }
                return Bridge.equals(this.AngularA, o.AngularA) && Bridge.equals(this.AngularB, o.AngularB) && Bridge.equals(this.LinearA, o.LinearA) && Bridge.equals(this.LinearB, o.LinearB);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Dynamics.Joints.Jacobian();
                s.AngularA = this.AngularA;
                s.AngularB = this.AngularB;
                s.LinearA = this.LinearA.$clone();
                s.LinearB = this.LinearB.$clone();
                return s;
            }
        }
    });

    /** @namespace FarseerPhysics.Dynamics.Joints */

    /**
     * A joint edge is used to connect bodies and joints together
     in a joint graph where each body is a node and each joint
     is an edge. A joint edge belongs to a doubly linked list
     maintained in each attached body. Each joint has two joint
     nodes, one for each attached body.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.JointEdge
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.JointEdge", {
        fields: {
            /**
             * The joint.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.JointEdge
             * @type FarseerPhysics.Dynamics.Joints.Joint
             */
            Joint: null,
            /**
             * The next joint edge in the body's joint list.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.JointEdge
             * @type FarseerPhysics.Dynamics.Joints.JointEdge
             */
            Next: null,
            /**
             * Provides quick access to the other body attached.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.JointEdge
             * @type FarseerPhysics.Dynamics.Body
             */
            Other: null,
            /**
             * The previous joint edge in the body's joint list.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.JointEdge
             * @type FarseerPhysics.Dynamics.Joints.JointEdge
             */
            Prev: null
        }
    });

    Bridge.define("FarseerPhysics.Dynamics.Joints.JointType", {
        $kind: "enum",
        statics: {
            fields: {
                Revolute: 0,
                Prismatic: 1,
                Distance: 2,
                Pulley: 3,
                Gear: 4,
                Line: 5,
                Weld: 6,
                Friction: 7,
                Slider: 8,
                Angle: 9,
                Rope: 10,
                FixedMouse: 11,
                FixedRevolute: 12,
                FixedDistance: 13,
                FixedLine: 14,
                FixedPrismatic: 15,
                FixedAngle: 16,
                FixedFriction: 17
            }
        }
    });

    Bridge.define("FarseerPhysics.Dynamics.Joints.LimitState", {
        $kind: "enum",
        statics: {
            fields: {
                Inactive: 0,
                AtLower: 1,
                AtUpper: 2,
                Equal: 3
            }
        }
    });

    /**
     * This is an internal structure.
     *
     * @public
     * @class FarseerPhysics.Dynamics.TimeStep
     */
    Bridge.define("FarseerPhysics.Dynamics.TimeStep", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Dynamics.TimeStep(); }
            }
        },
        fields: {
            /**
             * Time step (Delta time)
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.TimeStep
             * @type number
             */
            dt: 0,
            /**
             * dt * inv_dt0
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.TimeStep
             * @type number
             */
            dtRatio: 0,
            /**
             * Inverse time step (0 if dt == 0).
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.TimeStep
             * @type number
             */
            inv_dt: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3587366311, this.dt, this.dtRatio, this.inv_dt]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Dynamics.TimeStep)) {
                    return false;
                }
                return Bridge.equals(this.dt, o.dt) && Bridge.equals(this.dtRatio, o.dtRatio) && Bridge.equals(this.inv_dt, o.inv_dt);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Dynamics.TimeStep();
                s.dt = this.dt;
                s.dtRatio = this.dtRatio;
                s.inv_dt = this.inv_dt;
                return s;
            }
        }
    });

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.RayCastCallback
     * @param   {FarseerPhysics.Dynamics.Fixture}    fixture     
     * @param   {Microsoft.Xna.Framework.Vector2}    point       
     * @param   {Microsoft.Xna.Framework.Vector2}    normal      
     * @param   {number}                             fraction
     * @return  {number}
     */

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.JointDelegate
     * @param   {FarseerPhysics.Dynamics.Joints.Joint}    joint
     * @return  {void}
     */

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.FixtureDelegate
     * @param   {FarseerPhysics.Dynamics.Fixture}    fixture
     * @return  {void}
     */

    /**
     * @memberof FarseerPhysics.Dynamics
     * @callback FarseerPhysics.Dynamics.BodyDelegate
     * @param   {FarseerPhysics.Dynamics.Body}    body
     * @return  {void}
     */

    /**
     * The world class manages all physics entities, dynamic simulation,
     and asynchronous queries.
     *
     * @public
     * @class FarseerPhysics.Dynamics.World
     */
    Bridge.define("FarseerPhysics.Dynamics.World", {
        fields: {
            /**
             * Fires whenever a body has been added
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.World
             * @type FarseerPhysics.Dynamics.BodyDelegate
             */
            BodyAdded: null,
            /**
             * Fires whenever a body has been removed
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.World
             * @type FarseerPhysics.Dynamics.BodyDelegate
             */
            BodyRemoved: null,
            ContactPool: null,
            /**
             * Fires whenever a fixture has been added
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.World
             * @type FarseerPhysics.Dynamics.FixtureDelegate
             */
            FixtureAdded: null,
            /**
             * Fires whenever a fixture has been removed
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.World
             * @type FarseerPhysics.Dynamics.FixtureDelegate
             */
            FixtureRemoved: null,
            Flags: 0,
            /**
             * Fires whenever a joint has been added
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.World
             * @type FarseerPhysics.Dynamics.JointDelegate
             */
            JointAdded: null,
            /**
             * Fires whenever a joint has been removed
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.World
             * @type FarseerPhysics.Dynamics.JointDelegate
             */
            JointRemoved: null,
            ControllerAdded: null,
            ControllerRemoved: null,
            _invDt0: 0,
            Island: null,
            _stack: null,
            _stepComplete: false,
            _bodyAddList: null,
            _bodyRemoveList: null,
            _jointAddList: null,
            _jointRemoveList: null,
            _input: null,
            /**
             * If false, the whole simulation stops. It still processes added and removed geometries.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.World
             * @default true
             * @type boolean
             */
            Enabled: false,
            ControllerList: null,
            BreakableBodyList: null,
            UpdateTime: 0,
            ContinuousPhysicsTime: 0,
            ControllersUpdateTime: 0,
            AddRemoveTime: 0,
            ContactsUpdateTime: 0,
            SolveUpdateTime: 0,
            /**
             * Change the global gravity vector.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.World
             * @type Microsoft.Xna.Framework.Vector2
             */
            Gravity: null,
            /**
             * Get the contact manager for testing.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.World
             * @function ContactManager
             * @type FarseerPhysics.Dynamics.ContactManager
             */
            ContactManager: null,
            /**
             * Get the world body list.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.World
             * @function BodyList
             * @type System.Collections.Generic.List$1
             */
            BodyList: null,
            /**
             * Get the world joint list.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.World
             * @function JointList
             * @type System.Collections.Generic.List$1
             */
            JointList: null
        },
        props: {
            /**
             * Get the number of broad-phase proxies.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.World
             * @function ProxyCount
             * @type number
             */
            ProxyCount: {
                get: function () {
                    return this.ContactManager.BroadPhase.FarseerPhysics$Collision$IBroadPhase$ProxyCount;
                }
            },
            /**
             * Set flag to control automatic clearing of forces after each time step.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.World
             * @function AutoClearForces
             * @type boolean
             */
            AutoClearForces: {
                get: function () {
                    return (this.Flags & FarseerPhysics.Dynamics.WorldFlags.ClearForces) === FarseerPhysics.Dynamics.WorldFlags.ClearForces;
                },
                set: function (value) {
                    if (value) {
                        this.Flags |= FarseerPhysics.Dynamics.WorldFlags.ClearForces;
                    } else {
                        this.Flags &= -5;
                    }
                }
            },
            /**
             * Get the world contact list. With the returned contact, use Contact.GetNext to get
             the next contact in the world list. A null contact indicates the end of the list.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.World
             * @function ContactList
             * @type System.Collections.Generic.List$1
             */
            ContactList: {
                get: function () {
                    return this.ContactManager.ContactList;
                }
            },
            /**
             * Enable/disable single stepped continuous physics. For testing.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.World
             * @function EnableSubStepping
             * @type boolean
             */
            EnableSubStepping: {
                get: function () {
                    return (this.Flags & FarseerPhysics.Dynamics.WorldFlags.SubStepping) === FarseerPhysics.Dynamics.WorldFlags.SubStepping;
                },
                set: function (value) {
                    if (value) {
                        this.Flags |= FarseerPhysics.Dynamics.WorldFlags.SubStepping;
                    } else {
                        this.Flags &= -17;
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.Gravity = new Microsoft.Xna.Framework.Vector2();
                this.ContactPool = new (System.Collections.Generic.Queue$1(FarseerPhysics.Dynamics.Contacts.Contact)).$ctor2(256);
                this.Island = new FarseerPhysics.Dynamics.Island();
                this._stack = System.Array.init(64, null, FarseerPhysics.Dynamics.Body);
                this._bodyAddList = new (System.Collections.Generic.HashSet$1(FarseerPhysics.Dynamics.Body)).ctor();
                this._bodyRemoveList = new (System.Collections.Generic.HashSet$1(FarseerPhysics.Dynamics.Body)).ctor();
                this._jointAddList = new (System.Collections.Generic.HashSet$1(FarseerPhysics.Dynamics.Joints.Joint)).ctor();
                this._jointRemoveList = new (System.Collections.Generic.HashSet$1(FarseerPhysics.Dynamics.Joints.Joint)).ctor();
                this._input = new FarseerPhysics.Collision.TOIInput();
                this.Enabled = true;
            },
            /**
             * Initializes a new instance of the {@link } class.
             *
             * @instance
             * @private
             * @this FarseerPhysics.Dynamics.World
             * @memberof FarseerPhysics.Dynamics.World
             * @return  {void}
             */
            ctor: function () {
                this.$initialize();
                this.Flags = FarseerPhysics.Dynamics.WorldFlags.ClearForces;

                this.ControllerList = new (System.Collections.Generic.List$1(FarseerPhysics.Controllers.Controller)).ctor();
                this.BreakableBodyList = new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.BreakableBody)).ctor();
                this.BodyList = new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Body)).$ctor2(32);
                this.JointList = new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Joints.Joint)).$ctor2(32);
            },
            $ctor2: function (gravity, span) {
                FarseerPhysics.Dynamics.World.ctor.call(this);
                this.Gravity = gravity.$clone();
                this.ContactManager = new FarseerPhysics.Dynamics.ContactManager(new QuadTreeBroadPhase(span.$clone()));
            },
            /**
             * Initializes a new instance of the {@link } class.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.World
             * @memberof FarseerPhysics.Dynamics.World
             * @param   {Microsoft.Xna.Framework.Vector2}    gravity    The gravity.
             * @return  {void}
             */
            $ctor1: function (gravity) {
                FarseerPhysics.Dynamics.World.ctor.call(this);
                this.ContactManager = new FarseerPhysics.Dynamics.ContactManager(new FarseerPhysics.Collision.DynamicTreeBroadPhase());
                this.Gravity = gravity.$clone();
            }
        },
        methods: {
            /**
             * Add a rigid body.
             *
             * @instance
             * @this FarseerPhysics.Dynamics.World
             * @memberof FarseerPhysics.Dynamics.World
             * @param   {FarseerPhysics.Dynamics.Body}    body
             * @return  {void}
             */
            AddBody: function (body) {
                System.Diagnostics.Debug.Assert$1(!this._bodyAddList.contains(body), "You are adding the same body more than once.");

                if (!this._bodyAddList.contains(body)) {
                    this._bodyAddList.add(body);
                }
            },
            /**
             * Destroy a rigid body.
             Warning: This automatically deletes all associated shapes and joints.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.World
             * @memberof FarseerPhysics.Dynamics.World
             * @param   {FarseerPhysics.Dynamics.Body}    body    The body.
             * @return  {void}
             */
            RemoveBody: function (body) {
                System.Diagnostics.Debug.Assert$1(!this._bodyRemoveList.contains(body), "The body is already marked for removal. You are removing the body more than once.");

                if (!this._bodyRemoveList.contains(body)) {
                    this._bodyRemoveList.add(body);
                }
            },
            /**
             * Create a joint to constrain bodies together. This may cause the connected bodies to cease colliding.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.World
             * @memberof FarseerPhysics.Dynamics.World
             * @param   {FarseerPhysics.Dynamics.Joints.Joint}    joint    The joint.
             * @return  {void}
             */
            AddJoint: function (joint) {
                System.Diagnostics.Debug.Assert$1(!this._jointAddList.contains(joint), "You are adding the same joint more than once.");

                if (!this._jointAddList.contains(joint)) {
                    this._jointAddList.add(joint);
                }
            },
            RemoveJoint$1: function (joint, doCheck) {
                if (doCheck) {
                    System.Diagnostics.Debug.Assert$1(!this._jointRemoveList.contains(joint), "The joint is already marked for removal. You are removing the joint more than once.");
                }

                if (!this._jointRemoveList.contains(joint)) {
                    this._jointRemoveList.add(joint);
                }
            },
            /**
             * Destroy a joint. This may cause the connected bodies to begin colliding.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.World
             * @memberof FarseerPhysics.Dynamics.World
             * @param   {FarseerPhysics.Dynamics.Joints.Joint}    joint    The joint.
             * @return  {void}
             */
            RemoveJoint: function (joint) {
                this.RemoveJoint$1(joint, true);
            },
            /**
             * All adds and removes are cached by the World duing a World step.
             To process the changes before the world updates again, call this method.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.World
             * @memberof FarseerPhysics.Dynamics.World
             * @return  {void}
             */
            ProcessChanges: function () {
                this.ProcessAddedBodies();
                this.ProcessAddedJoints();

                this.ProcessRemovedBodies();
                this.ProcessRemovedJoints();
            },
            ProcessRemovedJoints: function () {
                var $t;
                if (this._jointRemoveList.Count > 0) {
                    $t = Bridge.getEnumerator(this._jointRemoveList);
                    try {
                        while ($t.moveNext()) {
                            var joint = $t.Current;
                            var collideConnected = joint.CollideConnected;

                            this.JointList.remove(joint);

                            var bodyA = joint.BodyA;
                            var bodyB = joint.BodyB;

                            bodyA.Awake = true;

                            if (!joint.IsFixedType()) {
                                bodyB.Awake = true;
                            }

                            if (joint.EdgeA.Prev != null) {
                                joint.EdgeA.Prev.Next = joint.EdgeA.Next;
                            }

                            if (joint.EdgeA.Next != null) {
                                joint.EdgeA.Next.Prev = joint.EdgeA.Prev;
                            }

                            if (Bridge.referenceEquals(joint.EdgeA, bodyA.JointList)) {
                                bodyA.JointList = joint.EdgeA.Next;
                            }

                            joint.EdgeA.Prev = null;
                            joint.EdgeA.Next = null;

                            if (!joint.IsFixedType()) {
                                if (joint.EdgeB.Prev != null) {
                                    joint.EdgeB.Prev.Next = joint.EdgeB.Next;
                                }

                                if (joint.EdgeB.Next != null) {
                                    joint.EdgeB.Next.Prev = joint.EdgeB.Prev;
                                }

                                if (Bridge.referenceEquals(joint.EdgeB, bodyB.JointList)) {
                                    bodyB.JointList = joint.EdgeB.Next;
                                }

                                joint.EdgeB.Prev = null;
                                joint.EdgeB.Next = null;
                            }

                            if (!joint.IsFixedType()) {
                                if (collideConnected === false) {
                                    var edge = bodyB.ContactList;
                                    while (edge != null) {
                                        if (Bridge.referenceEquals(edge.Other, bodyA)) {
                                            edge.Contact.FlagForFiltering();
                                        }

                                        edge = edge.Next;
                                    }
                                }
                            }

                            if (!Bridge.staticEquals(this.JointRemoved, null)) {
                                this.JointRemoved(joint);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    this._jointRemoveList.clear();
                }
            },
            ProcessAddedJoints: function () {
                var $t;
                if (this._jointAddList.Count > 0) {
                    $t = Bridge.getEnumerator(this._jointAddList);
                    try {
                        while ($t.moveNext()) {
                            var joint = $t.Current;
                            this.JointList.add(joint);

                            joint.EdgeA.Joint = joint;
                            joint.EdgeA.Other = joint.BodyB;
                            joint.EdgeA.Prev = null;
                            joint.EdgeA.Next = joint.BodyA.JointList;

                            if (joint.BodyA.JointList != null) {
                                joint.BodyA.JointList.Prev = joint.EdgeA;
                            }

                            joint.BodyA.JointList = joint.EdgeA;

                            if (!joint.IsFixedType()) {
                                joint.EdgeB.Joint = joint;
                                joint.EdgeB.Other = joint.BodyA;
                                joint.EdgeB.Prev = null;
                                joint.EdgeB.Next = joint.BodyB.JointList;

                                if (joint.BodyB.JointList != null) {
                                    joint.BodyB.JointList.Prev = joint.EdgeB;
                                }

                                joint.BodyB.JointList = joint.EdgeB;

                                var bodyA = joint.BodyA;
                                var bodyB = joint.BodyB;

                                if (joint.CollideConnected === false) {
                                    var edge = bodyB.ContactList;
                                    while (edge != null) {
                                        if (Bridge.referenceEquals(edge.Other, bodyA)) {
                                            edge.Contact.FlagForFiltering();
                                        }

                                        edge = edge.Next;
                                    }
                                }
                            }

                            if (!Bridge.staticEquals(this.JointAdded, null)) {
                                this.JointAdded(joint);
                            }

                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    this._jointAddList.clear();
                }
            },
            ProcessAddedBodies: function () {
                var $t;
                if (this._bodyAddList.Count > 0) {
                    $t = Bridge.getEnumerator(this._bodyAddList);
                    try {
                        while ($t.moveNext()) {
                            var body = $t.Current;
                            this.BodyList.add(body);

                            if (!Bridge.staticEquals(this.BodyAdded, null)) {
                                this.BodyAdded(body);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    this._bodyAddList.clear();
                }
            },
            ProcessRemovedBodies: function () {
                var $t;
                if (this._bodyRemoveList.Count > 0) {
                    $t = Bridge.getEnumerator(this._bodyRemoveList);
                    try {
                        while ($t.moveNext()) {
                            var body = $t.Current;
                            System.Diagnostics.Debug.Assert(this.BodyList.Count > 0);

                            System.Diagnostics.Debug.Assert(this.BodyList.contains(body));

                            var je = body.JointList;
                            while (je != null) {
                                var je0 = je;
                                je = je.Next;

                                this.RemoveJoint$1(je0.Joint, false);
                            }
                            body.JointList = null;

                            var ce = body.ContactList;
                            while (ce != null) {
                                var ce0 = ce;
                                ce = ce.Next;
                                this.ContactManager.Destroy(ce0.Contact);
                            }
                            body.ContactList = null;

                            for (var i = 0; i < body.FixtureList.Count; i = (i + 1) | 0) {
                                body.FixtureList.getItem(i).DestroyProxies(this.ContactManager.BroadPhase);
                                body.FixtureList.getItem(i).Destroy();
                            }

                            body.FixtureList = null;

                            this.BodyList.remove(body);

                            if (!Bridge.staticEquals(this.BodyRemoved, null)) {
                                this.BodyRemoved(body);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    this._bodyRemoveList.clear();
                }
            },
            /**
             * Take a time step. This performs collision detection, integration,
             and consraint solution.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.World
             * @memberof FarseerPhysics.Dynamics.World
             * @param   {number}    dt    The amount of time to simulate, this should not vary.
             * @return  {void}
             */
            Step: function (dt) {

                this.ProcessChanges();

                if (dt === 0 || !this.Enabled) {
                    return;
                }

                if ((this.Flags & FarseerPhysics.Dynamics.WorldFlags.NewFixture) === FarseerPhysics.Dynamics.WorldFlags.NewFixture) {
                    this.ContactManager.FindNewContacts();
                    this.Flags &= -2;
                }

                var step = { v : new FarseerPhysics.Dynamics.TimeStep() };
                step.v.inv_dt = 1.0 / dt;
                step.v.dt = dt;
                step.v.dtRatio = this._invDt0 * dt;

                for (var i = 0; i < this.ControllerList.Count; i = (i + 1) | 0) {
                    this.ControllerList.getItem(i).Update(dt);
                }


                this.ContactManager.Collide();

                this.Solve(step);


                if (FarseerPhysics.Settings.ContinuousPhysics) {
                    this.SolveTOI(step);
                }

                this._invDt0 = step.v.inv_dt;

                if ((this.Flags & FarseerPhysics.Dynamics.WorldFlags.ClearForces) !== 0) {
                    this.ClearForces();
                }

                for (var i1 = 0; i1 < this.BreakableBodyList.Count; i1 = (i1 + 1) | 0) {
                    this.BreakableBodyList.getItem(i1).Update();
                }
            },
            /**
             * Call this after you are done with time steps to clear the forces. You normally
             call this after each call to Step, unless you are performing sub-steps. By default,
             forces will be automatically cleared, so you don't need to call this function.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.World
             * @memberof FarseerPhysics.Dynamics.World
             * @return  {void}
             */
            ClearForces: function () {
                for (var i = 0; i < this.BodyList.Count; i = (i + 1) | 0) {
                    var body = this.BodyList.getItem(i);
                    body.Force = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    body.Torque = 0.0;
                }
            },
            /**
             * Query the world for all fixtures that potentially overlap the
             provided AABB.
             Inside the callback:
             Return true: Continues the query
             Return false: Terminate the query
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.World
             * @memberof FarseerPhysics.Dynamics.World
             * @param   {System.Func}                      callback    A user implemented callback class.
             * @param   {FarseerPhysics.Collision.AABB}    aabb        The aabb query box.
             * @return  {void}
             */
            QueryAABB: function (callback, aabb) {
                this.ContactManager.BroadPhase.FarseerPhysics$Collision$IBroadPhase$Query(Bridge.fn.bind(this, function (proxyId) {
                    var proxy = this.ContactManager.BroadPhase.FarseerPhysics$Collision$IBroadPhase$GetProxy(proxyId);
                    return callback(proxy.Fixture);
                }), aabb);
            },
            /**
             * Ray-cast the world for all fixtures in the path of the ray. Your callback
             controls whether you get the closest point, any point, or n-points.
             The ray-cast ignores shapes that contain the starting point.
             Inside the callback:
             return -1: ignore this fixture and continue
             return 0: terminate the ray cast
             return fraction: clip the ray to this point
             return 1: don't clip the ray and continue
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.World
             * @memberof FarseerPhysics.Dynamics.World
             * @param   {FarseerPhysics.Dynamics.RayCastCallback}    callback    A user implemented callback class.
             * @param   {Microsoft.Xna.Framework.Vector2}            point1      The ray starting point.
             * @param   {Microsoft.Xna.Framework.Vector2}            point2      The ray ending point.
             * @return  {void}
             */
            RayCast: function (callback, point1, point2) {
                var input = { v : new FarseerPhysics.Collision.RayCastInput() };
                input.v.MaxFraction = 1.0;
                input.v.Point1 = point1.$clone();
                input.v.Point2 = point2.$clone();

                this.ContactManager.BroadPhase.FarseerPhysics$Collision$IBroadPhase$RayCast(Bridge.fn.bind(this, function (rayCastInput, proxyId) {
                    rayCastInput = {v:rayCastInput};
                    var proxy = this.ContactManager.BroadPhase.FarseerPhysics$Collision$IBroadPhase$GetProxy(proxyId);
                    var fixture = proxy.Fixture;
                    var index = proxy.ChildIndex;
                    var output = { v : new FarseerPhysics.Collision.RayCastOutput() };
                    var hit = fixture.RayCast(output, rayCastInput, index);

                    if (hit) {
                        var fraction = output.v.Fraction;
                        var point = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2((1.0 - fraction), input.v.Point1.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(fraction, input.v.Point2.$clone()));
                        return callback(fixture, point.$clone(), output.v.Normal.$clone(), fraction);
                    }

                    return input.v.MaxFraction;
                }), input);
            },
            Solve: function (step) {
                var $t, $t1, $t2, $t3;
                this.Island.Reset(this.BodyList.Count, this.ContactManager.ContactList.Count, this.JointList.Count, this.ContactManager);

                $t = Bridge.getEnumerator(this.BodyList);
                try {
                    while ($t.moveNext()) {
                        var b = $t.Current;
                        b.Flags &= -2;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                for (var i = 0; i < this.ContactManager.ContactList.Count; i = (i + 1) | 0) {
                    var c = this.ContactManager.ContactList.getItem(i);
                    c.Flags &= -2;
                }
                $t1 = Bridge.getEnumerator(this.JointList);
                try {
                    while ($t1.moveNext()) {
                        var j = $t1.Current;
                        j.IslandFlag = false;
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }
                var stackSize = this.BodyList.Count;
                if (stackSize > this._stack.length) {
                    this._stack = System.Array.init(Math.max(Bridge.Int.mul(this._stack.length, 2), stackSize), null, FarseerPhysics.Dynamics.Body);
                }

                for (var index = (this.BodyList.Count - 1) | 0; index >= 0; index = (index - 1) | 0) {
                    var seed = this.BodyList.getItem(index);
                    if ((seed.Flags & (FarseerPhysics.Dynamics.BodyFlags.Island)) !== FarseerPhysics.Dynamics.BodyFlags.None) {
                        continue;
                    }

                    if (seed.Awake === false || seed.Enabled === false) {
                        continue;
                    }

                    if (seed.BodyType === FarseerPhysics.Dynamics.BodyType.Static) {
                        continue;
                    }

                    this.Island.Clear();
                    var stackCount = 0;
                    this._stack[System.Array.index(Bridge.identity(stackCount, (stackCount = (stackCount + 1) | 0)), this._stack)] = seed;
                    seed.Flags |= FarseerPhysics.Dynamics.BodyFlags.Island;

                    while (stackCount > 0) {
                        var b1 = this._stack[System.Array.index(((stackCount = (stackCount - 1) | 0)), this._stack)];
                        System.Diagnostics.Debug.Assert(b1.Enabled);
                        this.Island.Add(b1);

                        b1.Awake = true;

                        if (b1.BodyType === FarseerPhysics.Dynamics.BodyType.Static) {
                            continue;
                        }

                        for (var ce = b1.ContactList; ce != null; ce = ce.Next) {
                            var contact = ce.Contact;

                            if ((contact.Flags & FarseerPhysics.Dynamics.Contacts.ContactFlags.Island) !== FarseerPhysics.Dynamics.Contacts.ContactFlags.None) {
                                continue;
                            }

                            if (!ce.Contact.Enabled || !ce.Contact.IsTouching()) {
                                continue;
                            }

                            var sensorA = contact.FixtureA.IsSensor;
                            var sensorB = contact.FixtureB.IsSensor;
                            if (sensorA || sensorB) {
                                continue;
                            }

                            this.Island.Add$1(contact);
                            contact.Flags |= FarseerPhysics.Dynamics.Contacts.ContactFlags.Island;

                            var other = ce.Other;

                            if ((other.Flags & FarseerPhysics.Dynamics.BodyFlags.Island) !== FarseerPhysics.Dynamics.BodyFlags.None) {
                                continue;
                            }

                            System.Diagnostics.Debug.Assert(stackCount < stackSize);
                            this._stack[System.Array.index(Bridge.identity(stackCount, (stackCount = (stackCount + 1) | 0)), this._stack)] = other;
                            other.Flags |= FarseerPhysics.Dynamics.BodyFlags.Island;
                        }

                        for (var je = b1.JointList; je != null; je = je.Next) {
                            if (je.Joint.IslandFlag) {
                                continue;
                            }

                            var other1 = je.Other;

                            if (other1 != null) {
                                if (other1.Enabled === false) {
                                    continue;
                                }

                                this.Island.Add$2(je.Joint);
                                je.Joint.IslandFlag = true;

                                if ((other1.Flags & FarseerPhysics.Dynamics.BodyFlags.Island) !== FarseerPhysics.Dynamics.BodyFlags.None) {
                                    continue;
                                }

                                System.Diagnostics.Debug.Assert(stackCount < stackSize);
                                this._stack[System.Array.index(Bridge.identity(stackCount, (stackCount = (stackCount + 1) | 0)), this._stack)] = other1;
                                other1.Flags |= FarseerPhysics.Dynamics.BodyFlags.Island;
                            } else {
                                this.Island.Add$2(je.Joint);
                                je.Joint.IslandFlag = true;
                            }
                        }
                    }

                    this.Island.Solve(step, Bridge.ref(this, "Gravity"));

                    for (var i1 = 0; i1 < this.Island.BodyCount; i1 = (i1 + 1) | 0) {
                        var b2 = ($t2 = this.Island.Bodies)[System.Array.index(i1, $t2)];
                        if (b2.BodyType === FarseerPhysics.Dynamics.BodyType.Static) {
                            b2.Flags &= -2;
                        }
                    }
                }

                $t3 = Bridge.getEnumerator(this.BodyList);
                try {
                    while ($t3.moveNext()) {
                        var b3 = $t3.Current;
                        if ((b3.Flags & FarseerPhysics.Dynamics.BodyFlags.Island) !== FarseerPhysics.Dynamics.BodyFlags.Island) {
                            continue;
                        }

                        if (b3.BodyType === FarseerPhysics.Dynamics.BodyType.Static) {
                            continue;
                        }

                        b3.SynchronizeFixtures();
                    }
                } finally {
                    if (Bridge.is($t3, System.IDisposable)) {
                        $t3.System$IDisposable$Dispose();
                    }
                }
                this.ContactManager.FindNewContacts();
            },
            /**
             * Find TOI contacts and solve them.
             *
             * @instance
             * @private
             * @this FarseerPhysics.Dynamics.World
             * @memberof FarseerPhysics.Dynamics.World
             * @param   {FarseerPhysics.Dynamics.TimeStep}    step    The step.
             * @return  {void}
             */
            SolveTOI: function (step) {
                var $t;
                this.Island.Reset(100, FarseerPhysics.Settings.MaxTOIContacts, 0, this.ContactManager);

                if (this._stepComplete) {
                    for (var i = 0; i < this.BodyList.Count; i = (i + 1) | 0) {
                        this.BodyList.getItem(i).Flags &= -2;
                        this.BodyList.getItem(i).Sweep.Alpha0 = 0.0;
                    }

                    for (var i1 = 0; i1 < this.ContactManager.ContactList.Count; i1 = (i1 + 1) | 0) {
                        var c = this.ContactManager.ContactList.getItem(i1);

                        c.Flags &= -34;
                        c.TOICount = 0;
                        c.TOI = 1.0;
                    }
                }

                for (; ; ) {
                    var minContact = null;
                    var minAlpha = 1.0;

                    for (var i2 = 0; i2 < this.ContactManager.ContactList.Count; i2 = (i2 + 1) | 0) {
                        var c1 = this.ContactManager.ContactList.getItem(i2);

                        if (c1.Enabled === false) {
                            continue;
                        }

                        if (c1.TOICount > FarseerPhysics.Settings.MaxSubSteps) {
                            continue;
                        }

                        var alpha;
                        if ((c1.Flags & FarseerPhysics.Dynamics.Contacts.ContactFlags.TOI) === FarseerPhysics.Dynamics.Contacts.ContactFlags.TOI) {
                            alpha = c1.TOI;
                        } else {
                            var fA = c1.FixtureA;
                            var fB = c1.FixtureB;

                            if (fA.IsSensor || fB.IsSensor) {
                                continue;
                            }

                            var bA = fA.Body;
                            var bB = fB.Body;

                            var typeA = bA.BodyType;
                            var typeB = bB.BodyType;
                            System.Diagnostics.Debug.Assert(typeA === FarseerPhysics.Dynamics.BodyType.Dynamic || typeB === FarseerPhysics.Dynamics.BodyType.Dynamic);

                            var awakeA = bA.Awake && typeA !== FarseerPhysics.Dynamics.BodyType.Static;
                            var awakeB = bB.Awake && typeB !== FarseerPhysics.Dynamics.BodyType.Static;

                            if (awakeA === false && awakeB === false) {
                                continue;
                            }

                            var collideA = (bA.IsBullet || typeA !== FarseerPhysics.Dynamics.BodyType.Dynamic) && !bA.IgnoreCCD;
                            var collideB = (bB.IsBullet || typeB !== FarseerPhysics.Dynamics.BodyType.Dynamic) && !bB.IgnoreCCD;

                            if (collideA === false && collideB === false) {
                                continue;
                            }

                            var alpha0 = bA.Sweep.Alpha0;

                            if (bA.Sweep.Alpha0 < bB.Sweep.Alpha0) {
                                alpha0 = bB.Sweep.Alpha0;
                                bA.Sweep.Advance(alpha0);
                            } else if (bB.Sweep.Alpha0 < bA.Sweep.Alpha0) {
                                alpha0 = bA.Sweep.Alpha0;
                                bB.Sweep.Advance(alpha0);
                            }

                            System.Diagnostics.Debug.Assert(alpha0 < 1.0);

                            this._input.ProxyA.Set(fA.Shape, c1.ChildIndexA);
                            this._input.ProxyB.Set(fB.Shape, c1.ChildIndexB);
                            this._input.SweepA = bA.Sweep.$clone();
                            this._input.SweepB = bB.Sweep.$clone();
                            this._input.TMax = 1.0;

                            var output = { v : new FarseerPhysics.Collision.TOIOutput() };
                            FarseerPhysics.Collision.TimeOfImpact.CalculateTimeOfImpact(output, this._input);

                            var beta = output.v.T;
                            if (output.v.State === FarseerPhysics.Collision.TOIOutputState.Touching) {
                                alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);
                            } else {
                                alpha = 1.0;
                            }

                            c1.TOI = alpha;
                            c1.Flags |= FarseerPhysics.Dynamics.Contacts.ContactFlags.TOI;
                        }

                        if (alpha < minAlpha) {
                            minContact = c1;
                            minAlpha = alpha;
                        }
                    }

                    if (minContact == null || 0.9999988 < minAlpha) {
                        this._stepComplete = true;
                        break;
                    }

                    var fA1 = minContact.FixtureA;
                    var fB1 = minContact.FixtureB;
                    var bA1 = fA1.Body;
                    var bB1 = fB1.Body;

                    var backup1 = bA1.Sweep.$clone();
                    var backup2 = bB1.Sweep.$clone();

                    bA1.Advance(minAlpha);
                    bB1.Advance(minAlpha);

                    minContact.Update(this.ContactManager);
                    minContact.Flags &= -33;
                    minContact.TOICount = (minContact.TOICount + 1) | 0;

                    if (minContact.Enabled === false || minContact.IsTouching() === false) {
                        minContact.Enabled = false;
                        bA1.Sweep = backup1.$clone();
                        bB1.Sweep = backup2.$clone();
                        bA1.SynchronizeTransform();
                        bB1.SynchronizeTransform();
                        continue;
                    }

                    bA1.Awake = true;
                    bB1.Awake = true;

                    this.Island.Clear();
                    this.Island.Add(bA1);
                    this.Island.Add(bB1);
                    this.Island.Add$1(minContact);

                    bA1.Flags |= FarseerPhysics.Dynamics.BodyFlags.Island;
                    bB1.Flags |= FarseerPhysics.Dynamics.BodyFlags.Island;
                    minContact.Flags |= FarseerPhysics.Dynamics.Contacts.ContactFlags.Island;

                    var bodies = System.Array.init([bA1, bB1], FarseerPhysics.Dynamics.Body);
                    for (var i3 = 0; i3 < 2; i3 = (i3 + 1) | 0) {
                        var body = bodies[System.Array.index(i3, bodies)];
                        if (body.BodyType === FarseerPhysics.Dynamics.BodyType.Dynamic) {
                            for (var ce = body.ContactList; ce != null; ce = ce.Next) {
                                var contact = ce.Contact;

                                if ((contact.Flags & FarseerPhysics.Dynamics.Contacts.ContactFlags.Island) === FarseerPhysics.Dynamics.Contacts.ContactFlags.Island) {
                                    continue;
                                }

                                var other = ce.Other;
                                if (other.BodyType === FarseerPhysics.Dynamics.BodyType.Dynamic && body.IsBullet === false && other.IsBullet === false) {
                                    continue;
                                }

                                if (contact.FixtureA.IsSensor || contact.FixtureB.IsSensor) {
                                    continue;
                                }

                                var backup = other.Sweep.$clone();
                                if ((other.Flags & FarseerPhysics.Dynamics.BodyFlags.Island) === 0) {
                                    other.Advance(minAlpha);
                                }

                                contact.Update(this.ContactManager);

                                if (contact.Enabled === false) {
                                    other.Sweep = backup.$clone();
                                    other.SynchronizeTransform();
                                    continue;
                                }

                                if (contact.IsTouching() === false) {
                                    other.Sweep = backup.$clone();
                                    other.SynchronizeTransform();
                                    continue;
                                }

                                contact.Flags |= FarseerPhysics.Dynamics.Contacts.ContactFlags.Island;
                                this.Island.Add$1(contact);

                                if ((other.Flags & FarseerPhysics.Dynamics.BodyFlags.Island) === FarseerPhysics.Dynamics.BodyFlags.Island) {
                                    continue;
                                }

                                other.Flags |= FarseerPhysics.Dynamics.BodyFlags.Island;

                                if (other.BodyType !== FarseerPhysics.Dynamics.BodyType.Static) {
                                    other.Awake = true;
                                }

                                this.Island.Add(other);
                            }
                        }
                    }

                    var subStep = { v : new FarseerPhysics.Dynamics.TimeStep() };
                    subStep.v.dt = (1.0 - minAlpha) * step.v.dt;
                    subStep.v.inv_dt = 1.0 / subStep.v.dt;
                    subStep.v.dtRatio = 1.0;
                    this.Island.SolveTOI(subStep);

                    for (var i4 = 0; i4 < this.Island.BodyCount; i4 = (i4 + 1) | 0) {
                        var body1 = ($t = this.Island.Bodies)[System.Array.index(i4, $t)];
                        body1.Flags &= -2;

                        if (body1.BodyType !== FarseerPhysics.Dynamics.BodyType.Dynamic) {
                            continue;
                        }

                        body1.SynchronizeFixtures();

                        for (var ce1 = body1.ContactList; ce1 != null; ce1 = ce1.Next) {
                            ce1.Contact.Flags &= -34;
                        }
                    }

                    this.ContactManager.FindNewContacts();

                    if (this.EnableSubStepping) {
                        this._stepComplete = false;
                        break;
                    }
                }
            },
            AddController: function (controller) {
                System.Diagnostics.Debug.Assert$1(!this.ControllerList.contains(controller), "You are adding the same controller more than once.");

                controller.World = this;
                this.ControllerList.add(controller);

                if (!Bridge.staticEquals(this.ControllerAdded, null)) {
                    this.ControllerAdded(controller);
                }
            },
            RemoveController: function (controller) {
                System.Diagnostics.Debug.Assert$1(this.ControllerList.contains(controller), "You are removing a controller that is not in the simulation.");

                if (this.ControllerList.contains(controller)) {
                    this.ControllerList.remove(controller);

                    if (!Bridge.staticEquals(this.ControllerRemoved, null)) {
                        this.ControllerRemoved(controller);
                    }
                }
            },
            AddBreakableBody: function (breakableBody) {
                this.BreakableBodyList.add(breakableBody);
            },
            RemoveBreakableBody: function (breakableBody) {
                System.Diagnostics.Debug.Assert(this.BreakableBodyList.contains(breakableBody));

                this.BreakableBodyList.remove(breakableBody);
            },
            TestPoint: function (point) {
                point = {v:point};
                var aabb = { v : new FarseerPhysics.Collision.AABB() };
                var d = new Microsoft.Xna.Framework.Vector2.$ctor2(FarseerPhysics.Settings.Epsilon, FarseerPhysics.Settings.Epsilon);
                aabb.v.LowerBound = Microsoft.Xna.Framework.Vector2.op_Subtraction(point.v.$clone(), d.$clone());
                aabb.v.UpperBound = Microsoft.Xna.Framework.Vector2.op_Addition(point.v.$clone(), d.$clone());

                var myFixture = null;

                this.QueryAABB(function (fixture) {
                    var inside = fixture.TestPoint(point);
                    if (inside) {
                        myFixture = fixture;
                        return false;
                    }

                    return true;
                }, aabb);

                return myFixture;
            },
            /**
             * Returns a list of fixtures that are at the specified point.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.World
             * @memberof FarseerPhysics.Dynamics.World
             * @param   {Microsoft.Xna.Framework.Vector2}      point    The point.
             * @return  {System.Collections.Generic.List$1}
             */
            TestPointAll: function (point) {
                point = {v:point};
                var aabb = { v : new FarseerPhysics.Collision.AABB() };
                var d = new Microsoft.Xna.Framework.Vector2.$ctor2(FarseerPhysics.Settings.Epsilon, FarseerPhysics.Settings.Epsilon);
                aabb.v.LowerBound = Microsoft.Xna.Framework.Vector2.op_Subtraction(point.v.$clone(), d.$clone());
                aabb.v.UpperBound = Microsoft.Xna.Framework.Vector2.op_Addition(point.v.$clone(), d.$clone());

                var fixtures = new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Fixture)).ctor();

                this.QueryAABB(function (fixture) {
                    var inside = fixture.TestPoint(point);
                    if (inside) {
                        fixtures.add(fixture);
                    }

                    return true;
                }, aabb);

                return fixtures;
            },
            Clear: function () {
                this.ProcessChanges();

                for (var i = (this.BodyList.Count - 1) | 0; i >= 0; i = (i - 1) | 0) {
                    this.RemoveBody(this.BodyList.getItem(i));
                }

                for (var i1 = (this.ControllerList.Count - 1) | 0; i1 >= 0; i1 = (i1 - 1) | 0) {
                    this.RemoveController(this.ControllerList.getItem(i1));
                }

                for (var i2 = (this.BreakableBodyList.Count - 1) | 0; i2 >= 0; i2 = (i2 - 1) | 0) {
                    this.RemoveBreakableBody(this.BreakableBodyList.getItem(i2));
                }

                this.ProcessChanges();
            }
        }
    });

    Bridge.define("FarseerPhysics.Dynamics.WorldFlags", {
        $kind: "enum",
        statics: {
            fields: {
                /**
                 * Flag that indicates a new fixture has been added to the world.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Dynamics.WorldFlags
                 * @constant
                 * @default 1
                 * @type FarseerPhysics.Dynamics.WorldFlags
                 */
                NewFixture: 1,
                /**
                 * Flag that clear the forces after each time step.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Dynamics.WorldFlags
                 * @constant
                 * @default 4
                 * @type FarseerPhysics.Dynamics.WorldFlags
                 */
                ClearForces: 4,
                SubStepping: 16
            }
        },
        $flags: true
    });

    Bridge.define("FarseerPhysics.Factories.BodyFactory", {
        statics: {
            methods: {
                CreateBody: function (world) {
                    return FarseerPhysics.Factories.BodyFactory.CreateBody$3(world, null);
                },
                CreateBody$3: function (world, userData) {
                    var body = new FarseerPhysics.Dynamics.Body.$ctor2(world, userData);
                    return body;
                },
                CreateBody$1: function (world, position) {
                    return FarseerPhysics.Factories.BodyFactory.CreateBody$2(world, position.$clone(), null);
                },
                CreateBody$2: function (world, position, userData) {
                    var body = FarseerPhysics.Factories.BodyFactory.CreateBody$3(world, userData);
                    body.Position = position.$clone();
                    return body;
                },
                CreateEdge: function (world, start, end) {
                    return FarseerPhysics.Factories.BodyFactory.CreateEdge$1(world, start.$clone(), end.$clone(), null);
                },
                CreateEdge$1: function (world, start, end, userData) {
                    var body = FarseerPhysics.Factories.BodyFactory.CreateBody(world);
                    FarseerPhysics.Factories.FixtureFactory.AttachEdge$1(start.$clone(), end.$clone(), body, userData);
                    return body;
                },
                CreateLoopShape: function (world, vertices) {
                    return FarseerPhysics.Factories.BodyFactory.CreateLoopShape$3(world, vertices, null);
                },
                CreateLoopShape$3: function (world, vertices, userData) {
                    return FarseerPhysics.Factories.BodyFactory.CreateLoopShape$2(world, vertices, Microsoft.Xna.Framework.Vector2.Zero.$clone(), userData);
                },
                CreateLoopShape$1: function (world, vertices, position) {
                    return FarseerPhysics.Factories.BodyFactory.CreateLoopShape$2(world, vertices, position.$clone(), null);
                },
                CreateLoopShape$2: function (world, vertices, position, userData) {
                    var body = FarseerPhysics.Factories.BodyFactory.CreateBody$1(world, position.$clone());
                    FarseerPhysics.Factories.FixtureFactory.AttachLoopShape$1(vertices, body, userData);
                    return body;
                },
                CreateRectangle: function (world, width, height, density) {
                    return FarseerPhysics.Factories.BodyFactory.CreateRectangle$3(world, width, height, density, null);
                },
                CreateRectangle$3: function (world, width, height, density, userData) {
                    return FarseerPhysics.Factories.BodyFactory.CreateRectangle$2(world, width, height, density, Microsoft.Xna.Framework.Vector2.Zero.$clone(), userData);
                },
                CreateRectangle$1: function (world, width, height, density, position) {
                    return FarseerPhysics.Factories.BodyFactory.CreateRectangle$2(world, width, height, density, position.$clone(), null);
                },
                CreateRectangle$2: function (world, width, height, density, position, userData) {
                    if (width <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("width", "Width must be more than 0 meters");
                    }

                    if (height <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("height", "Height must be more than 0 meters");
                    }

                    var newBody = FarseerPhysics.Factories.BodyFactory.CreateBody$1(world, position.$clone());
                    var rectangleVertices = FarseerPhysics.Common.PolygonTools.CreateRectangle(width / 2, height / 2);
                    var rectangleShape = new FarseerPhysics.Collision.Shapes.PolygonShape.$ctor1(rectangleVertices, density);
                    newBody.CreateFixture$1(rectangleShape, userData);

                    return newBody;
                },
                CreateCircle: function (world, radius, density) {
                    return FarseerPhysics.Factories.BodyFactory.CreateCircle$3(world, radius, density, null);
                },
                CreateCircle$3: function (world, radius, density, userData) {
                    return FarseerPhysics.Factories.BodyFactory.CreateCircle$2(world, radius, density, Microsoft.Xna.Framework.Vector2.Zero.$clone(), userData);
                },
                CreateCircle$1: function (world, radius, density, position) {
                    return FarseerPhysics.Factories.BodyFactory.CreateCircle$2(world, radius, density, position.$clone(), null);
                },
                CreateCircle$2: function (world, radius, density, position, userData) {
                    var body = FarseerPhysics.Factories.BodyFactory.CreateBody$1(world, position.$clone());
                    FarseerPhysics.Factories.FixtureFactory.AttachCircle$3(radius, density, body, userData);
                    return body;
                },
                CreateEllipse: function (world, xRadius, yRadius, edges, density) {
                    return FarseerPhysics.Factories.BodyFactory.CreateEllipse$3(world, xRadius, yRadius, edges, density, null);
                },
                CreateEllipse$3: function (world, xRadius, yRadius, edges, density, userData) {
                    return FarseerPhysics.Factories.BodyFactory.CreateEllipse$2(world, xRadius, yRadius, edges, density, Microsoft.Xna.Framework.Vector2.Zero.$clone(), userData);
                },
                CreateEllipse$1: function (world, xRadius, yRadius, edges, density, position) {
                    return FarseerPhysics.Factories.BodyFactory.CreateEllipse$2(world, xRadius, yRadius, edges, density, position.$clone(), null);
                },
                CreateEllipse$2: function (world, xRadius, yRadius, edges, density, position, userData) {
                    var body = FarseerPhysics.Factories.BodyFactory.CreateBody$1(world, position.$clone());
                    FarseerPhysics.Factories.FixtureFactory.AttachEllipse$1(xRadius, yRadius, edges, density, body, userData);
                    return body;
                },
                CreatePolygon: function (world, vertices, density) {
                    return FarseerPhysics.Factories.BodyFactory.CreatePolygon$3(world, vertices, density, null);
                },
                CreatePolygon$3: function (world, vertices, density, userData) {
                    return FarseerPhysics.Factories.BodyFactory.CreatePolygon$2(world, vertices, density, Microsoft.Xna.Framework.Vector2.Zero.$clone(), userData);
                },
                CreatePolygon$1: function (world, vertices, density, position) {
                    return FarseerPhysics.Factories.BodyFactory.CreatePolygon$2(world, vertices, density, position.$clone(), null);
                },
                CreatePolygon$2: function (world, vertices, density, position, userData) {
                    var body = FarseerPhysics.Factories.BodyFactory.CreateBody$1(world, position.$clone());
                    FarseerPhysics.Factories.FixtureFactory.AttachPolygon$1(vertices, density, body, userData);
                    return body;
                },
                CreateCompoundPolygon: function (world, list, density) {
                    return FarseerPhysics.Factories.BodyFactory.CreateCompoundPolygon$3(world, list, density, Bridge.box(FarseerPhysics.Dynamics.BodyType.Static, FarseerPhysics.Dynamics.BodyType, System.Enum.toStringFn(FarseerPhysics.Dynamics.BodyType)));
                },
                CreateCompoundPolygon$3: function (world, list, density, userData) {
                    return FarseerPhysics.Factories.BodyFactory.CreateCompoundPolygon$2(world, list, density, Microsoft.Xna.Framework.Vector2.Zero.$clone(), userData);
                },
                CreateCompoundPolygon$1: function (world, list, density, position) {
                    return FarseerPhysics.Factories.BodyFactory.CreateCompoundPolygon$2(world, list, density, position.$clone(), null);
                },
                CreateCompoundPolygon$2: function (world, list, density, position, userData) {
                    var polygonBody = FarseerPhysics.Factories.BodyFactory.CreateBody$1(world, position.$clone());
                    FarseerPhysics.Factories.FixtureFactory.AttachCompoundPolygon$1(list, density, polygonBody, userData);
                    return polygonBody;
                },
                CreateGear: function (world, radius, numberOfTeeth, tipPercentage, toothHeight, density) {
                    return FarseerPhysics.Factories.BodyFactory.CreateGear$1(world, radius, numberOfTeeth, tipPercentage, toothHeight, density, null);
                },
                CreateGear$1: function (world, radius, numberOfTeeth, tipPercentage, toothHeight, density, userData) {
                    var gearPolygon = FarseerPhysics.Common.PolygonTools.CreateGear(radius, numberOfTeeth, tipPercentage, toothHeight);

                    if (!gearPolygon.IsConvex()) {
                        var list = FarseerPhysics.Common.Decomposition.EarclipDecomposer.ConvexPartition(gearPolygon);

                        return FarseerPhysics.Factories.BodyFactory.CreateCompoundPolygon$3(world, list, density, userData);
                    }

                    return FarseerPhysics.Factories.BodyFactory.CreatePolygon$3(world, gearPolygon, density, userData);
                },
                /**
                 * Creates a capsule.
                 Note: Automatically decomposes the capsule if it contains too many vertices (controlled by Settings.MaxPolygonVertices)
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.BodyFactory
                 * @memberof FarseerPhysics.Factories.BodyFactory
                 * @param   {FarseerPhysics.Dynamics.World}      world           The world.
                 * @param   {number}                             height          The height.
                 * @param   {number}                             topRadius       The top radius.
                 * @param   {number}                             topEdges        The top edges.
                 * @param   {number}                             bottomRadius    The bottom radius.
                 * @param   {number}                             bottomEdges     The bottom edges.
                 * @param   {number}                             density         The density.
                 * @param   {Microsoft.Xna.Framework.Vector2}    position        The position.
                 * @param   {System.Object}                      userData
                 * @return  {FarseerPhysics.Dynamics.Body}
                 */
                CreateCapsule$1: function (world, height, topRadius, topEdges, bottomRadius, bottomEdges, density, position, userData) {
                    var verts = FarseerPhysics.Common.PolygonTools.CreateCapsule$1(height, topRadius, topEdges, bottomRadius, bottomEdges);

                    var body;

                    if (verts.Count >= FarseerPhysics.Settings.MaxPolygonVertices) {
                        var vertList = FarseerPhysics.Common.Decomposition.EarclipDecomposer.ConvexPartition(verts);
                        body = FarseerPhysics.Factories.BodyFactory.CreateCompoundPolygon$3(world, vertList, density, userData);
                        body.Position = position.$clone();

                        return body;
                    }

                    body = FarseerPhysics.Factories.BodyFactory.CreatePolygon$3(world, verts, density, userData);
                    body.Position = position.$clone();

                    return body;
                },
                CreateCapsule: function (world, height, topRadius, topEdges, bottomRadius, bottomEdges, density, position) {
                    return FarseerPhysics.Factories.BodyFactory.CreateCapsule$1(world, height, topRadius, topEdges, bottomRadius, bottomEdges, density, position.$clone(), null);
                },
                CreateCapsule$2: function (world, height, endRadius, density) {
                    return FarseerPhysics.Factories.BodyFactory.CreateCapsule$3(world, height, endRadius, density, null);
                },
                CreateCapsule$3: function (world, height, endRadius, density, userData) {
                    var rectangle = FarseerPhysics.Common.PolygonTools.CreateRectangle(endRadius, height / 2);

                    var list = new (System.Collections.Generic.List$1(FarseerPhysics.Common.Vertices)).ctor();
                    list.add(rectangle);

                    var body = FarseerPhysics.Factories.BodyFactory.CreateCompoundPolygon$3(world, list, density, userData);

                    var topCircle = new FarseerPhysics.Collision.Shapes.CircleShape.$ctor1(endRadius, density);
                    topCircle.Position = new Microsoft.Xna.Framework.Vector2.$ctor2(0, height / 2);
                    body.CreateFixture$1(topCircle, userData);

                    var bottomCircle = new FarseerPhysics.Collision.Shapes.CircleShape.$ctor1(endRadius, density);
                    bottomCircle.Position = new Microsoft.Xna.Framework.Vector2.$ctor2(0, -(height / 2));
                    body.CreateFixture$1(bottomCircle, userData);
                    return body;
                },
                /**
                 * Creates a rounded rectangle.
                 Note: Automatically decomposes the capsule if it contains too many vertices (controlled by Settings.MaxPolygonVertices)
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.BodyFactory
                 * @memberof FarseerPhysics.Factories.BodyFactory
                 * @param   {FarseerPhysics.Dynamics.World}      world       The world.
                 * @param   {number}                             width       The width.
                 * @param   {number}                             height      The height.
                 * @param   {number}                             xRadius     The x radius.
                 * @param   {number}                             yRadius     The y radius.
                 * @param   {number}                             segments    The segments.
                 * @param   {number}                             density     The density.
                 * @param   {Microsoft.Xna.Framework.Vector2}    position    The position.
                 * @param   {System.Object}                      userData
                 * @return  {FarseerPhysics.Dynamics.Body}
                 */
                CreateRoundedRectangle$2: function (world, width, height, xRadius, yRadius, segments, density, position, userData) {
                    var verts = FarseerPhysics.Common.PolygonTools.CreateRoundedRectangle(width, height, xRadius, yRadius, segments);

                    if (verts.Count >= FarseerPhysics.Settings.MaxPolygonVertices) {
                        var vertList = FarseerPhysics.Common.Decomposition.EarclipDecomposer.ConvexPartition(verts);
                        var body = FarseerPhysics.Factories.BodyFactory.CreateCompoundPolygon$3(world, vertList, density, userData);
                        body.Position = position.$clone();
                        return body;
                    }

                    return FarseerPhysics.Factories.BodyFactory.CreatePolygon(world, verts, density);
                },
                CreateRoundedRectangle$1: function (world, width, height, xRadius, yRadius, segments, density, position) {
                    return FarseerPhysics.Factories.BodyFactory.CreateRoundedRectangle$2(world, width, height, xRadius, yRadius, segments, density, position.$clone(), null);
                },
                CreateRoundedRectangle: function (world, width, height, xRadius, yRadius, segments, density) {
                    return FarseerPhysics.Factories.BodyFactory.CreateRoundedRectangle$3(world, width, height, xRadius, yRadius, segments, density, null);
                },
                CreateRoundedRectangle$3: function (world, width, height, xRadius, yRadius, segments, density, userData) {
                    return FarseerPhysics.Factories.BodyFactory.CreateRoundedRectangle$2(world, width, height, xRadius, yRadius, segments, density, Microsoft.Xna.Framework.Vector2.Zero.$clone(), userData);
                },
                CreateBreakableBody: function (world, vertices, density) {
                    return FarseerPhysics.Factories.BodyFactory.CreateBreakableBody$3(world, vertices, density, null);
                },
                CreateBreakableBody$3: function (world, vertices, density, userData) {
                    return FarseerPhysics.Factories.BodyFactory.CreateBreakableBody$2(world, vertices, density, Microsoft.Xna.Framework.Vector2.Zero.$clone(), userData);
                },
                /**
                 * Creates a breakable body. You would want to remove collinear points before using this.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.BodyFactory
                 * @memberof FarseerPhysics.Factories.BodyFactory
                 * @param   {FarseerPhysics.Dynamics.World}            world       The world.
                 * @param   {FarseerPhysics.Common.Vertices}           vertices    The vertices.
                 * @param   {number}                                   density     The density.
                 * @param   {Microsoft.Xna.Framework.Vector2}          position    The position.
                 * @param   {System.Object}                            userData
                 * @return  {FarseerPhysics.Dynamics.BreakableBody}
                 */
                CreateBreakableBody$2: function (world, vertices, density, position, userData) {
                    var triangles = FarseerPhysics.Common.Decomposition.EarclipDecomposer.ConvexPartition(vertices);

                    var breakableBody = new FarseerPhysics.Dynamics.BreakableBody.$ctor1(triangles, world, density, userData);
                    breakableBody.MainBody.Position = position.$clone();
                    world.AddBreakableBody(breakableBody);

                    return breakableBody;
                },
                CreateBreakableBody$1: function (world, vertices, density, position) {
                    return FarseerPhysics.Factories.BodyFactory.CreateBreakableBody$2(world, vertices, density, position.$clone(), null);
                },
                CreateLineArc: function (world, radians, sides, radius, position, angle, closed) {
                    var body = FarseerPhysics.Factories.BodyFactory.CreateBody(world);
                    FarseerPhysics.Factories.FixtureFactory.AttachLineArc(radians, sides, radius, position.$clone(), angle, closed, body);
                    return body;
                },
                CreateSolidArc: function (world, density, radians, sides, radius, position, angle) {
                    var body = FarseerPhysics.Factories.BodyFactory.CreateBody(world);
                    FarseerPhysics.Factories.FixtureFactory.AttachSolidArc(density, radians, sides, radius, position.$clone(), angle, body);
                    return body;
                }
            }
        }
    });

    /** @namespace FarseerPhysics.Factories */

    /**
     * An easy to use factory for creating bodies
     *
     * @static
     * @abstract
     * @public
     * @class FarseerPhysics.Factories.FixtureFactory
     */
    Bridge.define("FarseerPhysics.Factories.FixtureFactory", {
        statics: {
            methods: {
                AttachEdge: function (start, end, body) {
                    return FarseerPhysics.Factories.FixtureFactory.AttachEdge$1(start.$clone(), end.$clone(), body, null);
                },
                AttachEdge$1: function (start, end, body, userData) {
                    var edgeShape = new FarseerPhysics.Collision.Shapes.EdgeShape.$ctor1(start.$clone(), end.$clone());
                    return body.CreateFixture$1(edgeShape, userData);
                },
                AttachLoopShape: function (vertices, body) {
                    return FarseerPhysics.Factories.FixtureFactory.AttachLoopShape$1(vertices, body, null);
                },
                AttachLoopShape$1: function (vertices, body, userData) {
                    var shape = new FarseerPhysics.Collision.Shapes.LoopShape.$ctor1(vertices);
                    return body.CreateFixture$1(shape, userData);
                },
                AttachRectangle$1: function (width, height, density, offset, body, userData) {
                    offset = {v:offset};
                    var rectangleVertices = FarseerPhysics.Common.PolygonTools.CreateRectangle(width / 2, height / 2);
                    rectangleVertices.Translate$1(offset);
                    var rectangleShape = new FarseerPhysics.Collision.Shapes.PolygonShape.$ctor1(rectangleVertices, density);
                    return body.CreateFixture$1(rectangleShape, userData);
                },
                AttachRectangle: function (width, height, density, offset, body) {
                    return FarseerPhysics.Factories.FixtureFactory.AttachRectangle$1(width, height, density, offset.$clone(), body, null);
                },
                AttachCircle: function (radius, density, body) {
                    return FarseerPhysics.Factories.FixtureFactory.AttachCircle$3(radius, density, body, null);
                },
                AttachCircle$3: function (radius, density, body, userData) {
                    if (radius <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("radius", "Radius must be more than 0 meters");
                    }

                    var circleShape = new FarseerPhysics.Collision.Shapes.CircleShape.$ctor1(radius, density);
                    return body.CreateFixture$1(circleShape, userData);
                },
                AttachCircle$1: function (radius, density, body, offset) {
                    return FarseerPhysics.Factories.FixtureFactory.AttachCircle$2(radius, density, body, offset.$clone(), null);
                },
                AttachCircle$2: function (radius, density, body, offset, userData) {
                    if (radius <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("radius", "Radius must be more than 0 meters");
                    }

                    var circleShape = new FarseerPhysics.Collision.Shapes.CircleShape.$ctor1(radius, density);
                    circleShape.Position = offset.$clone();
                    return body.CreateFixture$1(circleShape, userData);
                },
                AttachPolygon: function (vertices, density, body) {
                    return FarseerPhysics.Factories.FixtureFactory.AttachPolygon$1(vertices, density, body, null);
                },
                AttachPolygon$1: function (vertices, density, body, userData) {
                    if (vertices.Count <= 1) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("vertices", "Too few points to be a polygon");
                    }

                    var polygon = new FarseerPhysics.Collision.Shapes.PolygonShape.$ctor1(vertices, density);
                    return body.CreateFixture$1(polygon, userData);
                },
                AttachEllipse: function (xRadius, yRadius, edges, density, body) {
                    return FarseerPhysics.Factories.FixtureFactory.AttachEllipse$1(xRadius, yRadius, edges, density, body, null);
                },
                AttachEllipse$1: function (xRadius, yRadius, edges, density, body, userData) {
                    if (xRadius <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("xRadius", "X-radius must be more than 0");
                    }

                    if (yRadius <= 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("yRadius", "Y-radius must be more than 0");
                    }

                    var ellipseVertices = FarseerPhysics.Common.PolygonTools.CreateEllipse(xRadius, yRadius, edges);
                    var polygonShape = new FarseerPhysics.Collision.Shapes.PolygonShape.$ctor1(ellipseVertices, density);
                    return body.CreateFixture$1(polygonShape, userData);
                },
                AttachCompoundPolygon: function (list, density, body) {
                    return FarseerPhysics.Factories.FixtureFactory.AttachCompoundPolygon$1(list, density, body, null);
                },
                AttachCompoundPolygon$1: function (list, density, body, userData) {
                    var $t;
                    var res = new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Fixture)).$ctor2(list.Count);

                    $t = Bridge.getEnumerator(list);
                    try {
                        while ($t.moveNext()) {
                            var vertices = $t.Current;
                            if (vertices.Count === 2) {
                                var shape = new FarseerPhysics.Collision.Shapes.EdgeShape.$ctor1(vertices.getItem(0).$clone(), vertices.getItem(1).$clone());
                                res.add(body.CreateFixture$1(shape, userData));
                            } else {
                                var shape1 = new FarseerPhysics.Collision.Shapes.PolygonShape.$ctor1(vertices, density);
                                res.add(body.CreateFixture$1(shape1, userData));
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return res;
                },
                AttachLineArc: function (radians, sides, radius, position, angle, closed, body) {
                    position = {v:position};
                    var arc = FarseerPhysics.Common.PolygonTools.CreateArc(radians, sides, radius);
                    arc.Rotate((Microsoft.Xna.Framework.MathHelper.Pi - radians) / 2 + angle);
                    arc.Translate$1(position);

                    var fixtures = new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Fixture)).$ctor2(arc.Count);

                    if (closed) {
                        fixtures.add(FarseerPhysics.Factories.FixtureFactory.AttachLoopShape(arc, body));
                    }

                    for (var i = 1; i < arc.Count; i = (i + 1) | 0) {
                        fixtures.add(FarseerPhysics.Factories.FixtureFactory.AttachEdge(arc.getItem(i).$clone(), arc.getItem(((i - 1) | 0)).$clone(), body));
                    }

                    return fixtures;
                },
                AttachSolidArc: function (density, radians, sides, radius, position, angle, body) {
                    position = {v:position};
                    var arc = FarseerPhysics.Common.PolygonTools.CreateArc(radians, sides, radius);
                    arc.Rotate((Microsoft.Xna.Framework.MathHelper.Pi - radians) / 2 + angle);

                    arc.Translate$1(position);

                    arc.add(arc.getItem(0).$clone());

                    var triangles = FarseerPhysics.Common.Decomposition.EarclipDecomposer.ConvexPartition(arc);

                    return FarseerPhysics.Factories.FixtureFactory.AttachCompoundPolygon(triangles, density, body);
                }
            }
        }
    });

    /**
     * An easy to use factory for using joints.
     *
     * @static
     * @abstract
     * @public
     * @class FarseerPhysics.Factories.JointFactory
     */
    Bridge.define("FarseerPhysics.Factories.JointFactory", {
        statics: {
            methods: {
                /**
                 * Creates a revolute joint.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.JointFactory
                 * @memberof FarseerPhysics.Factories.JointFactory
                 * @param   {FarseerPhysics.Dynamics.Body}                    bodyA           
                 * @param   {FarseerPhysics.Dynamics.Body}                    bodyB           
                 * @param   {Microsoft.Xna.Framework.Vector2}                 localAnchorB    The anchor of bodyB in local coordinates
                 * @return  {FarseerPhysics.Dynamics.Joints.RevoluteJoint}
                 */
                CreateRevoluteJoint: function (bodyA, bodyB, localAnchorB) {
                    var localanchorA = bodyA.GetLocalPoint(bodyB.GetWorldPoint(localAnchorB.$clone()));
                    var joint = new FarseerPhysics.Dynamics.Joints.RevoluteJoint.$ctor1(bodyA, bodyB, localanchorA.$clone(), localAnchorB.$clone());
                    return joint;
                },
                /**
                 * Creates a revolute joint and adds it to the world
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.JointFactory
                 * @memberof FarseerPhysics.Factories.JointFactory
                 * @param   {FarseerPhysics.Dynamics.World}                   world     
                 * @param   {FarseerPhysics.Dynamics.Body}                    bodyA     
                 * @param   {FarseerPhysics.Dynamics.Body}                    bodyB     
                 * @param   {Microsoft.Xna.Framework.Vector2}                 anchor
                 * @return  {FarseerPhysics.Dynamics.Joints.RevoluteJoint}
                 */
                CreateRevoluteJoint$1: function (world, bodyA, bodyB, anchor) {
                    var joint = FarseerPhysics.Factories.JointFactory.CreateRevoluteJoint(bodyA, bodyB, anchor.$clone());
                    world.AddJoint(joint);
                    return joint;
                },
                /**
                 * Creates the fixed revolute joint.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.JointFactory
                 * @memberof FarseerPhysics.Factories.JointFactory
                 * @param   {FarseerPhysics.Dynamics.World}                        world          The world.
                 * @param   {FarseerPhysics.Dynamics.Body}                         body           The body.
                 * @param   {Microsoft.Xna.Framework.Vector2}                      bodyAnchor     The body anchor.
                 * @param   {Microsoft.Xna.Framework.Vector2}                      worldAnchor    The world anchor.
                 * @return  {FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint}
                 */
                CreateFixedRevoluteJoint: function (world, body, bodyAnchor, worldAnchor) {
                    var fixedRevoluteJoint = new FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint(body, bodyAnchor.$clone(), worldAnchor.$clone());
                    world.AddJoint(fixedRevoluteJoint);
                    return fixedRevoluteJoint;
                },
                /**
                 * Creates a weld joint
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.JointFactory
                 * @memberof FarseerPhysics.Factories.JointFactory
                 * @param   {FarseerPhysics.Dynamics.Body}                bodyA          
                 * @param   {FarseerPhysics.Dynamics.Body}                bodyB          
                 * @param   {Microsoft.Xna.Framework.Vector2}             localAnchor
                 * @return  {FarseerPhysics.Dynamics.Joints.WeldJoint}
                 */
                CreateWeldJoint: function (bodyA, bodyB, localAnchor) {
                    var joint = new FarseerPhysics.Dynamics.Joints.WeldJoint.$ctor1(bodyA, bodyB, bodyA.GetLocalPoint(localAnchor.$clone()), bodyB.GetLocalPoint(localAnchor.$clone()));
                    return joint;
                },
                /**
                 * Creates a weld joint and adds it to the world
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.JointFactory
                 * @memberof FarseerPhysics.Factories.JointFactory
                 * @param   {FarseerPhysics.Dynamics.World}               world           
                 * @param   {FarseerPhysics.Dynamics.Body}                bodyA           
                 * @param   {FarseerPhysics.Dynamics.Body}                bodyB           
                 * @param   {Microsoft.Xna.Framework.Vector2}             localanchorB
                 * @return  {FarseerPhysics.Dynamics.Joints.WeldJoint}
                 */
                CreateWeldJoint$1: function (world, bodyA, bodyB, localanchorB) {
                    var joint = FarseerPhysics.Factories.JointFactory.CreateWeldJoint(bodyA, bodyB, localanchorB.$clone());
                    world.AddJoint(joint);
                    return joint;
                },
                CreateWeldJoint$2: function (world, bodyA, bodyB, localAnchorA, localAnchorB) {
                    var weldJoint = new FarseerPhysics.Dynamics.Joints.WeldJoint.$ctor1(bodyA, bodyB, localAnchorA.$clone(), localAnchorB.$clone());
                    world.AddJoint(weldJoint);
                    return weldJoint;
                },
                /**
                 * Creates a prsimatic joint
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.JointFactory
                 * @memberof FarseerPhysics.Factories.JointFactory
                 * @param   {FarseerPhysics.Dynamics.Body}                     bodyA           
                 * @param   {FarseerPhysics.Dynamics.Body}                     bodyB           
                 * @param   {Microsoft.Xna.Framework.Vector2}                  localanchorB    
                 * @param   {Microsoft.Xna.Framework.Vector2}                  axis
                 * @return  {FarseerPhysics.Dynamics.Joints.PrismaticJoint}
                 */
                CreatePrismaticJoint: function (bodyA, bodyB, localanchorB, axis) {
                    var localanchorA = bodyA.GetLocalPoint(bodyB.GetWorldPoint(localanchorB.$clone()));
                    var joint = new FarseerPhysics.Dynamics.Joints.PrismaticJoint.$ctor1(bodyA, bodyB, localanchorA.$clone(), localanchorB.$clone(), axis.$clone());
                    return joint;
                },
                /**
                 * Creates a prismatic joint and adds it to the world
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.JointFactory
                 * @memberof FarseerPhysics.Factories.JointFactory
                 * @param   {FarseerPhysics.Dynamics.World}                    world           
                 * @param   {FarseerPhysics.Dynamics.Body}                     bodyA           
                 * @param   {FarseerPhysics.Dynamics.Body}                     bodyB           
                 * @param   {Microsoft.Xna.Framework.Vector2}                  localanchorB    
                 * @param   {Microsoft.Xna.Framework.Vector2}                  axis
                 * @return  {FarseerPhysics.Dynamics.Joints.PrismaticJoint}
                 */
                CreatePrismaticJoint$1: function (world, bodyA, bodyB, localanchorB, axis) {
                    var joint = FarseerPhysics.Factories.JointFactory.CreatePrismaticJoint(bodyA, bodyB, localanchorB.$clone(), axis.$clone());
                    world.AddJoint(joint);
                    return joint;
                },
                CreateFixedPrismaticJoint: function (world, body, worldAnchor, axis) {
                    var joint = new FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint(body, worldAnchor.$clone(), axis.$clone());
                    world.AddJoint(joint);
                    return joint;
                },
                /**
                 * Creates a line joint
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.JointFactory
                 * @memberof FarseerPhysics.Factories.JointFactory
                 * @param   {FarseerPhysics.Dynamics.Body}                bodyA     
                 * @param   {FarseerPhysics.Dynamics.Body}                bodyB     
                 * @param   {Microsoft.Xna.Framework.Vector2}             anchor    
                 * @param   {Microsoft.Xna.Framework.Vector2}             axis
                 * @return  {FarseerPhysics.Dynamics.Joints.LineJoint}
                 */
                CreateLineJoint: function (bodyA, bodyB, anchor, axis) {
                    var joint = new FarseerPhysics.Dynamics.Joints.LineJoint.$ctor1(bodyA, bodyB, anchor.$clone(), axis.$clone());
                    return joint;
                },
                /**
                 * Creates a line joint and adds it to the world
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.JointFactory
                 * @memberof FarseerPhysics.Factories.JointFactory
                 * @param   {FarseerPhysics.Dynamics.World}               world           
                 * @param   {FarseerPhysics.Dynamics.Body}                bodyA           
                 * @param   {FarseerPhysics.Dynamics.Body}                bodyB           
                 * @param   {Microsoft.Xna.Framework.Vector2}             localanchorB    
                 * @param   {Microsoft.Xna.Framework.Vector2}             axis
                 * @return  {FarseerPhysics.Dynamics.Joints.LineJoint}
                 */
                CreateLineJoint$1: function (world, bodyA, bodyB, localanchorB, axis) {
                    var joint = FarseerPhysics.Factories.JointFactory.CreateLineJoint(bodyA, bodyB, localanchorB.$clone(), axis.$clone());
                    world.AddJoint(joint);
                    return joint;
                },
                /**
                 * Creates an angle joint.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.JointFactory
                 * @memberof FarseerPhysics.Factories.JointFactory
                 * @param   {FarseerPhysics.Dynamics.World}                world    The world.
                 * @param   {FarseerPhysics.Dynamics.Body}                 bodyA    The first body.
                 * @param   {FarseerPhysics.Dynamics.Body}                 bodyB    The second body.
                 * @return  {FarseerPhysics.Dynamics.Joints.AngleJoint}
                 */
                CreateAngleJoint: function (world, bodyA, bodyB) {
                    var angleJoint = new FarseerPhysics.Dynamics.Joints.AngleJoint.$ctor1(bodyA, bodyB);
                    world.AddJoint(angleJoint);

                    return angleJoint;
                },
                /**
                 * Creates a fixed angle joint.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Factories.JointFactory
                 * @memberof FarseerPhysics.Factories.JointFactory
                 * @param   {FarseerPhysics.Dynamics.World}                     world    The world.
                 * @param   {FarseerPhysics.Dynamics.Body}                      body     The body.
                 * @return  {FarseerPhysics.Dynamics.Joints.FixedAngleJoint}
                 */
                CreateFixedAngleJoint: function (world, body) {
                    var angleJoint = new FarseerPhysics.Dynamics.Joints.FixedAngleJoint(body);
                    world.AddJoint(angleJoint);

                    return angleJoint;
                },
                CreateDistanceJoint: function (world, bodyA, bodyB, anchorA, anchorB) {
                    var distanceJoint = new FarseerPhysics.Dynamics.Joints.DistanceJoint.$ctor1(bodyA, bodyB, anchorA.$clone(), anchorB.$clone());
                    world.AddJoint(distanceJoint);
                    return distanceJoint;
                },
                CreateFixedDistanceJoint: function (world, body, localAnchor, worldAnchor) {
                    var distanceJoint = new FarseerPhysics.Dynamics.Joints.FixedDistanceJoint(body, localAnchor.$clone(), worldAnchor.$clone());
                    world.AddJoint(distanceJoint);
                    return distanceJoint;
                },
                CreateFrictionJoint: function (world, bodyA, bodyB, anchorA, anchorB) {
                    var frictionJoint = new FarseerPhysics.Dynamics.Joints.FrictionJoint.$ctor1(bodyA, bodyB, anchorA.$clone(), anchorB.$clone());
                    world.AddJoint(frictionJoint);
                    return frictionJoint;
                },
                CreateFixedFrictionJoint: function (world, body, bodyAnchor) {
                    var frictionJoint = new FarseerPhysics.Dynamics.Joints.FixedFrictionJoint(body, bodyAnchor.$clone());
                    world.AddJoint(frictionJoint);
                    return frictionJoint;
                },
                CreateGearJoint: function (world, jointA, jointB, ratio) {
                    var gearJoint = new FarseerPhysics.Dynamics.Joints.GearJoint(jointA, jointB, ratio);
                    world.AddJoint(gearJoint);
                    return gearJoint;
                },
                CreatePulleyJoint: function (world, bodyA, bodyB, groundAnchorA, groundAnchorB, anchorA, anchorB, ratio) {
                    var pulleyJoint = new FarseerPhysics.Dynamics.Joints.PulleyJoint.$ctor1(bodyA, bodyB, groundAnchorA.$clone(), groundAnchorB.$clone(), anchorA.$clone(), anchorB.$clone(), ratio);
                    world.AddJoint(pulleyJoint);
                    return pulleyJoint;
                },
                CreateSliderJoint: function (world, bodyA, bodyB, anchorA, anchorB, minLength, maxLength) {
                    var sliderJoint = new FarseerPhysics.Dynamics.Joints.SliderJoint.$ctor1(bodyA, bodyB, anchorA.$clone(), anchorB.$clone(), minLength, maxLength);
                    world.AddJoint(sliderJoint);
                    return sliderJoint;
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Settings", {
        statics: {
            fields: {
                MaxFloat: 0,
                Epsilon: 0,
                Pi: 0,
                /**
                 * Enabling diagnistics causes the engine to gather timing information.
                 You can see how much time it took to solve the contacts, solve CCD
                 and update the controllers.
                 NOTE: If you are using a debug view that shows performance counters,
                 you might want to enable this.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @default true
                 * @type boolean
                 */
                EnableDiagnostics: false,
                /**
                 * The number of velocity iterations used in the solver.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @default 8
                 * @type number
                 */
                VelocityIterations: 0,
                /**
                 * The number of position iterations used in the solver.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @default 3
                 * @type number
                 */
                PositionIterations: 0,
                /**
                 * Enable/Disable Continuous Collision Detection (CCD)
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @default true
                 * @type boolean
                 */
                ContinuousPhysics: false,
                /**
                 * The number of velocity iterations in the TOI solver
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @default 8
                 * @type number
                 */
                TOIVelocityIterations: 0,
                /**
                 * The number of position iterations in the TOI solver
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @default 20
                 * @type number
                 */
                TOIPositionIterations: 0,
                /**
                 * Maximum number of sub-steps per contact in continuous physics simulation.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 8
                 * @type number
                 */
                MaxSubSteps: 0,
                /**
                 * Enable/Disable warmstarting
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @default true
                 * @type boolean
                 */
                EnableWarmstarting: false,
                /**
                 * Enable/Disable sleeping
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @default true
                 * @type boolean
                 */
                AllowSleep: false,
                /**
                 * The maximum number of vertices on a convex polygon.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @default 30
                 * @type number
                 */
                MaxPolygonVertices: 0,
                /**
                 * Farseer Physics Engine has a different way of filtering fixtures than Box2d.
                 We have both FPE and Box2D filtering in the engine. If you are upgrading
                 from earlier versions of FPE, set this to true.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @type boolean
                 */
                UseFPECollisionCategories: false,
                /**
                 * Conserve memory makes sure that objects are used by reference instead of cloned.
                 When you give a vertices collection to a PolygonShape, it will by default copy the vertices
                 instead of using the original reference. This is to ensure that objects modified outside the engine
                 does not affect the engine itself, however, this uses extra memory. This behavior
                 can be turned off by setting ConserveMemory to true.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default false
                 * @type boolean
                 */
                ConserveMemory: false,
                /**
                 * The maximum number of contact points between two convex shapes.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 2
                 * @type number
                 */
                MaxManifoldPoints: 0,
                /**
                 * This is used to fatten AABBs in the dynamic tree. This allows proxies
                 to move by a small amount without triggering a tree adjustment.
                 This is in meters.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 0.1
                 * @type number
                 */
                AABBExtension: 0,
                /**
                 * This is used to fatten AABBs in the dynamic tree. This is used to predict
                 the future position based on the current displacement.
                 This is a dimensionless multiplier.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 2.0
                 * @type number
                 */
                AABBMultiplier: 0,
                /**
                 * A small length used as a collision and constraint tolerance. Usually it is
                 chosen to be numerically significant, but visually insignificant.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 0.005
                 * @type number
                 */
                LinearSlop: 0,
                /**
                 * A small angle used as a collision and constraint tolerance. Usually it is
                 chosen to be numerically significant, but visually insignificant.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 0.03490659
                 * @type number
                 */
                AngularSlop: 0,
                /**
                 * The radius of the polygon/edge shape skin. This should not be modified. Making
                 this smaller means polygons will have an insufficient buffer for continuous collision.
                 Making it larger may create artifacts for vertex collision.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 0.01
                 * @type number
                 */
                PolygonRadius: 0,
                /**
                 * Maximum number of contacts to be handled to solve a TOI impact.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 50
                 * @type number
                 */
                MaxTOIContacts: 0,
                /**
                 * A velocity threshold for elastic collisions. Any collision with a relative linear
                 velocity below this threshold will be treated as inelastic.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 1.0
                 * @type number
                 */
                VelocityThreshold: 0,
                /**
                 * The maximum linear position correction used when solving constraints. This helps to
                 prevent overshoot.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 0.2
                 * @type number
                 */
                MaxLinearCorrection: 0,
                /**
                 * The maximum angular position correction used when solving constraints. This helps to
                 prevent overshoot.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 0.139626354
                 * @type number
                 */
                MaxAngularCorrection: 0,
                /**
                 * This scale factor controls how fast overlap is resolved. Ideally this would be 1 so
                 that overlap is removed in one time step. However using values close to 1 often lead
                 to overshoot.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 0.2
                 * @type number
                 */
                ContactBaumgarte: 0,
                /**
                 * The time that a body must be still before it will go to sleep.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 0.5
                 * @type number
                 */
                TimeToSleep: 0,
                /**
                 * A body cannot sleep if its linear velocity is above this tolerance.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 0.01
                 * @type number
                 */
                LinearSleepTolerance: 0,
                /**
                 * A body cannot sleep if its angular velocity is above this tolerance.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 0.03490659
                 * @type number
                 */
                AngularSleepTolerance: 0,
                /**
                 * The maximum linear velocity of a body. This limit is very large and is used
                 to prevent numerical problems. You shouldn't need to adjust this.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 2.0
                 * @type number
                 */
                MaxTranslation: 0,
                MaxTranslationSquared: 0,
                /**
                 * The maximum angular velocity of a body. This limit is very large and is used
                 to prevent numerical problems. You shouldn't need to adjust this.
                 *
                 * @static
                 * @public
                 * @memberof FarseerPhysics.Settings
                 * @constant
                 * @default 1.57079637
                 * @type number
                 */
                MaxRotation: 0,
                MaxRotationSquared: 0
            },
            ctors: {
                init: function () {
                    this.MaxFloat = 3.40282347E+38;
                    this.Epsilon = 1.1920929E-07;
                    this.Pi = 3.14159274;
                    this.EnableDiagnostics = true;
                    this.VelocityIterations = 8;
                    this.PositionIterations = 3;
                    this.ContinuousPhysics = true;
                    this.TOIVelocityIterations = 8;
                    this.TOIPositionIterations = 20;
                    this.MaxSubSteps = 8;
                    this.EnableWarmstarting = true;
                    this.AllowSleep = true;
                    this.MaxPolygonVertices = 30;
                    this.ConserveMemory = false;
                    this.MaxManifoldPoints = 2;
                    this.AABBExtension = 0.1;
                    this.AABBMultiplier = 2.0;
                    this.LinearSlop = 0.005;
                    this.AngularSlop = (0.03490659);
                    this.PolygonRadius = (0.01);
                    this.MaxTOIContacts = 50;
                    this.VelocityThreshold = 1.0;
                    this.MaxLinearCorrection = 0.2;
                    this.MaxAngularCorrection = (0.139626354);
                    this.ContactBaumgarte = 0.2;
                    this.TimeToSleep = 0.5;
                    this.LinearSleepTolerance = 0.01;
                    this.AngularSleepTolerance = (0.03490659);
                    this.MaxTranslation = 2.0;
                    this.MaxTranslationSquared = (4.0);
                    this.MaxRotation = (1.57079637);
                    this.MaxRotationSquared = (2.46740127);
                }
            },
            methods: {
                /**
                 * Friction mixing law. Feel free to customize this.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Settings
                 * @memberof FarseerPhysics.Settings
                 * @param   {number}    friction1    The friction1.
                 * @param   {number}    friction2    The friction2.
                 * @return  {number}
                 */
                MixFriction: function (friction1, friction2) {
                    return Math.sqrt(friction1 * friction2);
                },
                /**
                 * Restitution mixing law. Feel free to customize this.
                 *
                 * @static
                 * @public
                 * @this FarseerPhysics.Settings
                 * @memberof FarseerPhysics.Settings
                 * @param   {number}    restitution1    The restitution1.
                 * @param   {number}    restitution2    The restitution2.
                 * @return  {number}
                 */
                MixRestitution: function (restitution1, restitution2) {
                    return restitution1 > restitution2 ? restitution1 : restitution2;
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Utility.Camera2D", {
        statics: {
            fields: {
                _minZoom: 0,
                _maxZoom: 0,
                _graphics: null
            },
            ctors: {
                init: function () {
                    this._minZoom = 0.02;
                    this._maxZoom = 20.0;
                }
            }
        },
        fields: {
            _batchView: null,
            _currentPosition: null,
            _currentRotation: 0,
            _currentZoom: 0,
            _maxPosition: null,
            _maxRotation: 0,
            _minPosition: null,
            _minRotation: 0,
            _positionTracking: false,
            _projection: null,
            _rotationTracking: false,
            _targetPosition: null,
            _targetRotation: 0,
            _trackingBody: null,
            _translateCenter: null,
            _view: null
        },
        props: {
            View: {
                get: function () {
                    return this._batchView.$clone();
                }
            },
            SimView: {
                get: function () {
                    return this._view.$clone();
                }
            },
            SimProjection: {
                get: function () {
                    return this._projection.$clone();
                }
            },
            /**
             * The current position of the camera.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.Camera2D
             * @function Position
             * @type Microsoft.Xna.Framework.Vector2
             */
            Position: {
                get: function () {
                    return FarseerPhysics.Utility.ConvertUnits.ToDisplayUnits(this._currentPosition.$clone());
                },
                set: function (value) {
                    this._targetPosition = FarseerPhysics.Utility.ConvertUnits.ToSimUnits(value.$clone());
                    if (Microsoft.Xna.Framework.Vector2.op_Inequality(this._minPosition.$clone(), this._maxPosition.$clone())) {
                        Microsoft.Xna.Framework.Vector2.Clamp$1(Bridge.ref(this, "_targetPosition"), Bridge.ref(this, "_minPosition"), Bridge.ref(this, "_maxPosition"), Bridge.ref(this, "_targetPosition"));
                    }
                }
            },
            /**
             * The furthest up, and the furthest left the camera can go.
             if this value equals maxPosition, then no clamping will be 
             applied (unless you override that function).
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.Camera2D
             * @function MinPosition
             * @type Microsoft.Xna.Framework.Vector2
             */
            MinPosition: {
                get: function () {
                    return FarseerPhysics.Utility.ConvertUnits.ToDisplayUnits(this._minPosition.$clone());
                },
                set: function (value) {
                    this._minPosition = FarseerPhysics.Utility.ConvertUnits.ToSimUnits(value.$clone());
                }
            },
            /**
             * the furthest down, and the furthest right the camera will go.
             if this value equals minPosition, then no clamping will be 
             applied (unless you override that function).
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.Camera2D
             * @function MaxPosition
             * @type Microsoft.Xna.Framework.Vector2
             */
            MaxPosition: {
                get: function () {
                    return FarseerPhysics.Utility.ConvertUnits.ToDisplayUnits(this._maxPosition.$clone());
                },
                set: function (value) {
                    this._maxPosition = FarseerPhysics.Utility.ConvertUnits.ToSimUnits(value.$clone());
                }
            },
            /**
             * The current rotation of the camera in radians.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.Camera2D
             * @function Rotation
             * @type number
             */
            Rotation: {
                get: function () {
                    return this._currentRotation;
                },
                set: function (value) {
                    this._targetRotation = value % Microsoft.Xna.Framework.MathHelper.TwoPi;
                    if (this._minRotation !== this._maxRotation) {
                        this._targetRotation = Microsoft.Xna.Framework.MathHelper.Clamp$1(this._targetRotation, this._minRotation, this._maxRotation);
                    }
                }
            },
            /**
             * Gets or sets the minimum rotation in radians.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.Camera2D
             * @function MinRotation
             * @type number
             */
            MinRotation: {
                get: function () {
                    return this._minRotation;
                },
                set: function (value) {
                    this._minRotation = Microsoft.Xna.Framework.MathHelper.Clamp$1(value, -3.14159274, 0.0);
                }
            },
            /**
             * Gets or sets the maximum rotation in radians.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.Camera2D
             * @function MaxRotation
             * @type number
             */
            MaxRotation: {
                get: function () {
                    return this._maxRotation;
                },
                set: function (value) {
                    this._maxRotation = Microsoft.Xna.Framework.MathHelper.Clamp$1(value, 0.0, Microsoft.Xna.Framework.MathHelper.Pi);
                }
            },
            /**
             * The current rotation of the camera in radians.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.Camera2D
             * @function Zoom
             * @type number
             */
            Zoom: {
                get: function () {
                    return this._currentZoom;
                },
                set: function (value) {
                    this._currentZoom = value;
                    this._currentZoom = Microsoft.Xna.Framework.MathHelper.Clamp$1(this._currentZoom, FarseerPhysics.Utility.Camera2D._minZoom, FarseerPhysics.Utility.Camera2D._maxZoom);
                }
            },
            /**
             * the body that this camera is currently tracking. 
             Null if not tracking any.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.Camera2D
             * @function TrackingBody
             * @type FarseerPhysics.Dynamics.Body
             */
            TrackingBody: {
                get: function () {
                    return this._trackingBody;
                },
                set: function (value) {
                    this._trackingBody = value;
                    if (this._trackingBody != null) {
                        this._positionTracking = true;
                    }
                }
            },
            EnablePositionTracking: {
                get: function () {
                    return this._positionTracking;
                },
                set: function (value) {
                    if (value && this._trackingBody != null) {
                        this._positionTracking = true;
                    } else {
                        this._positionTracking = false;
                    }
                }
            },
            EnableRotationTracking: {
                get: function () {
                    return this._rotationTracking;
                },
                set: function (value) {
                    if (value && this._trackingBody != null) {
                        this._rotationTracking = true;
                    } else {
                        this._rotationTracking = false;
                    }
                }
            },
            EnableTracking: {
                set: function (value) {
                    this.EnablePositionTracking = value;
                    this.EnableRotationTracking = value;
                }
            }
        },
        ctors: {
            init: function () {
                this._batchView = new Microsoft.Xna.Framework.Matrix();
                this._currentPosition = new Microsoft.Xna.Framework.Vector2();
                this._maxPosition = new Microsoft.Xna.Framework.Vector2();
                this._minPosition = new Microsoft.Xna.Framework.Vector2();
                this._projection = new Microsoft.Xna.Framework.Matrix();
                this._targetPosition = new Microsoft.Xna.Framework.Vector2();
                this._translateCenter = new Microsoft.Xna.Framework.Vector2();
                this._view = new Microsoft.Xna.Framework.Matrix();
            },
            /**
             * The constructor for the Camera2D class.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Utility.Camera2D
             * @memberof FarseerPhysics.Utility.Camera2D
             * @param   {Microsoft.Xna.Framework.Graphics.GraphicsDevice}    graphics
             * @return  {void}
             */
            ctor: function (graphics) {
                this.$initialize();
                FarseerPhysics.Utility.Camera2D._graphics = graphics;
                this._projection = Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter$1(0.0, FarseerPhysics.Utility.ConvertUnits.ToSimUnits$5(FarseerPhysics.Utility.Camera2D._graphics.Viewport.Width), FarseerPhysics.Utility.ConvertUnits.ToSimUnits$5(FarseerPhysics.Utility.Camera2D._graphics.Viewport.Height), 0.0, 0.0, 1.0);
                this._view = Microsoft.Xna.Framework.Matrix.Identity.$clone();
                this._batchView = Microsoft.Xna.Framework.Matrix.Identity.$clone();

                this._translateCenter = new Microsoft.Xna.Framework.Vector2.$ctor2(FarseerPhysics.Utility.ConvertUnits.ToSimUnits$6(FarseerPhysics.Utility.Camera2D._graphics.Viewport.Width / 2.0), FarseerPhysics.Utility.ConvertUnits.ToSimUnits$6(FarseerPhysics.Utility.Camera2D._graphics.Viewport.Height / 2.0));

                this.ResetCamera();
            }
        },
        methods: {
            MoveCamera: function (amount) {
                this._currentPosition = Microsoft.Xna.Framework.Vector2.op_Addition(this._currentPosition.$clone(), amount.$clone());
                if (Microsoft.Xna.Framework.Vector2.op_Inequality(this._minPosition.$clone(), this._maxPosition.$clone())) {
                    Microsoft.Xna.Framework.Vector2.Clamp$1(Bridge.ref(this, "_currentPosition"), Bridge.ref(this, "_minPosition"), Bridge.ref(this, "_maxPosition"), Bridge.ref(this, "_currentPosition"));
                }
                this._targetPosition = this._currentPosition.$clone();
                this._positionTracking = false;
                this._rotationTracking = false;
            },
            RotateCamera: function (amount) {
                this._currentRotation += amount;
                if (this._minRotation !== this._maxRotation) {
                    this._currentRotation = Microsoft.Xna.Framework.MathHelper.Clamp$1(this._currentRotation, this._minRotation, this._maxRotation);
                }
                this._targetRotation = this._currentRotation;
                this._positionTracking = false;
                this._rotationTracking = false;
            },
            /**
             * Resets the camera to default values.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Utility.Camera2D
             * @memberof FarseerPhysics.Utility.Camera2D
             * @return  {void}
             */
            ResetCamera: function () {
                this._currentPosition = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                this._targetPosition = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                this._minPosition = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                this._maxPosition = Microsoft.Xna.Framework.Vector2.Zero.$clone();

                this._currentRotation = 0.0;
                this._targetRotation = 0.0;
                this._minRotation = -3.14159274;
                this._maxRotation = Microsoft.Xna.Framework.MathHelper.Pi;

                this._positionTracking = false;
                this._rotationTracking = false;

                this._currentZoom = 1.0;

                this.SetView();
            },
            Jump2Target: function () {
                this._currentPosition = this._targetPosition.$clone();
                this._currentRotation = this._targetRotation;

                this.SetView();
            },
            SetView: function () {
                var matRotation = Microsoft.Xna.Framework.Matrix.CreateRotationZ(this._currentRotation);
                var matZoom = Microsoft.Xna.Framework.Matrix.CreateScale$1(this._currentZoom);
                var translateCenter = new Microsoft.Xna.Framework.Vector3.$ctor1(this._translateCenter.$clone(), 0.0);
                var translateBody = new Microsoft.Xna.Framework.Vector3.$ctor1(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(this._currentPosition.$clone()), 0.0);

                this._view = Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix.CreateTranslation(translateBody.$clone()), matRotation.$clone()), matZoom.$clone()), Microsoft.Xna.Framework.Matrix.CreateTranslation(translateCenter.$clone()));

                translateCenter = FarseerPhysics.Utility.ConvertUnits.ToDisplayUnits$2(translateCenter.$clone());
                translateBody = FarseerPhysics.Utility.ConvertUnits.ToDisplayUnits$2(translateBody.$clone());

                this._batchView = Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix.CreateTranslation(translateBody.$clone()), matRotation.$clone()), matZoom.$clone()), Microsoft.Xna.Framework.Matrix.CreateTranslation(translateCenter.$clone()));
            },
            /**
             * Moves the camera forward one timestep.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Utility.Camera2D
             * @memberof FarseerPhysics.Utility.Camera2D
             * @param   {Microsoft.Xna.Framework.GameTime}    gameTime
             * @return  {void}
             */
            Update: function (gameTime) {
                if (this._trackingBody != null) {
                    if (this._positionTracking) {
                        this._targetPosition = this._trackingBody.Position.$clone();
                        if (Microsoft.Xna.Framework.Vector2.op_Inequality(this._minPosition.$clone(), this._maxPosition.$clone())) {
                            Microsoft.Xna.Framework.Vector2.Clamp$1(Bridge.ref(this, "_targetPosition"), Bridge.ref(this, "_minPosition"), Bridge.ref(this, "_maxPosition"), Bridge.ref(this, "_targetPosition"));
                        }
                    }
                    if (this._rotationTracking) {
                        this._targetRotation = -this._trackingBody.Rotation % Microsoft.Xna.Framework.MathHelper.TwoPi;
                        if (this._minRotation !== this._maxRotation) {
                            this._targetRotation = Microsoft.Xna.Framework.MathHelper.Clamp$1(this._targetRotation, this._minRotation, this._maxRotation);
                        }
                    }
                }
                var delta = Microsoft.Xna.Framework.Vector2.op_Subtraction(this._targetPosition.$clone(), this._currentPosition.$clone());
                var distance = delta.Length();
                if (distance > 0.0) {
                    delta = Microsoft.Xna.Framework.Vector2.op_Division$1(delta.$clone(), distance);
                }
                var inertia;
                if (distance < 10.0) {
                    inertia = Math.pow(distance / 10.0, 2.0);
                } else {
                    inertia = 1.0;
                }

                var rotDelta = this._targetRotation - this._currentRotation;

                var rotInertia;
                if (Math.abs(rotDelta) < 5.0) {
                    rotInertia = Math.pow(rotDelta / 5.0, 2.0);
                } else {
                    rotInertia = 1.0;
                }
                if (Math.abs(rotDelta) > 0.0) {
                    rotDelta /= Math.abs(rotDelta);
                }

                this._currentPosition = Microsoft.Xna.Framework.Vector2.op_Addition(this._currentPosition.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$1(Microsoft.Xna.Framework.Vector2.op_Multiply$1(Microsoft.Xna.Framework.Vector2.op_Multiply$2(100.0, delta.$clone()), inertia), gameTime.ElapsedGameTime.getTotalSeconds()));
                this._currentRotation += 80.0 * rotDelta * rotInertia * gameTime.ElapsedGameTime.getTotalSeconds();

                this.SetView();
            },
            ConvertScreenToWorld: function (location) {
                var t = new Microsoft.Xna.Framework.Vector3.$ctor1(location.$clone(), 0);

                t = FarseerPhysics.Utility.Camera2D._graphics.Viewport.Unproject(t.$clone(), this._projection.$clone(), this._view.$clone(), Microsoft.Xna.Framework.Matrix.Identity.$clone());

                return new Microsoft.Xna.Framework.Vector2.$ctor2(t.X, t.Y);
            },
            ConvertWorldToScreen: function (location) {
                var t = new Microsoft.Xna.Framework.Vector3.$ctor1(location.$clone(), 0);

                t = FarseerPhysics.Utility.Camera2D._graphics.Viewport.Project(t.$clone(), this._projection.$clone(), this._view.$clone(), Microsoft.Xna.Framework.Matrix.Identity.$clone());

                return new Microsoft.Xna.Framework.Vector2.$ctor2(t.X, t.Y);
            }
        }
    });

    Bridge.define("FarseerPhysics.Utility.Common", {
        statics: {
            methods: {
                GetCompoundPolygonVertices: function (_polygonTexture, _scale, origin) {
                    var $t;
                    var data = System.Array.init(Bridge.Int.mul(_polygonTexture.Width, _polygonTexture.Height), 0, System.UInt32);
                    _polygonTexture.GetData(System.UInt32, data);

                    var textureVertices = FarseerPhysics.Common.PolygonTools.CreatePolygon$1(data, _polygonTexture.Width, false);

                    var centroid = { v : Microsoft.Xna.Framework.Vector2.op_UnaryNegation(textureVertices.GetCentroid()) };
                    textureVertices.Translate$1(centroid);

                    origin.v = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(centroid.v.$clone());

                    textureVertices = FarseerPhysics.Common.PolygonManipulation.SimplifyTools.ReduceByDistance(textureVertices, 4.0);

                    var list = FarseerPhysics.Common.Decomposition.BayazitDecomposer.ConvexPartition(textureVertices);

                    var vertScale = { v : Microsoft.Xna.Framework.Vector2.op_Multiply$1(new Microsoft.Xna.Framework.Vector2.$ctor1(FarseerPhysics.Utility.ConvertUnits.ToSimUnits$5(1)), _scale) };
                    $t = Bridge.getEnumerator(list);
                    try {
                        while ($t.moveNext()) {
                            var vertices = $t.Current;
                            vertices.Scale(vertScale);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return list;
                },
                GetPolygonVertices: function (_polygonTexture, _scale, origin) {
                    var data = System.Array.init(Bridge.Int.mul(_polygonTexture.Width, _polygonTexture.Height), 0, System.UInt32);
                    _polygonTexture.GetData(System.UInt32, data);

                    var textureVertices = FarseerPhysics.Common.PolygonTools.CreatePolygon$1(data, _polygonTexture.Width, false);

                    var centroid = { v : Microsoft.Xna.Framework.Vector2.op_UnaryNegation(textureVertices.GetCentroid()) };
                    textureVertices.Translate$1(centroid);

                    origin.v = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(centroid.v.$clone());

                    textureVertices = FarseerPhysics.Common.PolygonManipulation.SimplifyTools.CollinearSimplify$1(textureVertices, 10.0);
                    var vertScale = { v : Microsoft.Xna.Framework.Vector2.op_Multiply$1(new Microsoft.Xna.Framework.Vector2.$ctor1(FarseerPhysics.Utility.ConvertUnits.ToSimUnits$5(1)), _scale) };
                    textureVertices.Scale(vertScale);

                    return textureVertices;
                },
                GetAlpha: function (opacity) {
                    return new Microsoft.Xna.Framework.Color.$ctor9(opacity, opacity, opacity, opacity);
                },
                IsRectangleTouch: function (position, origin, rectWidth, rectHeight) {
                    return (position.X >= origin.X - rectWidth / 2 && position.X <= origin.X + rectWidth / 2 && position.Y >= origin.Y - rectHeight / 2 && position.Y <= origin.Y + rectHeight / 2);
                }
            }
        }
    });

    /** @namespace FarseerPhysics.Utility */

    /**
     * Convert units between display and simulation units.
     *
     * @static
     * @abstract
     * @public
     * @class FarseerPhysics.Utility.ConvertUnits
     */
    Bridge.define("FarseerPhysics.Utility.ConvertUnits", {
        statics: {
            fields: {
                _displayUnitsToSimUnitsRatio: 0,
                _simUnitsToDisplayUnitsRatio: 0
            },
            ctors: {
                init: function () {
                    this._displayUnitsToSimUnitsRatio = 100.0;
                    this._simUnitsToDisplayUnitsRatio = 1 / FarseerPhysics.Utility.ConvertUnits._displayUnitsToSimUnitsRatio;
                }
            },
            methods: {
                SetDisplayUnitToSimUnitRatio: function (displayUnitsPerSimUnit) {
                    FarseerPhysics.Utility.ConvertUnits._displayUnitsToSimUnitsRatio = displayUnitsPerSimUnit;
                    FarseerPhysics.Utility.ConvertUnits._simUnitsToDisplayUnitsRatio = 1 / displayUnitsPerSimUnit;
                },
                ToDisplayUnits$4: function (simUnits) {
                    return simUnits * FarseerPhysics.Utility.ConvertUnits._displayUnitsToSimUnitsRatio;
                },
                ToDisplayUnits$3: function (simUnits) {
                    return simUnits * FarseerPhysics.Utility.ConvertUnits._displayUnitsToSimUnitsRatio;
                },
                ToDisplayUnits: function (simUnits) {
                    return Microsoft.Xna.Framework.Vector2.op_Multiply$1(simUnits.$clone(), FarseerPhysics.Utility.ConvertUnits._displayUnitsToSimUnitsRatio);
                },
                ToDisplayUnits$5: function (simUnits, displayUnits) {
                    Microsoft.Xna.Framework.Vector2.Multiply$3(simUnits, FarseerPhysics.Utility.ConvertUnits._displayUnitsToSimUnitsRatio, displayUnits);
                },
                ToDisplayUnits$2: function (simUnits) {
                    return Microsoft.Xna.Framework.Vector3.op_Multiply$1(simUnits.$clone(), FarseerPhysics.Utility.ConvertUnits._displayUnitsToSimUnitsRatio);
                },
                ToDisplayUnits$1: function (x, y) {
                    return Microsoft.Xna.Framework.Vector2.op_Multiply$1(new Microsoft.Xna.Framework.Vector2.$ctor2(x, y), FarseerPhysics.Utility.ConvertUnits._displayUnitsToSimUnitsRatio);
                },
                ToDisplayUnits$6: function (x, y, displayUnits) {
                    displayUnits.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    displayUnits.v.X = x * FarseerPhysics.Utility.ConvertUnits._displayUnitsToSimUnitsRatio;
                    displayUnits.v.Y = y * FarseerPhysics.Utility.ConvertUnits._displayUnitsToSimUnitsRatio;
                },
                ToSimUnits$6: function (displayUnits) {
                    return displayUnits * FarseerPhysics.Utility.ConvertUnits._simUnitsToDisplayUnitsRatio;
                },
                ToSimUnits$4: function (displayUnits) {
                    return displayUnits * FarseerPhysics.Utility.ConvertUnits._simUnitsToDisplayUnitsRatio;
                },
                ToSimUnits$5: function (displayUnits) {
                    return displayUnits * FarseerPhysics.Utility.ConvertUnits._simUnitsToDisplayUnitsRatio;
                },
                ToSimUnits: function (displayUnits) {
                    return Microsoft.Xna.Framework.Vector2.op_Multiply$1(displayUnits.$clone(), FarseerPhysics.Utility.ConvertUnits._simUnitsToDisplayUnitsRatio);
                },
                ToSimUnits$3: function (displayUnits) {
                    return Microsoft.Xna.Framework.Vector3.op_Multiply$1(displayUnits.$clone(), FarseerPhysics.Utility.ConvertUnits._simUnitsToDisplayUnitsRatio);
                },
                ToSimUnits$7: function (displayUnits, simUnits) {
                    Microsoft.Xna.Framework.Vector2.Multiply$3(displayUnits, FarseerPhysics.Utility.ConvertUnits._simUnitsToDisplayUnitsRatio, simUnits);
                },
                ToSimUnits$2: function (x, y) {
                    return Microsoft.Xna.Framework.Vector2.op_Multiply$1(new Microsoft.Xna.Framework.Vector2.$ctor2(x, y), FarseerPhysics.Utility.ConvertUnits._simUnitsToDisplayUnitsRatio);
                },
                ToSimUnits$1: function (x, y) {
                    return Microsoft.Xna.Framework.Vector2.op_Multiply$1(new Microsoft.Xna.Framework.Vector2.$ctor2(x, y), FarseerPhysics.Utility.ConvertUnits._simUnitsToDisplayUnitsRatio);
                },
                ToSimUnits$8: function (x, y, simUnits) {
                    simUnits.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    simUnits.v.X = x * FarseerPhysics.Utility.ConvertUnits._simUnitsToDisplayUnitsRatio;
                    simUnits.v.Y = y * FarseerPhysics.Utility.ConvertUnits._simUnitsToDisplayUnitsRatio;
                }
            }
        }
    });

    /**
     * A screen is a single layer that has update and draw logic, and which
     can be combined with other layers to build up a complex menu system.
     For instance the main menu, the options menu, the "are you sure you
     want to quit" message box, and the main game itself are all implemented
     as screens.
     *
     * @abstract
     * @public
     * @class FarseerPhysics.Utility.GameScreen
     */
    Bridge.define("FarseerPhysics.Utility.GameScreen", {
        fields: {
            _enabledGestures: 0,
            _otherScreenHasFocus: false,
            HasCursor: false,
            HasVirtualStick: false,
            /**
             * Normally when one screen is brought up over the top of another,
             the first screen will transition off to make room for the new
             one. This property indicates whether the screen is only a small
             popup, in which case screens underneath it do not need to bother
             transitioning off.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.GameScreen
             * @function IsPopup
             * @type boolean
             */
            IsPopup: false,
            /**
             * Indicates how long the screen takes to
             transition on when it is activated.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.GameScreen
             * @function TransitionOnTime
             * @type System.TimeSpan
             */
            TransitionOnTime: null,
            /**
             * Indicates how long the screen takes to
             transition off when it is deactivated.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.GameScreen
             * @function TransitionOffTime
             * @type System.TimeSpan
             */
            TransitionOffTime: null,
            /**
             * Gets the current position of the screen transition, ranging
             from zero (fully active, no transition) to one (transitioned
             fully off to nothing).
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.GameScreen
             * @function TransitionPosition
             * @type number
             */
            TransitionPosition: 0,
            /**
             * Gets the current screen transition state.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.GameScreen
             * @function ScreenState
             * @type FarseerPhysics.Utility.ScreenState
             */
            ScreenState: 0,
            /**
             * There are two possible reasons why a screen might be transitioning
             off. It could be temporarily going away to make room for another
             screen that is on top of it, or it could be going away for good.
             This property indicates whether the screen is exiting for real:
             if set, the screen will automatically remove itself as soon as the
             transition finishes.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.GameScreen
             * @function IsExiting
             * @type boolean
             */
            IsExiting: false,
            /**
             * Gets the manager that this screen belongs to.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.GameScreen
             * @function ScreenManager
             * @type FarseerPhysics.Utility.ScreenManager
             */
            ScreenManager: null
        },
        props: {
            /**
             * Gets the current alpha of the screen transition, ranging
             from 1 (fully active, no transition) to 0 (transitioned
             fully off to nothing).
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Utility.GameScreen
             * @function TransitionAlpha
             * @type number
             */
            TransitionAlpha: {
                get: function () {
                    return 1.0 - this.TransitionPosition;
                }
            },
            /**
             * Checks whether this screen is active and can respond to user input.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Utility.GameScreen
             * @function IsActive
             * @type boolean
             */
            IsActive: {
                get: function () {
                    return !this._otherScreenHasFocus && (this.ScreenState === FarseerPhysics.Utility.ScreenState.TransitionOn || this.ScreenState === FarseerPhysics.Utility.ScreenState.Active);
                }
            },
            /**
             * Gets the gestures the screen is interested in. Screens should be as specific
             as possible with gestures to increase the accuracy of the gesture engine.
             For example, most menus only need Tap or perhaps Tap and VerticalDrag to operate.
             These gestures are handled by the ScreenManager when screens change and
             all gestures are placed in the InputState passed to the HandleInput method.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Utility.GameScreen
             * @function EnabledGestures
             * @type Microsoft.Xna.Framework.Input.Touch.GestureType
             */
            EnabledGestures: {
                get: function () {
                    return this._enabledGestures;
                },
                set: function (value) {
                    this._enabledGestures = value;

                    if (this.ScreenState === FarseerPhysics.Utility.ScreenState.Active) {
                        Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures = value;
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.TransitionOnTime = new System.TimeSpan();
                this.TransitionOffTime = new System.TimeSpan();
                this._enabledGestures = Microsoft.Xna.Framework.Input.Touch.GestureType.None;
            },
            ctor: function () {
                this.$initialize();
                this.ScreenState = FarseerPhysics.Utility.ScreenState.TransitionOn;
                this.TransitionPosition = 1;
                this.TransitionOffTime = System.TimeSpan.zero;
                this.TransitionOnTime = System.TimeSpan.zero;
                this.HasCursor = false;
                this.HasVirtualStick = false;
            }
        },
        methods: {
            /**
             * Load graphics content for the screen.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Utility.GameScreen
             * @memberof FarseerPhysics.Utility.GameScreen
             * @return  {void}
             */
            LoadContent: function () { },
            /**
             * Unload content for the screen.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Utility.GameScreen
             * @memberof FarseerPhysics.Utility.GameScreen
             * @return  {void}
             */
            UnloadContent: function () { },
            /**
             * Allows the screen to run logic, such as updating the transition position.
             Unlike HandleInput, this method is called regardless of whether the screen
             is active, hidden, or in the middle of a transition.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Utility.GameScreen
             * @memberof FarseerPhysics.Utility.GameScreen
             * @param   {Microsoft.Xna.Framework.GameTime}    gameTime                
             * @param   {boolean}                             otherScreenHasFocus     
             * @param   {boolean}                             coveredByOtherScreen
             * @return  {void}
             */
            Update: function (gameTime, otherScreenHasFocus, coveredByOtherScreen) {
                this._otherScreenHasFocus = otherScreenHasFocus;
                if (this.IsExiting) {
                    this.ScreenState = FarseerPhysics.Utility.ScreenState.TransitionOff;

                    if (!this.UpdateTransition(gameTime, this.TransitionOffTime, 1)) {
                        this.ScreenManager.RemoveScreen(this);
                    }
                } else if (coveredByOtherScreen) {
                    if (this.UpdateTransition(gameTime, this.TransitionOffTime, 1)) {
                        this.ScreenState = FarseerPhysics.Utility.ScreenState.TransitionOff;
                    } else {
                        this.ScreenState = FarseerPhysics.Utility.ScreenState.Hidden;
                    }
                } else {
                    if (this.UpdateTransition(gameTime, this.TransitionOnTime, -1)) {
                        this.ScreenState = FarseerPhysics.Utility.ScreenState.TransitionOn;
                    } else {
                        this.ScreenState = FarseerPhysics.Utility.ScreenState.Active;
                    }
                }
            },
            /**
             * Helper for updating the screen transition position.
             *
             * @instance
             * @private
             * @this FarseerPhysics.Utility.GameScreen
             * @memberof FarseerPhysics.Utility.GameScreen
             * @param   {Microsoft.Xna.Framework.GameTime}    gameTime     
             * @param   {System.TimeSpan}                     time         
             * @param   {number}                              direction
             * @return  {boolean}
             */
            UpdateTransition: function (gameTime, time, direction) {
                var transitionDelta;

                if (System.TimeSpan.eq(time, System.TimeSpan.zero)) {
                    transitionDelta = 1.0;
                } else {
                    transitionDelta = gameTime.ElapsedGameTime.getTotalMilliseconds() / time.getTotalMilliseconds();
                }

                this.TransitionPosition += transitionDelta * direction;

                if (((direction < 0) && (this.TransitionPosition <= 0)) || ((direction > 0) && (this.TransitionPosition >= 1))) {
                    this.TransitionPosition = Microsoft.Xna.Framework.MathHelper.Clamp$1(this.TransitionPosition, 0, 1);
                    return false;
                }

                return true;
            },
            /**
             * This is called when the screen should draw itself.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Utility.GameScreen
             * @memberof FarseerPhysics.Utility.GameScreen
             * @param   {Microsoft.Xna.Framework.GameTime}    gameTime
             * @return  {void}
             */
            Draw: function (gameTime) { },
            /**
             * Tells the screen to go away. Unlike ScreenManager.RemoveScreen, which
             instantly kills the screen, this method respects the transition timings
             and will give the screen a chance to gradually transition off.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Utility.GameScreen
             * @memberof FarseerPhysics.Utility.GameScreen
             * @return  {void}
             */
            ExitScreen: function () {
                if (System.TimeSpan.eq(this.TransitionOffTime, System.TimeSpan.zero)) {
                    this.ScreenManager.RemoveScreen(this);
                } else {
                    this.IsExiting = true;
                }
            }
        }
    });

    /**
     * The screen manager is a component which manages one or more GameScreen
     instances. It maintains a stack of screens, calls their Update and Draw
     methods at the appropriate times, and automatically routes input to the
     topmost active screen.
     *
     * @public
     * @class FarseerPhysics.Utility.ScreenManager
     * @augments Microsoft.Xna.Framework.DrawableGameComponent
     */
    Bridge.define("FarseerPhysics.Utility.ScreenManager", {
        inherits: [Microsoft.Xna.Framework.DrawableGameComponent],
        fields: {
            _contentManager: null,
            _isInitialized: false,
            _screens: null,
            _screensToUpdate: null,
            _spriteBatch: null,
            _transitions: null
        },
        props: {
            /**
             * A default SpriteBatch shared by all the screens. This saves
             each screen having to bother creating their own local instance.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Utility.ScreenManager
             * @function SpriteBatch
             * @type Microsoft.Xna.Framework.Graphics.SpriteBatch
             */
            SpriteBatch: {
                get: function () {
                    return this._spriteBatch;
                }
            },
            Content: {
                get: function () {
                    return this._contentManager;
                }
            }
        },
        alias: [
            "Initialize", "Microsoft$Xna$Framework$IGameComponent$Initialize",
            "Draw", "Microsoft$Xna$Framework$IDrawable$Draw"
        ],
        ctors: {
            /**
             * Constructs a new screen manager component.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Utility.ScreenManager
             * @memberof FarseerPhysics.Utility.ScreenManager
             * @param   {Microsoft.Xna.Framework.Game}    game
             * @return  {void}
             */
            ctor: function (game) {
                this.$initialize();
                Microsoft.Xna.Framework.DrawableGameComponent.ctor.call(this, game);
                Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures = Microsoft.Xna.Framework.Input.Touch.GestureType.None;
                this._contentManager = game.Content;
                this._contentManager.RootDirectory = "Content";

                this._screens = new (System.Collections.Generic.List$1(FarseerPhysics.Utility.GameScreen)).ctor();
                this._screensToUpdate = new (System.Collections.Generic.List$1(FarseerPhysics.Utility.GameScreen)).ctor();
                this._transitions = new (System.Collections.Generic.List$1(Microsoft.Xna.Framework.Graphics.RenderTarget2D)).ctor();
            }
        },
        methods: {
            /**
             * Initializes the screen manager component.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Utility.ScreenManager
             * @memberof FarseerPhysics.Utility.ScreenManager
             * @return  {void}
             */
            Initialize: function () {
                Microsoft.Xna.Framework.DrawableGameComponent.prototype.Initialize.call(this);

                this._isInitialized = true;
            },
            /**
             * Load your graphics content.
             *
             * @instance
             * @protected
             * @override
             * @this FarseerPhysics.Utility.ScreenManager
             * @memberof FarseerPhysics.Utility.ScreenManager
             * @return  {void}
             */
            LoadContent: function () {
                var $t;
                this._spriteBatch = new Microsoft.Xna.Framework.Graphics.SpriteBatch(this.GraphicsDevice);

                $t = Bridge.getEnumerator(this._screens);
                try {
                    while ($t.moveNext()) {
                        var screen = $t.Current;
                        screen.LoadContent();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            /**
             * Unload your graphics content.
             *
             * @instance
             * @protected
             * @override
             * @this FarseerPhysics.Utility.ScreenManager
             * @memberof FarseerPhysics.Utility.ScreenManager
             * @return  {void}
             */
            UnloadContent: function () {
                var $t;
                $t = Bridge.getEnumerator(this._screens);
                try {
                    while ($t.moveNext()) {
                        var screen = $t.Current;
                        screen.UnloadContent();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            /**
             * Allows each screen to run logic.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Utility.ScreenManager
             * @memberof FarseerPhysics.Utility.ScreenManager
             * @param   {Microsoft.Xna.Framework.GameTime}    gameTime
             * @return  {void}
             */
            Update: function (gameTime) {
                var $t;

                this._screensToUpdate.clear();
                $t = Bridge.getEnumerator(this._screens);
                try {
                    while ($t.moveNext()) {
                        var screen = $t.Current;
                        this._screensToUpdate.add(screen);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                var otherScreenHasFocus = !this.Game.IsActive;
                var coveredByOtherScreen = false;

                while (this._screensToUpdate.Count > 0) {
                    var screen1 = this._screensToUpdate.getItem(((this._screensToUpdate.Count - 1) | 0));

                    this._screensToUpdate.removeAt(((this._screensToUpdate.Count - 1) | 0));

                    screen1.Update(gameTime, otherScreenHasFocus, coveredByOtherScreen);

                    if (screen1.ScreenState === FarseerPhysics.Utility.ScreenState.TransitionOn || screen1.ScreenState === FarseerPhysics.Utility.ScreenState.Active) {
                        if (!otherScreenHasFocus) {
                            otherScreenHasFocus = true;
                        }

                        if (!screen1.IsPopup) {
                            coveredByOtherScreen = true;
                        }
                    }
                }
            },
            /**
             * Tells each screen to draw itself.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Utility.ScreenManager
             * @memberof FarseerPhysics.Utility.ScreenManager
             * @param   {Microsoft.Xna.Framework.GameTime}    gameTime
             * @return  {void}
             */
            Draw: function (gameTime) {
                var $t;
                this.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black.$clone());
                $t = Bridge.getEnumerator(this._screens);
                try {
                    while ($t.moveNext()) {
                        var screen = $t.Current;
                        screen.Draw(gameTime);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            /**
             * Adds a new screen to the screen manager.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Utility.ScreenManager
             * @memberof FarseerPhysics.Utility.ScreenManager
             * @param   {FarseerPhysics.Utility.GameScreen}    screen
             * @return  {void}
             */
            AddScreen: function (screen) {
                screen.ScreenManager = this;
                screen.IsExiting = false;

                if (this._isInitialized) {
                    screen.LoadContent();
                }

                this._screens.add(screen);

                Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures = screen.EnabledGestures;
            },
            /**
             * Removes a screen from the screen manager. You should normally
             use GameScreen.ExitScreen instead of calling this directly, so
             the screen can gradually transition off rather than just being
             instantly removed.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Utility.ScreenManager
             * @memberof FarseerPhysics.Utility.ScreenManager
             * @param   {FarseerPhysics.Utility.GameScreen}    screen
             * @return  {void}
             */
            RemoveScreen: function (screen) {
                if (this._isInitialized) {
                    screen.UnloadContent();
                }

                this._screens.remove(screen);
                this._screensToUpdate.remove(screen);

                if (this._screens.Count > 0) {
                    Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures = this._screens.getItem(((this._screens.Count - 1) | 0)).EnabledGestures;
                }
            },
            /**
             * Expose an array holding all the screens. We return a copy rather
             than the real master list, because screens should only ever be added
             or removed using the AddScreen and RemoveScreen methods.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Utility.ScreenManager
             * @memberof FarseerPhysics.Utility.ScreenManager
             * @return  {Array.<FarseerPhysics.Utility.GameScreen>}
             */
            GetScreens: function () {
                return this._screens.ToArray();
            }
        }
    });

    /**
     * Enum describes the screen transition state.
     *
     * @public
     * @class FarseerPhysics.Utility.ScreenState
     */
    Bridge.define("FarseerPhysics.Utility.ScreenState", {
        $kind: "enum",
        statics: {
            fields: {
                TransitionOn: 0,
                Active: 1,
                TransitionOff: 2,
                Hidden: 3
            }
        }
    });

    Bridge.define("FarseerPhysics.Utility.Sprite", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new FarseerPhysics.Utility.Sprite(); }
            }
        },
        fields: {
            Origin: null,
            Texture: null
        },
        ctors: {
            init: function () {
                this.Origin = new Microsoft.Xna.Framework.Vector2();
            },
            $ctor2: function (texture, origin) {
                this.$initialize();
                this.Texture = texture;
                this.Origin = origin.$clone();
            },
            $ctor1: function (sprite) {
                this.$initialize();
                this.Texture = sprite;
                this.Origin = new Microsoft.Xna.Framework.Vector2.$ctor2(sprite.Width / 2.0, sprite.Height / 2.0);
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1769133511, this.Origin, this.Texture]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, FarseerPhysics.Utility.Sprite)) {
                    return false;
                }
                return Bridge.equals(this.Origin, o.Origin) && Bridge.equals(this.Texture, o.Texture);
            },
            $clone: function (to) {
                var s = to || new FarseerPhysics.Utility.Sprite();
                s.Origin = this.Origin.$clone();
                s.Texture = this.Texture;
                return s;
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Delaunay.DelaunayTriangle", {
        fields: {
            EdgeIsConstrained: null,
            EdgeIsDelaunay: null,
            Neighbors: null,
            Points: null,
            IsInterior: false
        },
        ctors: {
            init: function () {
                this.EdgeIsConstrained = new Poly2Tri.Triangulation.Util.FixedBitArray3();
                this.EdgeIsDelaunay = new Poly2Tri.Triangulation.Util.FixedBitArray3();
                this.Neighbors = new (Poly2Tri.Triangulation.Util.FixedArray3$1(Poly2Tri.Triangulation.Delaunay.DelaunayTriangle))();
                this.Points = new (Poly2Tri.Triangulation.Util.FixedArray3$1(Poly2Tri.Triangulation.TriangulationPoint))();
            },
            ctor: function (p1, p2, p3) {
                this.$initialize();
                this.Points.setItem(0, p1);
                this.Points.setItem(1, p2);
                this.Points.setItem(2, p3);
            }
        },
        methods: {
            IndexOf: function (p) {
                var i = this.Points.IndexOf(p);
                if (i === -1) {
                    throw new System.Exception("Calling index with a point that doesn't exist in triangle");
                }
                return i;
            },
            IndexCW: function (p) {
                var index = this.IndexOf(p);
                switch (index) {
                    case 0: 
                        return 2;
                    case 1: 
                        return 0;
                    default: 
                        return 1;
                }
            },
            IndexCCW: function (p) {
                var index = this.IndexOf(p);
                switch (index) {
                    case 0: 
                        return 1;
                    case 1: 
                        return 2;
                    default: 
                        return 0;
                }
            },
            Contains$1: function (p) {
                return (Bridge.referenceEquals(p, this.Points.getItem(0)) || Bridge.referenceEquals(p, this.Points.getItem(1)) || Bridge.referenceEquals(p, this.Points.getItem(2)));
            },
            Contains: function (e) {
                return (this.Contains$1(e.P) && this.Contains$1(e.Q));
            },
            Contains$2: function (p, q) {
                return (this.Contains$1(p) && this.Contains$1(q));
            },
            /**
             * Update neighbor pointers
             *
             * @instance
             * @private
             * @this Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @memberof Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @param   {Poly2Tri.Triangulation.TriangulationPoint}           p1    Point 1 of the shared edge
             * @param   {Poly2Tri.Triangulation.TriangulationPoint}           p2    Point 2 of the shared edge
             * @param   {Poly2Tri.Triangulation.Delaunay.DelaunayTriangle}    t     This triangle's new neighbor
             * @return  {void}
             */
            MarkNeighbor$1: function (p1, p2, t) {
                if ((Bridge.referenceEquals(p1, this.Points.getItem(2)) && Bridge.referenceEquals(p2, this.Points.getItem(1))) || (Bridge.referenceEquals(p1, this.Points.getItem(1)) && Bridge.referenceEquals(p2, this.Points.getItem(2)))) {
                    this.Neighbors.setItem(0, t);
                } else if ((Bridge.referenceEquals(p1, this.Points.getItem(0)) && Bridge.referenceEquals(p2, this.Points.getItem(2))) || (Bridge.referenceEquals(p1, this.Points.getItem(2)) && Bridge.referenceEquals(p2, this.Points.getItem(0)))) {
                    this.Neighbors.setItem(1, t);
                } else if ((Bridge.referenceEquals(p1, this.Points.getItem(0)) && Bridge.referenceEquals(p2, this.Points.getItem(1))) || (Bridge.referenceEquals(p1, this.Points.getItem(1)) && Bridge.referenceEquals(p2, this.Points.getItem(0)))) {
                    this.Neighbors.setItem(2, t);
                } else {
                    System.Diagnostics.Debug.WriteLine$2("Neighbor error, please report!");
                }
            },
            /**
             * Exhaustive search to update neighbor pointers
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @memberof Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @param   {Poly2Tri.Triangulation.Delaunay.DelaunayTriangle}    t
             * @return  {void}
             */
            MarkNeighbor: function (t) {
                if (t.Contains$2(this.Points.getItem(1), this.Points.getItem(2))) {
                    this.Neighbors.setItem(0, t);
                    t.MarkNeighbor$1(this.Points.getItem(1), this.Points.getItem(2), this);
                } else if (t.Contains$2(this.Points.getItem(0), this.Points.getItem(2))) {
                    this.Neighbors.setItem(1, t);
                    t.MarkNeighbor$1(this.Points.getItem(0), this.Points.getItem(2), this);
                } else if (t.Contains$2(this.Points.getItem(0), this.Points.getItem(1))) {
                    this.Neighbors.setItem(2, t);
                    t.MarkNeighbor$1(this.Points.getItem(0), this.Points.getItem(1), this);
                } else {
                    System.Diagnostics.Debug.WriteLine$2("markNeighbor failed");
                }
            },
            ClearNeighbors: function () {
                var $t, $t1;
                this.Neighbors.setItem(0, ($t = ($t1 = null, this.Neighbors.setItem(2, $t1), $t1), this.Neighbors.setItem(1, $t), $t));
            },
            ClearNeighbor: function (triangle) {
                if (Bridge.referenceEquals(this.Neighbors.getItem(0), triangle)) {
                    this.Neighbors.setItem(0, null);
                } else if (Bridge.referenceEquals(this.Neighbors.getItem(1), triangle)) {
                    this.Neighbors.setItem(1, null);
                } else {
                    this.Neighbors.setItem(2, null);
                }
            },
            Clear: function () {
                var $t, $t1;
                var t;
                for (var i = 0; i < 3; i = (i + 1) | 0) {
                    t = this.Neighbors.getItem(i);
                    if (t != null) {
                        t.ClearNeighbor(this);
                    }
                }
                this.ClearNeighbors();
                this.Points.setItem(0, ($t = ($t1 = null, this.Points.setItem(2, $t1), $t1), this.Points.setItem(1, $t), $t));
            },
            /**
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @memberof Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @param   {Poly2Tri.Triangulation.Delaunay.DelaunayTriangle}    t    Opposite triangle
             * @param   {Poly2Tri.Triangulation.TriangulationPoint}           p    The point in t that isn't shared between the triangles
             * @return  {Poly2Tri.Triangulation.TriangulationPoint}
             */
            OppositePoint: function (t, p) {
                System.Diagnostics.Debug.Assert$1(!Bridge.referenceEquals(t, this), "self-pointer error");
                return this.PointCW(t.PointCW(p));
            },
            NeighborCW: function (point) {
                return this.Neighbors.getItem((((this.Points.IndexOf(point) + 1) | 0)) % 3);
            },
            NeighborCCW: function (point) {
                return this.Neighbors.getItem((((this.Points.IndexOf(point) + 2) | 0)) % 3);
            },
            NeighborAcross: function (point) {
                return this.Neighbors.getItem(this.Points.IndexOf(point));
            },
            PointCCW: function (point) {
                return this.Points.getItem((((this.IndexOf(point) + 1) | 0)) % 3);
            },
            PointCW: function (point) {
                return this.Points.getItem((((this.IndexOf(point) + 2) | 0)) % 3);
            },
            RotateCW: function () {
                var t = this.Points.getItem(2);
                this.Points.setItem(2, this.Points.getItem(1));
                this.Points.setItem(1, this.Points.getItem(0));
                this.Points.setItem(0, t);
            },
            /**
             * Legalize triangle by rotating clockwise around oPoint
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @memberof Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @param   {Poly2Tri.Triangulation.TriangulationPoint}    oPoint    The origin point to rotate around
             * @param   {Poly2Tri.Triangulation.TriangulationPoint}    nPoint    ???
             * @return  {void}
             */
            Legalize: function (oPoint, nPoint) {
                this.RotateCW();
                this.Points.setItem(this.IndexCCW(oPoint), nPoint);
            },
            toString: function () {
                return System.String.concat(System.String.concat(this.Points.getItem(0), ",", this.Points.getItem(1)) + ",", this.Points.getItem(2));
            },
            /**
             * Finalize edge marking
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @memberof Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @return  {void}
             */
            MarkNeighborEdges: function () {
                for (var i = 0; i < 3; i = (i + 1) | 0) {
                    if (this.EdgeIsConstrained.getItem(i) && this.Neighbors.getItem(i) != null) {
                        this.Neighbors.getItem(i).MarkConstrainedEdge$1(this.Points.getItem((((i + 1) | 0)) % 3), this.Points.getItem((((i + 2) | 0)) % 3));
                    }
                }
            },
            MarkEdge: function (triangle) {
                for (var i = 0; i < 3; i = (i + 1) | 0) {
                    if (this.EdgeIsConstrained.getItem(i)) {
                        triangle.MarkConstrainedEdge$1(this.Points.getItem((((i + 1) | 0)) % 3), this.Points.getItem((((i + 2) | 0)) % 3));
                    }
                }
            },
            MarkEdge$1: function (tList) {
                var $t;
                $t = Bridge.getEnumerator(tList);
                try {
                    while ($t.moveNext()) {
                        var t = $t.Current;
                        for (var i = 0; i < 3; i = (i + 1) | 0) {
                            if (t.EdgeIsConstrained.getItem(i)) {
                                this.MarkConstrainedEdge$1(t.Points.getItem((((i + 1) | 0)) % 3), t.Points.getItem((((i + 2) | 0)) % 3));
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            MarkConstrainedEdge$2: function (index) {
                this.EdgeIsConstrained.setItem(index, true);
            },
            MarkConstrainedEdge: function (edge) {
                this.MarkConstrainedEdge$1(edge.P, edge.Q);
            },
            /**
             * Mark edge as constrained
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @memberof Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @param   {Poly2Tri.Triangulation.TriangulationPoint}    p    
             * @param   {Poly2Tri.Triangulation.TriangulationPoint}    q
             * @return  {void}
             */
            MarkConstrainedEdge$1: function (p, q) {
                var i = this.EdgeIndex(p, q);
                if (i !== -1) {
                    this.EdgeIsConstrained.setItem(i, true);
                }
            },
            Area: function () {
                var b = this.Points.getItem(0).X - this.Points.getItem(1).X;
                var h = this.Points.getItem(2).Y - this.Points.getItem(1).Y;

                return Math.abs((b * h * 0.5));
            },
            Centroid: function () {
                var cx = (this.Points.getItem(0).X + this.Points.getItem(1).X + this.Points.getItem(2).X) / 3.0;
                var cy = (this.Points.getItem(0).Y + this.Points.getItem(1).Y + this.Points.getItem(2).Y) / 3.0;
                return new Poly2Tri.Triangulation.TriangulationPoint(cx, cy);
            },
            /**
             * Get the index of the neighbor that shares this edge (or -1 if it isn't shared)
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @memberof Poly2Tri.Triangulation.Delaunay.DelaunayTriangle
             * @param   {Poly2Tri.Triangulation.TriangulationPoint}    p1    
             * @param   {Poly2Tri.Triangulation.TriangulationPoint}    p2
             * @return  {number}                                             index of the shared edge or -1 if edge isn't shared
             */
            EdgeIndex: function (p1, p2) {
                var i1 = this.Points.IndexOf(p1);
                var i2 = this.Points.IndexOf(p2);

                var a = (i1 === 0 || i2 === 0);
                var b = (i1 === 1 || i2 === 1);
                var c = (i1 === 2 || i2 === 2);

                if (b && c) {
                    return 0;
                }
                if (a && c) {
                    return 1;
                }
                if (a && b) {
                    return 2;
                }
                return -1;
            },
            GetConstrainedEdgeCCW: function (p) {
                return this.EdgeIsConstrained.getItem((((this.IndexOf(p) + 2) | 0)) % 3);
            },
            GetConstrainedEdgeCW: function (p) {
                return this.EdgeIsConstrained.getItem((((this.IndexOf(p) + 1) | 0)) % 3);
            },
            GetConstrainedEdgeAcross: function (p) {
                return this.EdgeIsConstrained.getItem(this.IndexOf(p));
            },
            SetConstrainedEdgeCCW: function (p, ce) {
                this.EdgeIsConstrained.setItem((((this.IndexOf(p) + 2) | 0)) % 3, ce);
            },
            SetConstrainedEdgeCW: function (p, ce) {
                this.EdgeIsConstrained.setItem((((this.IndexOf(p) + 1) | 0)) % 3, ce);
            },
            SetConstrainedEdgeAcross: function (p, ce) {
                this.EdgeIsConstrained.setItem(this.IndexOf(p), ce);
            },
            GetDelaunayEdgeCCW: function (p) {
                return this.EdgeIsDelaunay.getItem((((this.IndexOf(p) + 2) | 0)) % 3);
            },
            GetDelaunayEdgeCW: function (p) {
                return this.EdgeIsDelaunay.getItem((((this.IndexOf(p) + 1) | 0)) % 3);
            },
            GetDelaunayEdgeAcross: function (p) {
                return this.EdgeIsDelaunay.getItem(this.IndexOf(p));
            },
            SetDelaunayEdgeCCW: function (p, ce) {
                this.EdgeIsDelaunay.setItem((((this.IndexOf(p) + 2) | 0)) % 3, ce);
            },
            SetDelaunayEdgeCW: function (p, ce) {
                this.EdgeIsDelaunay.setItem((((this.IndexOf(p) + 1) | 0)) % 3, ce);
            },
            SetDelaunayEdgeAcross: function (p, ce) {
                this.EdgeIsDelaunay.setItem(this.IndexOf(p), ce);
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFront", {
        fields: {
            Head: null,
            Search: null,
            Tail: null
        },
        ctors: {
            ctor: function (head, tail) {
                this.$initialize();
                this.Head = head;
                this.Tail = tail;
                this.Search = head;
                this.AddNode(head);
                this.AddNode(tail);
            }
        },
        methods: {
            AddNode: function (node) { },
            RemoveNode: function (node) { },
            toString: function () {
                var sb = new System.Text.StringBuilder();
                var node = this.Head;
                while (!Bridge.referenceEquals(node, this.Tail)) {
                    sb.append(node.Point.X).append("->");
                    node = node.Next;
                }
                sb.append(this.Tail.Point.X);
                return sb.toString();
            },
            /**
             * MM:  This seems to be used by LocateNode to guess a position in the implicit linked list of AdvancingFrontNodes near x
                  Removed an overload that depended on this being exact
             *
             * @instance
             * @private
             * @this Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFront
             * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFront
             * @param   {number}                                                      x
             * @return  {Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode}
             */
            FindSearchNode: function (x) {
                return this.Search;
            },
            /**
             * We use a balancing tree to locate a node smaller or equal to given key value
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFront
             * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFront
             * @param   {Poly2Tri.Triangulation.TriangulationPoint}                   point
             * @return  {Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode}
             */
            LocateNode: function (point) {
                return this.LocateNode$1(point.X);
            },
            LocateNode$1: function (x) {
                var node = this.FindSearchNode(x);
                if (x < node.Value) {
                    while (((node = node.Prev)) != null) {
                        if (x >= node.Value) {
                            this.Search = node;
                            return node;
                        }
                    }
                } else {
                    while (((node = node.Next)) != null) {
                        if (x < node.Value) {
                            this.Search = node.Prev;
                            return node.Prev;
                        }
                    }
                }
                return null;
            },
            /**
             * This implementation will use simple node traversal algorithm to find a point on the front
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFront
             * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFront
             * @param   {Poly2Tri.Triangulation.TriangulationPoint}                   point
             * @return  {Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode}
             */
            LocatePoint: function (point) {
                var px = point.X;
                var node = this.FindSearchNode(px);
                var nx = node.Point.X;

                if (px === nx) {
                    if (!Bridge.referenceEquals(point, node.Point)) {
                        if (Bridge.referenceEquals(point, node.Prev.Point)) {
                            node = node.Prev;
                        } else if (Bridge.referenceEquals(point, node.Next.Point)) {
                            node = node.Next;
                        } else {
                            throw new System.Exception("Failed to find Node for given afront point");
                        }
                    }
                } else if (px < nx) {
                    while (((node = node.Prev)) != null) {
                        if (Bridge.referenceEquals(point, node.Point)) {
                            break;
                        }
                    }
                } else {
                    while (((node = node.Next)) != null) {
                        if (Bridge.referenceEquals(point, node.Point)) {
                            break;
                        }
                    }
                }
                this.Search = node;
                return node;
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode", {
        fields: {
            Next: null,
            Point: null,
            Prev: null,
            Triangle: null,
            Value: 0
        },
        props: {
            HasNext: {
                get: function () {
                    return this.Next != null;
                }
            },
            HasPrev: {
                get: function () {
                    return this.Prev != null;
                }
            }
        },
        ctors: {
            ctor: function (point) {
                this.$initialize();
                this.Point = point;
                this.Value = point.X;
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep", {
        statics: {
            fields: {
                PI_div2: 0,
                PI_3div4: 0
            },
            ctors: {
                init: function () {
                    this.PI_div2 = 1.5707963267948966;
                    this.PI_3div4 = 2.3561944901923448;
                }
            },
            methods: {
                /**
                 * Triangulate simple polygon with holes
                 *
                 * @static
                 * @public
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext}    tcx
                 * @return  {void}
                 */
                Triangulate: function (tcx) {
                    tcx.CreateAdvancingFront();

                    Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Sweep(tcx);

                    if (tcx.TriangulationMode === Poly2Tri.Triangulation.TriangulationMode.Polygon) {
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FinalizationPolygon(tcx);
                    } else {
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FinalizationConvexHull(tcx);
                    }

                    tcx.Done();
                },
                /**
                 * Start sweeping the Y-sorted point set from bottom to top
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext}    tcx
                 * @return  {void}
                 */
                Sweep: function (tcx) {
                    var $t;
                    var points = tcx.Points;
                    var point;
                    var node;

                    for (var i = 1; i < points.Count; i = (i + 1) | 0) {
                        point = points.getItem(i);

                        node = Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.PointEvent(tcx, point);

                        if (point.HasEdges) {
                            $t = Bridge.getEnumerator(point.Edges);
                            try {
                                while ($t.moveNext()) {
                                    var e = $t.Current;
                                    Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.EdgeEvent(tcx, e, node);
                                }
                            } finally {
                                if (Bridge.is($t, System.IDisposable)) {
                                    $t.System$IDisposable$Dispose();
                                }
                            }}
                        tcx.Update(null);
                    }
                },
                /**
                 * If this is a Delaunay Triangulation of a pointset we need to fill so the triangle mesh gets a ConvexHull
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext}    tcx
                 * @return  {void}
                 */
                FinalizationConvexHull: function (tcx) {
                    var n1, n2;
                    var t1, t2;
                    var first, p1;

                    n1 = tcx.aFront.Head.Next;
                    n2 = n1.Next;
                    first = n1.Point;

                    Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.TurnAdvancingFrontConvex(tcx, n1, n2);



                    n1 = tcx.aFront.Tail.Prev;
                    if (n1.Triangle.Contains$1(n1.Next.Point) && n1.Triangle.Contains$1(n1.Prev.Point)) {
                        t1 = n1.Triangle.NeighborAcross(n1.Point);
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.RotateTrianglePair(n1.Triangle, n1.Point, t1, t1.OppositePoint(n1.Triangle, n1.Point));
                        tcx.MapTriangleToNodes(n1.Triangle);
                        tcx.MapTriangleToNodes(t1);
                    }
                    n1 = tcx.aFront.Head.Next;
                    if (n1.Triangle.Contains$1(n1.Prev.Point) && n1.Triangle.Contains$1(n1.Next.Point)) {
                        t1 = n1.Triangle.NeighborAcross(n1.Point);
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.RotateTrianglePair(n1.Triangle, n1.Point, t1, t1.OppositePoint(n1.Triangle, n1.Point));
                        tcx.MapTriangleToNodes(n1.Triangle);
                        tcx.MapTriangleToNodes(t1);
                    }

                    first = tcx.aFront.Head.Point;
                    n2 = tcx.aFront.Tail.Prev;
                    t1 = n2.Triangle;
                    p1 = n2.Point;
                    n2.Triangle = null;
                    do {
                        tcx.RemoveFromList(t1);
                        p1 = t1.PointCCW(p1);
                        if (Bridge.referenceEquals(p1, first)) {
                            break;
                        }
                        t2 = t1.NeighborCCW(p1);
                        t1.Clear();
                        t1 = t2;
                    } while (true);

                    first = tcx.aFront.Head.Next.Point;
                    p1 = t1.PointCW(tcx.aFront.Head.Point);
                    t2 = t1.NeighborCW(tcx.aFront.Head.Point);
                    t1.Clear();
                    t1 = t2;
                    while (!Bridge.referenceEquals(p1, first)) {
                        tcx.RemoveFromList(t1);
                        p1 = t1.PointCCW(p1);
                        t2 = t1.NeighborCCW(p1);
                        t1.Clear();
                        t1 = t2;
                    }

                    tcx.aFront.Head = tcx.aFront.Head.Next;
                    tcx.aFront.Head.Prev = null;
                    tcx.aFront.Tail = tcx.aFront.Tail.Prev;
                    tcx.aFront.Tail.Next = null;

                    tcx.FinalizeTriangulation();
                },
                /**
                 * We will traverse the entire advancing front and fill it to form a convex hull.
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext}        tcx    
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode}    b      
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode}    c
                 * @return  {void}
                 */
                TurnAdvancingFrontConvex: function (tcx, b, c) {
                    var first = b;
                    while (!Bridge.referenceEquals(c, tcx.aFront.Tail)) {
                        if (Poly2Tri.Triangulation.TriangulationUtil.Orient2d(b.Point, c.Point, c.Next.Point) === FarseerPhysics.Common.Decomposition.CDT.Orientation.CCW) {
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Fill(tcx, c);
                            c = c.Next;
                        } else {
                            if (!Bridge.referenceEquals(b, first) && Poly2Tri.Triangulation.TriangulationUtil.Orient2d(b.Prev.Point, b.Point, c.Point) === FarseerPhysics.Common.Decomposition.CDT.Orientation.CCW) {
                                Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Fill(tcx, b);
                                b = b.Prev;
                            } else {
                                b = c;
                                c = c.Next;
                            }
                        }
                    }
                },
                FinalizationPolygon: function (tcx) {
                    var t = tcx.aFront.Head.Next.Triangle;
                    var p = tcx.aFront.Head.Next.Point;
                    while (!t.GetConstrainedEdgeCW(p)) {
                        t = t.NeighborCCW(p);
                    }

                    tcx.MeshClean(t);
                },
                /**
                 * Find closes node to the left of the new point and
                 create a new triangle. If needed new holes and basins
                 will be filled to.
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext}        tcx      
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}                   point
                 * @return  {Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode}
                 */
                PointEvent: function (tcx, point) {
                    var node, newNode;

                    node = tcx.LocateNode(point);
                    newNode = Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.NewFrontTriangle(tcx, point, node);

                    if (point.X <= node.Point.X + Poly2Tri.Triangulation.TriangulationUtil.EPSILON) {
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Fill(tcx, node);
                    }

                    tcx.AddNode(newNode);

                    Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillAdvancingFront(tcx, newNode);
                    return newNode;
                },
                /**
                 * Creates a new front triangle and legalize it
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext}        tcx      
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}                   point    
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode}    node
                 * @return  {Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode}
                 */
                NewFrontTriangle: function (tcx, point, node) {
                    var newNode;
                    var triangle;

                    triangle = new Poly2Tri.Triangulation.Delaunay.DelaunayTriangle(point, node.Point, node.Next.Point);
                    triangle.MarkNeighbor(node.Triangle);
                    tcx.Triangles.add(triangle);

                    newNode = new Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode(point);
                    newNode.Next = node.Next;
                    newNode.Prev = node;
                    node.Next.Prev = newNode;
                    node.Next = newNode;

                    tcx.AddNode(newNode);

                    if (!Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Legalize(tcx, triangle)) {
                        tcx.MapTriangleToNodes(triangle);
                    }

                    return newNode;
                },
                EdgeEvent: function (tcx, edge, node) {
                    try {
                        tcx.EdgeEvent.ConstrainedEdge = edge;
                        tcx.EdgeEvent.Right = edge.P.X > edge.Q.X;

                        if (Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.IsEdgeSideOfTriangle(node.Triangle, edge.P, edge.Q)) {
                            return;
                        }

                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillEdgeEvent(tcx, edge, node);

                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.EdgeEvent$1(tcx, edge.P, edge.Q, node.Triangle, edge.Q);
                    }
                    catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        var e;
                        if (Bridge.is($e1, Poly2Tri.Triangulation.Delaunay.Sweep.PointOnEdgeException)) {
                            e = $e1;
                            System.Diagnostics.Debug.WriteLine$2(System.String.format("Skipping Edge: {0}", [e.Message]));
                        } else {
                            throw $e1;
                        }
                    }
                },
                EdgeEvent$1: function (tcx, ep, eq, triangle, point) {
                    var p1, p2;

                    if (Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.IsEdgeSideOfTriangle(triangle, ep, eq)) {
                        return;
                    }

                    p1 = triangle.PointCCW(point);
                    var o1 = Poly2Tri.Triangulation.TriangulationUtil.Orient2d(eq, p1, ep);
                    if (o1 === FarseerPhysics.Common.Decomposition.CDT.Orientation.Collinear) {
                        if (triangle.Contains$2(eq, p1)) {
                            triangle.MarkConstrainedEdge$1(eq, p1);
                            tcx.EdgeEvent.ConstrainedEdge.Q = p1;
                            triangle = triangle.NeighborAcross(point);
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.EdgeEvent$1(tcx, ep, p1, triangle, p1);
                        } else {
                            throw new Poly2Tri.Triangulation.Delaunay.Sweep.PointOnEdgeException("EdgeEvent - Point on constrained edge not supported yet");
                        }
                        if (tcx.IsDebugEnabled) {
                            System.Diagnostics.Debug.WriteLine$2("EdgeEvent - Point on constrained edge");
                        }
                        return;
                    }

                    p2 = triangle.PointCW(point);
                    var o2 = Poly2Tri.Triangulation.TriangulationUtil.Orient2d(eq, p2, ep);
                    if (o2 === FarseerPhysics.Common.Decomposition.CDT.Orientation.Collinear) {
                        if (triangle.Contains$2(eq, p2)) {
                            triangle.MarkConstrainedEdge$1(eq, p2);
                            tcx.EdgeEvent.ConstrainedEdge.Q = p2;
                            triangle = triangle.NeighborAcross(point);
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.EdgeEvent$1(tcx, ep, p2, triangle, p2);
                        } else {
                            throw new Poly2Tri.Triangulation.Delaunay.Sweep.PointOnEdgeException("EdgeEvent - Point on constrained edge not supported yet");
                        }
                        if (tcx.IsDebugEnabled) {
                            System.Diagnostics.Debug.WriteLine$2("EdgeEvent - Point on constrained edge");
                        }
                        return;
                    }

                    if (o1 === o2) {
                        if (o1 === FarseerPhysics.Common.Decomposition.CDT.Orientation.CW) {
                            triangle = triangle.NeighborCCW(point);
                        } else {
                            triangle = triangle.NeighborCW(point);
                        }
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.EdgeEvent$1(tcx, ep, eq, triangle, point);
                    } else {
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FlipEdgeEvent(tcx, ep, eq, triangle, point);
                    }
                },
                FillEdgeEvent: function (tcx, edge, node) {
                    if (tcx.EdgeEvent.Right) {
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillRightAboveEdgeEvent(tcx, edge, node);
                    } else {
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillLeftAboveEdgeEvent(tcx, edge, node);
                    }
                },
                FillRightConcaveEdgeEvent: function (tcx, edge, node) {
                    Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Fill(tcx, node.Next);
                    if (!Bridge.referenceEquals(node.Next.Point, edge.P)) {
                        if (Poly2Tri.Triangulation.TriangulationUtil.Orient2d(edge.Q, node.Next.Point, edge.P) === FarseerPhysics.Common.Decomposition.CDT.Orientation.CCW) {
                            if (Poly2Tri.Triangulation.TriangulationUtil.Orient2d(node.Point, node.Next.Point, node.Next.Next.Point) === FarseerPhysics.Common.Decomposition.CDT.Orientation.CCW) {
                                Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillRightConcaveEdgeEvent(tcx, edge, node);
                            } else {
                            }
                        }
                    }
                },
                FillRightConvexEdgeEvent: function (tcx, edge, node) {
                    if (Poly2Tri.Triangulation.TriangulationUtil.Orient2d(node.Next.Point, node.Next.Next.Point, node.Next.Next.Next.Point) === FarseerPhysics.Common.Decomposition.CDT.Orientation.CCW) {
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillRightConcaveEdgeEvent(tcx, edge, node.Next);
                    } else {
                        if (Poly2Tri.Triangulation.TriangulationUtil.Orient2d(edge.Q, node.Next.Next.Point, edge.P) === FarseerPhysics.Common.Decomposition.CDT.Orientation.CCW) {
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillRightConvexEdgeEvent(tcx, edge, node.Next);
                        } else {
                        }
                    }
                },
                FillRightBelowEdgeEvent: function (tcx, edge, node) {
                    if (node.Point.X < edge.P.X) {
                        if (Poly2Tri.Triangulation.TriangulationUtil.Orient2d(node.Point, node.Next.Point, node.Next.Next.Point) === FarseerPhysics.Common.Decomposition.CDT.Orientation.CCW) {
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillRightConcaveEdgeEvent(tcx, edge, node);
                        } else {
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillRightConvexEdgeEvent(tcx, edge, node);
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillRightBelowEdgeEvent(tcx, edge, node);
                        }
                    }
                },
                FillRightAboveEdgeEvent: function (tcx, edge, node) {
                    while (node.Next.Point.X < edge.P.X) {
                        var o1 = Poly2Tri.Triangulation.TriangulationUtil.Orient2d(edge.Q, node.Next.Point, edge.P);
                        if (o1 === FarseerPhysics.Common.Decomposition.CDT.Orientation.CCW) {
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillRightBelowEdgeEvent(tcx, edge, node);
                        } else {
                            node = node.Next;
                        }
                    }
                },
                FillLeftConvexEdgeEvent: function (tcx, edge, node) {
                    if (Poly2Tri.Triangulation.TriangulationUtil.Orient2d(node.Prev.Point, node.Prev.Prev.Point, node.Prev.Prev.Prev.Point) === FarseerPhysics.Common.Decomposition.CDT.Orientation.CW) {
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillLeftConcaveEdgeEvent(tcx, edge, node.Prev);
                    } else {
                        if (Poly2Tri.Triangulation.TriangulationUtil.Orient2d(edge.Q, node.Prev.Prev.Point, edge.P) === FarseerPhysics.Common.Decomposition.CDT.Orientation.CW) {
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillLeftConvexEdgeEvent(tcx, edge, node.Prev);
                        } else {
                        }
                    }
                },
                FillLeftConcaveEdgeEvent: function (tcx, edge, node) {
                    Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Fill(tcx, node.Prev);
                    if (!Bridge.referenceEquals(node.Prev.Point, edge.P)) {
                        if (Poly2Tri.Triangulation.TriangulationUtil.Orient2d(edge.Q, node.Prev.Point, edge.P) === FarseerPhysics.Common.Decomposition.CDT.Orientation.CW) {
                            if (Poly2Tri.Triangulation.TriangulationUtil.Orient2d(node.Point, node.Prev.Point, node.Prev.Prev.Point) === FarseerPhysics.Common.Decomposition.CDT.Orientation.CW) {
                                Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillLeftConcaveEdgeEvent(tcx, edge, node);
                            } else {
                            }
                        }
                    }
                },
                FillLeftBelowEdgeEvent: function (tcx, edge, node) {
                    if (node.Point.X > edge.P.X) {
                        if (Poly2Tri.Triangulation.TriangulationUtil.Orient2d(node.Point, node.Prev.Point, node.Prev.Prev.Point) === FarseerPhysics.Common.Decomposition.CDT.Orientation.CW) {
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillLeftConcaveEdgeEvent(tcx, edge, node);
                        } else {
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillLeftConvexEdgeEvent(tcx, edge, node);
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillLeftBelowEdgeEvent(tcx, edge, node);
                        }
                    }
                },
                FillLeftAboveEdgeEvent: function (tcx, edge, node) {
                    while (node.Prev.Point.X > edge.P.X) {
                        var o1 = Poly2Tri.Triangulation.TriangulationUtil.Orient2d(edge.Q, node.Prev.Point, edge.P);
                        if (o1 === FarseerPhysics.Common.Decomposition.CDT.Orientation.CW) {
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillLeftBelowEdgeEvent(tcx, edge, node);
                        } else {
                            node = node.Prev;
                        }
                    }
                },
                IsEdgeSideOfTriangle: function (triangle, ep, eq) {
                    var index;
                    index = triangle.EdgeIndex(ep, eq);
                    if (index !== -1) {
                        triangle.MarkConstrainedEdge$2(index);
                        triangle = triangle.Neighbors.getItem(index);
                        if (triangle != null) {
                            triangle.MarkConstrainedEdge$1(ep, eq);
                        }
                        return true;
                    }
                    return false;
                },
                FlipEdgeEvent: function (tcx, ep, eq, t, p) {
                    var op, newP;
                    var ot;
                    var inScanArea;

                    ot = t.NeighborAcross(p);
                    op = ot.OppositePoint(t, p);

                    if (ot == null) {
                        throw new System.InvalidOperationException.$ctor1("[BUG:FIXME] FLIP failed due to missing triangle");
                    }

                    inScanArea = Poly2Tri.Triangulation.TriangulationUtil.InScanArea(p, t.PointCCW(p), t.PointCW(p), op);
                    if (inScanArea) {
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.RotateTrianglePair(t, p, ot, op);
                        tcx.MapTriangleToNodes(t);
                        tcx.MapTriangleToNodes(ot);

                        if (Bridge.referenceEquals(p, eq) && Bridge.referenceEquals(op, ep)) {
                            if (Bridge.referenceEquals(eq, tcx.EdgeEvent.ConstrainedEdge.Q) && Bridge.referenceEquals(ep, tcx.EdgeEvent.ConstrainedEdge.P)) {
                                if (tcx.IsDebugEnabled) {
                                    System.Console.WriteLine("[FLIP] - constrained edge done");
                                }
                                t.MarkConstrainedEdge$1(ep, eq);
                                ot.MarkConstrainedEdge$1(ep, eq);
                                Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Legalize(tcx, t);
                                Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Legalize(tcx, ot);
                            } else {
                                if (tcx.IsDebugEnabled) {
                                    System.Console.WriteLine("[FLIP] - subedge done");
                                }
                            }
                        } else {
                            if (tcx.IsDebugEnabled) {
                                System.Console.WriteLine("[FLIP] - flipping and continuing with triangle still crossing edge");
                            }
                            var o = Poly2Tri.Triangulation.TriangulationUtil.Orient2d(eq, op, ep);
                            t = Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.NextFlipTriangle(tcx, o, t, ot, p, op);
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FlipEdgeEvent(tcx, ep, eq, t, p);
                        }
                    } else {
                        newP = Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.NextFlipPoint(ep, eq, ot, op);
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FlipScanEdgeEvent(tcx, ep, eq, t, ot, newP);
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.EdgeEvent$1(tcx, ep, eq, t, p);
                    }
                },
                /**
                 * When we need to traverse from one triangle to the next we need 
                 the point in current triangle that is the opposite point to the next
                 triangle.
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}           ep    
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}           eq    
                 * @param   {Poly2Tri.Triangulation.Delaunay.DelaunayTriangle}    ot    
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}           op
                 * @return  {Poly2Tri.Triangulation.TriangulationPoint}
                 */
                NextFlipPoint: function (ep, eq, ot, op) {
                    var o2d = Poly2Tri.Triangulation.TriangulationUtil.Orient2d(eq, op, ep);
                    if (o2d === FarseerPhysics.Common.Decomposition.CDT.Orientation.CW) {
                        return ot.PointCCW(op);
                    } else if (o2d === FarseerPhysics.Common.Decomposition.CDT.Orientation.CCW) {
                        return ot.PointCW(op);
                    } else {
                        throw new Poly2Tri.Triangulation.Delaunay.Sweep.PointOnEdgeException("Point on constrained edge not supported yet");
                    }
                },
                /**
                 * After a flip we have two triangles and know that only one will still be
                 intersecting the edge. So decide which to contiune with and legalize the other
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext}    tcx    
                 * @param   {FarseerPhysics.Common.Decomposition.CDT.Orientation}     o      should be the result of an TriangulationUtil.orient2d( eq, op, ep )
                 * @param   {Poly2Tri.Triangulation.Delaunay.DelaunayTriangle}        t      triangle 1
                 * @param   {Poly2Tri.Triangulation.Delaunay.DelaunayTriangle}        ot     triangle 2
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}               p      a point shared by both triangles
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}               op     another point shared by both triangles
                 * @return  {Poly2Tri.Triangulation.Delaunay.DelaunayTriangle}               returns the triangle still intersecting the edge
                 */
                NextFlipTriangle: function (tcx, o, t, ot, p, op) {
                    var edgeIndex;
                    if (o === FarseerPhysics.Common.Decomposition.CDT.Orientation.CCW) {
                        edgeIndex = ot.EdgeIndex(p, op);
                        ot.EdgeIsDelaunay.setItem(edgeIndex, true);
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Legalize(tcx, ot);
                        ot.EdgeIsDelaunay.Clear();
                        return t;
                    }
                    edgeIndex = t.EdgeIndex(p, op);
                    t.EdgeIsDelaunay.setItem(edgeIndex, true);
                    Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Legalize(tcx, t);
                    t.EdgeIsDelaunay.Clear();
                    return ot;
                },
                
                FlipScanEdgeEvent: function (tcx, ep, eq, flipTriangle, t, p) {
                    var ot;
                    var op, newP;
                    var inScanArea;

                    ot = t.NeighborAcross(p);
                    op = ot.OppositePoint(t, p);

                    if (ot == null) {
                        throw new System.Exception("[BUG:FIXME] FLIP failed due to missing triangle");
                    }

                    inScanArea = Poly2Tri.Triangulation.TriangulationUtil.InScanArea(eq, flipTriangle.PointCCW(eq), flipTriangle.PointCW(eq), op);
                    if (inScanArea) {
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FlipEdgeEvent(tcx, eq, op, ot, op);
                    } else {
                        newP = Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.NextFlipPoint(ep, eq, ot, op);
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FlipScanEdgeEvent(tcx, ep, eq, flipTriangle, ot, newP);
                    }
                },
                /**
                 * Fills holes in the Advancing Front
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext}        tcx    
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode}    n
                 * @return  {void}
                 */
                FillAdvancingFront: function (tcx, n) {
                    var node;
                    var angle;

                    node = n.Next;
                    while (node.HasNext) {
                        angle = Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.HoleAngle(node);
                        if (angle > Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.PI_div2 || angle < -1.5707963267948966) {
                            break;
                        }
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Fill(tcx, node);
                        node = node.Next;
                    }

                    node = n.Prev;
                    while (node.HasPrev) {
                        angle = Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.HoleAngle(node);
                        if (angle > Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.PI_div2 || angle < -1.5707963267948966) {
                            break;
                        }
                        Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Fill(tcx, node);
                        node = node.Prev;
                    }

                    if (n.HasNext && n.Next.HasNext) {
                        angle = Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.BasinAngle(n);
                        if (angle < Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.PI_3div4) {
                            Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillBasin(tcx, n);
                        }
                    }
                },
                
                FillBasin: function (tcx, node) {
                    if (Poly2Tri.Triangulation.TriangulationUtil.Orient2d(node.Point, node.Next.Point, node.Next.Next.Point) === FarseerPhysics.Common.Decomposition.CDT.Orientation.CCW) {
                        tcx.Basin.leftNode = node;
                    } else {
                        tcx.Basin.leftNode = node.Next;
                    }

                    tcx.Basin.bottomNode = tcx.Basin.leftNode;
                    while (tcx.Basin.bottomNode.HasNext && tcx.Basin.bottomNode.Point.Y >= tcx.Basin.bottomNode.Next.Point.Y) {
                        tcx.Basin.bottomNode = tcx.Basin.bottomNode.Next;
                    }

                    if (Bridge.referenceEquals(tcx.Basin.bottomNode, tcx.Basin.leftNode)) {
                        return;
                    }

                    tcx.Basin.rightNode = tcx.Basin.bottomNode;
                    while (tcx.Basin.rightNode.HasNext && tcx.Basin.rightNode.Point.Y < tcx.Basin.rightNode.Next.Point.Y) {
                        tcx.Basin.rightNode = tcx.Basin.rightNode.Next;
                    }

                    if (Bridge.referenceEquals(tcx.Basin.rightNode, tcx.Basin.bottomNode)) {
                        return;
                    }

                    tcx.Basin.width = tcx.Basin.rightNode.Point.X - tcx.Basin.leftNode.Point.X;
                    tcx.Basin.leftHighest = tcx.Basin.leftNode.Point.Y > tcx.Basin.rightNode.Point.Y;

                    Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillBasinReq(tcx, tcx.Basin.bottomNode);
                },
                /**
                 * Recursive algorithm to fill a Basin with triangles
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext}        tcx     
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode}    node
                 * @return  {void}
                 */
                FillBasinReq: function (tcx, node) {
                    if (Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.IsShallow(tcx, node)) {
                        return;
                    }

                    Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Fill(tcx, node);
                    if (Bridge.referenceEquals(node.Prev, tcx.Basin.leftNode) && Bridge.referenceEquals(node.Next, tcx.Basin.rightNode)) {
                        return;
                    } else if (Bridge.referenceEquals(node.Prev, tcx.Basin.leftNode)) {
                        var o = Poly2Tri.Triangulation.TriangulationUtil.Orient2d(node.Point, node.Next.Point, node.Next.Next.Point);
                        if (o === FarseerPhysics.Common.Decomposition.CDT.Orientation.CW) {
                            return;
                        }
                        node = node.Next;
                    } else if (Bridge.referenceEquals(node.Next, tcx.Basin.rightNode)) {
                        var o1 = Poly2Tri.Triangulation.TriangulationUtil.Orient2d(node.Point, node.Prev.Point, node.Prev.Prev.Point);
                        if (o1 === FarseerPhysics.Common.Decomposition.CDT.Orientation.CCW) {
                            return;
                        }
                        node = node.Prev;
                    } else {
                        if (node.Prev.Point.Y < node.Next.Point.Y) {
                            node = node.Prev;
                        } else {
                            node = node.Next;
                        }
                    }
                    Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.FillBasinReq(tcx, node);
                },
                IsShallow: function (tcx, node) {
                    var height;

                    if (tcx.Basin.leftHighest) {
                        height = tcx.Basin.leftNode.Point.Y - node.Point.Y;
                    } else {
                        height = tcx.Basin.rightNode.Point.Y - node.Point.Y;
                    }
                    if (tcx.Basin.width > height) {
                        return true;
                    }
                    return false;
                },
                /**
                 * ???
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode}    node    middle node
                 * @return  {number}                                                              the angle between 3 front nodes
                 */
                HoleAngle: function (node) {
                    /* Complex plane
                      ab = cosA +i*sinA
                      ab = (ax + ay*i)(bx + by*i) = (ax*bx + ay*by) + i(ax*by-ay*bx)
                      atan2(y,x) computes the principal value of the argument function
                      applied to the complex number x+iy
                      Where x = ax*bx + ay*by
                            y = ax*by - ay*bx
                    */
                    var px = node.Point.X;
                    var py = node.Point.Y;
                    var ax = node.Next.Point.X - px;
                    var ay = node.Next.Point.Y - py;
                    var bx = node.Prev.Point.X - px;
                    var by = node.Prev.Point.Y - py;
                    return Math.atan2(ax * by - ay * bx, ax * bx + ay * by);
                },
                /**
                 * The basin angle is decided against the horizontal line [1,0]
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode}    node
                 * @return  {number}
                 */
                BasinAngle: function (node) {
                    var ax = node.Point.X - node.Next.Next.Point.X;
                    var ay = node.Point.Y - node.Next.Next.Point.Y;
                    return Math.atan2(ay, ax);
                },
                /**
                 * Adds a triangle to the advancing front to fill a hole.
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext}        tcx     
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode}    node    middle node, that is the bottom of the hole
                 * @return  {void}
                 */
                Fill: function (tcx, node) {
                    var triangle = new Poly2Tri.Triangulation.Delaunay.DelaunayTriangle(node.Prev.Point, node.Point, node.Next.Point);
                    triangle.MarkNeighbor(node.Prev.Triangle);
                    triangle.MarkNeighbor(node.Triangle);
                    tcx.Triangles.add(triangle);

                    node.Prev.Next = node.Next;
                    node.Next.Prev = node.Prev;
                    tcx.RemoveNode(node);

                    if (!Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Legalize(tcx, triangle)) {
                        tcx.MapTriangleToNodes(triangle);
                    }
                },
                /**
                 * Returns true if triangle was legalized
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext}    tcx    
                 * @param   {Poly2Tri.Triangulation.Delaunay.DelaunayTriangle}        t
                 * @return  {boolean}
                 */
                Legalize: function (tcx, t) {
                    var oi;
                    var inside;
                    var p, op;
                    var ot;

                    for (var i = 0; i < 3; i = (i + 1) | 0) {
                        if (t.EdgeIsDelaunay.getItem(i)) {
                            continue;
                        }

                        ot = t.Neighbors.getItem(i);
                        if (ot != null) {
                            p = t.Points.getItem(i);
                            op = ot.OppositePoint(t, p);
                            oi = ot.IndexOf(op);
                            if (ot.EdgeIsConstrained.getItem(oi) || ot.EdgeIsDelaunay.getItem(oi)) {
                                t.EdgeIsConstrained.setItem(i, ot.EdgeIsConstrained.getItem(oi));
                                continue;
                            }

                            inside = Poly2Tri.Triangulation.TriangulationUtil.SmartIncircle(p, t.PointCCW(p), t.PointCW(p), op);

                            if (inside) {
                                var notLegalized;

                                t.EdgeIsDelaunay.setItem(i, true);
                                ot.EdgeIsDelaunay.setItem(oi, true);

                                Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.RotateTrianglePair(t, p, ot, op);


                                notLegalized = !Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Legalize(tcx, t);

                                if (notLegalized) {
                                    tcx.MapTriangleToNodes(t);
                                }
                                notLegalized = !Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep.Legalize(tcx, ot);
                                if (notLegalized) {
                                    tcx.MapTriangleToNodes(ot);
                                }

                                t.EdgeIsDelaunay.setItem(i, false);
                                ot.EdgeIsDelaunay.setItem(oi, false);

                                return true;
                            }
                        }
                    }
                    return false;
                },
                /**
                 * Rotates a triangle pair one vertex CW
                       n2                    n2
                  P +-----+             P +-----+
                    | t  /|               |\  t |  
                    |   / |               | \   |
                  n1|  /  |n3           n1|  \  |n3
                    | /   |    after CW   |   \ |
                    |/ oT |               | oT \|
                    +-----+ oP            +-----+
                       n4                    n4
                 *
                 * @static
                 * @private
                 * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweep
                 * @param   {Poly2Tri.Triangulation.Delaunay.DelaunayTriangle}    t     
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}           p     
                 * @param   {Poly2Tri.Triangulation.Delaunay.DelaunayTriangle}    ot    
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}           op
                 * @return  {void}
                 */
                RotateTrianglePair: function (t, p, ot, op) {
                    var n1, n2, n3, n4;
                    n1 = t.NeighborCCW(p);
                    n2 = t.NeighborCW(p);
                    n3 = ot.NeighborCCW(op);
                    n4 = ot.NeighborCW(op);

                    var ce1, ce2, ce3, ce4;
                    ce1 = t.GetConstrainedEdgeCCW(p);
                    ce2 = t.GetConstrainedEdgeCW(p);
                    ce3 = ot.GetConstrainedEdgeCCW(op);
                    ce4 = ot.GetConstrainedEdgeCW(op);

                    var de1, de2, de3, de4;
                    de1 = t.GetDelaunayEdgeCCW(p);
                    de2 = t.GetDelaunayEdgeCW(p);
                    de3 = ot.GetDelaunayEdgeCCW(op);
                    de4 = ot.GetDelaunayEdgeCW(op);

                    t.Legalize(p, op);
                    ot.Legalize(op, p);

                    ot.SetDelaunayEdgeCCW(p, de1);
                    t.SetDelaunayEdgeCW(p, de2);
                    t.SetDelaunayEdgeCCW(op, de3);
                    ot.SetDelaunayEdgeCW(op, de4);

                    ot.SetConstrainedEdgeCCW(p, ce1);
                    t.SetConstrainedEdgeCW(p, ce2);
                    t.SetConstrainedEdgeCCW(op, ce3);
                    ot.SetConstrainedEdgeCW(op, ce4);

                    t.Neighbors.Clear();
                    ot.Neighbors.Clear();
                    if (n1 != null) {
                        ot.MarkNeighbor(n1);
                    }
                    if (n2 != null) {
                        t.MarkNeighbor(n2);
                    }
                    if (n3 != null) {
                        t.MarkNeighbor(n3);
                    }
                    if (n4 != null) {
                        ot.MarkNeighbor(n4);
                    }
                    t.MarkNeighbor(ot);
                }
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.TriangulationConstraint", {
        fields: {
            P: null,
            Q: null
        }
    });

    Bridge.define("Poly2Tri.Triangulation.TriangulationContext", {
        fields: {
            Points: null,
            Triangles: null,
            _stepTime: 0,
            TriangulationMode: 0,
            Triangulatable: null,
            WaitUntilNotified: false,
            Terminated: false,
            StepCount: 0,
            IsDebugEnabled: false
        },
        ctors: {
            init: function () {
                this.Points = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.TriangulationPoint)).$ctor2(200);
                this.Triangles = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.Delaunay.DelaunayTriangle)).ctor();
                this._stepTime = -1;
            },
            ctor: function () {
                this.$initialize();
                this.Terminated = false;
            }
        },
        methods: {
            Done: function () {
                this.StepCount = (this.StepCount + 1) | 0;
            },
            PrepareTriangulation: function (t) {
                this.Triangulatable = t;
                this.TriangulationMode = t.Poly2Tri$Triangulation$Triangulatable$TriangulationMode;
                t.Poly2Tri$Triangulation$Triangulatable$PrepareTriangulation(this);
            },
            Update: function (message) { },
            Clear: function () {
                this.Points.clear();
                this.Terminated = false;
                this.StepCount = 0;
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext.DTSweepBasin", {
        $kind: "nested class",
        fields: {
            bottomNode: null,
            leftHighest: false,
            leftNode: null,
            rightNode: null,
            width: 0
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext.DTSweepEdgeEvent", {
        $kind: "nested class",
        fields: {
            ConstrainedEdge: null,
            Right: false
        }
    });

    Bridge.define("Poly2Tri.Triangulation.TriangulationPoint", {
        fields: {
            X: 0,
            Y: 0,
            Edges: null
        },
        props: {
            Xf: {
                get: function () {
                    return this.X;
                },
                set: function (value) {
                    this.X = value;
                }
            },
            Yf: {
                get: function () {
                    return this.Y;
                },
                set: function (value) {
                    this.Y = value;
                }
            },
            HasEdges: {
                get: function () {
                    return this.Edges != null;
                }
            }
        },
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                this.X = x;
                this.Y = y;
            }
        },
        methods: {
            toString: function () {
                return "[" + System.Double.format(this.X) + "," + System.Double.format(this.Y) + "]";
            },
            AddEdge: function (e) {
                if (this.Edges == null) {
                    this.Edges = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepConstraint)).ctor();
                }
                this.Edges.add(e);
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Delaunay.Sweep.PointOnEdgeException", {
        inherits: [System.NotImplementedException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                System.NotImplementedException.$ctor1.call(this, message);
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Triangulatable", {
        $kind: "interface"
    });

    Bridge.define("Poly2Tri.Triangulation.Polygon.PolygonSet", {
        fields: {
            _polygons: null
        },
        props: {
            Polygons: {
                get: function () {
                    return this._polygons;
                }
            }
        },
        ctors: {
            init: function () {
                this._polygons = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.Polygon.Polygon)).ctor();
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (poly) {
                this.$initialize();
                this._polygons.add(poly);
            }
        },
        methods: {
            Add: function (p) {
                this._polygons.add(p);
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.TriangulationMode", {
        $kind: "enum",
        statics: {
            fields: {
                Unconstrained: 0,
                Constrained: 1,
                Polygon: 2
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.TriangulationUtil", {
        statics: {
            fields: {
                EPSILON: 0
            },
            ctors: {
                init: function () {
                    this.EPSILON = 1E-12;
                }
            },
            methods: {
                /**
                 * Requirements:
                 1. a,b and c form a triangle.
                 2. a and d is know to be on opposite side of bc
                 <pre><code>a
                                +
                               / \
                              /   \
                            b/     \c
                            +-------+ 
                           /    B    \  
                          /           \</code></pre>
                    Facts:
                  d has to be in area B to have a chance to be inside the circle formed by a,b and c
                  d is outside B if orient2d(a,b,d) or orient2d(c,a,d) is CW
                  This preknowledge gives us a way to optimize the incircle test
                 *
                 * @static
                 * @public
                 * @this Poly2Tri.Triangulation.TriangulationUtil
                 * @memberof Poly2Tri.Triangulation.TriangulationUtil
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}    pa    triangle point, opposite d
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}    pb    triangle point
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}    pc    triangle point
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}    pd    point opposite a
                 * @return  {boolean}                                            true if d is inside circle, false if on circle edge
                 */
                SmartIncircle: function (pa, pb, pc, pd) {
                    var pdx = pd.X;
                    var pdy = pd.Y;
                    var adx = pa.X - pdx;
                    var ady = pa.Y - pdy;
                    var bdx = pb.X - pdx;
                    var bdy = pb.Y - pdy;

                    var adxbdy = adx * bdy;
                    var bdxady = bdx * ady;
                    var oabd = adxbdy - bdxady;
                    if (oabd <= 0) {
                        return false;
                    }

                    var cdx = pc.X - pdx;
                    var cdy = pc.Y - pdy;

                    var cdxady = cdx * ady;
                    var adxcdy = adx * cdy;
                    var ocad = cdxady - adxcdy;
                    if (ocad <= 0) {
                        return false;
                    }

                    var bdxcdy = bdx * cdy;
                    var cdxbdy = cdx * bdy;

                    var alift = adx * adx + ady * ady;
                    var blift = bdx * bdx + bdy * bdy;
                    var clift = cdx * cdx + cdy * cdy;

                    var det = alift * (bdxcdy - cdxbdy) + blift * ocad + clift * oabd;

                    return det > 0;
                },
                InScanArea: function (pa, pb, pc, pd) {
                    var pdx = pd.X;
                    var pdy = pd.Y;
                    var adx = pa.X - pdx;
                    var ady = pa.Y - pdy;
                    var bdx = pb.X - pdx;
                    var bdy = pb.Y - pdy;

                    var adxbdy = adx * bdy;
                    var bdxady = bdx * ady;
                    var oabd = adxbdy - bdxady;
                    if (oabd <= 0) {
                        return false;
                    }

                    var cdx = pc.X - pdx;
                    var cdy = pc.Y - pdy;

                    var cdxady = cdx * ady;
                    var adxcdy = adx * cdy;
                    var ocad = cdxady - adxcdy;
                    if (ocad <= 0) {
                        return false;
                    }
                    return true;
                },
                /**
                 * @static
                 * @public
                 * @this Poly2Tri.Triangulation.TriangulationUtil
                 * @memberof Poly2Tri.Triangulation.TriangulationUtil
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}              pa    
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}              pb    
                 * @param   {Poly2Tri.Triangulation.TriangulationPoint}              pc
                 * @return  {FarseerPhysics.Common.Decomposition.CDT.Orientation}
                 */
                Orient2d: function (pa, pb, pc) {
                    var detleft = (pa.X - pc.X) * (pb.Y - pc.Y);
                    var detright = (pa.Y - pc.Y) * (pb.X - pc.X);
                    var val = detleft - detright;
                    if (val > -Poly2Tri.Triangulation.TriangulationUtil.EPSILON && val < Poly2Tri.Triangulation.TriangulationUtil.EPSILON) {
                        return FarseerPhysics.Common.Decomposition.CDT.Orientation.Collinear;
                    } else if (val > 0) {
                        return FarseerPhysics.Common.Decomposition.CDT.Orientation.CCW;
                    }
                    return FarseerPhysics.Common.Decomposition.CDT.Orientation.CW;
                }
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Util.FixedArray3$1", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(T)],
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (Poly2Tri.Triangulation.Util.FixedArray3$1(T))(); }
            }
        },
        fields: {
            _0: Bridge.getDefaultValue(T),
            _1: Bridge.getDefaultValue(T),
            _2: Bridge.getDefaultValue(T)
        },
        alias: ["GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getItem: function (index) {
                switch (index) {
                    case 0: 
                        return this._0;
                    case 1: 
                        return this._1;
                    case 2: 
                        return this._2;
                    default: 
                        throw new System.IndexOutOfRangeException.ctor();
                }
            },
            setItem: function (index, value) {
                switch (index) {
                    case 0: 
                        this._0 = value;
                        break;
                    case 1: 
                        this._1 = value;
                        break;
                    case 2: 
                        this._2 = value;
                        break;
                    default: 
                        throw new System.IndexOutOfRangeException.ctor();
                }
            },
            GetEnumerator: function () {
                return Bridge.getEnumerator(this.Enumerate(), T);
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return this.GetEnumerator();
            },
            Contains: function (value) {
                for (var i = 0; i < 3; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this.getItem(i), value)) {
                        return true;
                    }
                }
                return false;
            },
            IndexOf: function (value) {
                for (var i = 0; i < 3; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this.getItem(i), value)) {
                        return i;
                    }
                }
                return -1;
            },
            Clear: function () {
                this._0 = (this._1 = (this._2 = null));
            },
            Clear$1: function (value) {
                for (var i = 0; i < 3; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this.getItem(i), value)) {
                        this.setItem(i, null);
                    }
                }
            },
            Enumerate: function () {
                return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < 3 ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = this.getItem(i);
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            getHashCode: function () {
                var h = Bridge.addHash([3625853963, this._0, this._1, this._2]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Poly2Tri.Triangulation.Util.FixedArray3$1(T))) {
                    return false;
                }
                return Bridge.equals(this._0, o._0) && Bridge.equals(this._1, o._1) && Bridge.equals(this._2, o._2);
            },
            $clone: function (to) {
                var s = to || new (Poly2Tri.Triangulation.Util.FixedArray3$1(T))();
                s._0 = this._0;
                s._1 = this._1;
                s._2 = this._2;
                return s;
            }
        }
    }; });

    Bridge.define("Poly2Tri.Triangulation.Util.FixedBitArray3", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Boolean)],
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Poly2Tri.Triangulation.Util.FixedBitArray3(); }
            }
        },
        fields: {
            _0: false,
            _1: false,
            _2: false
        },
        alias: ["GetEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Boolean$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getItem: function (index) {
                switch (index) {
                    case 0: 
                        return this._0;
                    case 1: 
                        return this._1;
                    case 2: 
                        return this._2;
                    default: 
                        throw new System.IndexOutOfRangeException.ctor();
                }
            },
            setItem: function (index, value) {
                switch (index) {
                    case 0: 
                        this._0 = value;
                        break;
                    case 1: 
                        this._1 = value;
                        break;
                    case 2: 
                        this._2 = value;
                        break;
                    default: 
                        throw new System.IndexOutOfRangeException.ctor();
                }
            },
            GetEnumerator: function () {
                return Bridge.getEnumerator(this.Enumerate(), System.Boolean);
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return this.GetEnumerator();
            },
            Contains: function (value) {
                for (var i = 0; i < 3; i = (i + 1) | 0) {
                    if (this.getItem(i) === value) {
                        return true;
                    }
                }
                return false;
            },
            IndexOf: function (value) {
                for (var i = 0; i < 3; i = (i + 1) | 0) {
                    if (this.getItem(i) === value) {
                        return i;
                    }
                }
                return -1;
            },
            Clear: function () {
                this._0 = (this._1 = (this._2 = false));
            },
            Clear$1: function (value) {
                for (var i = 0; i < 3; i = (i + 1) | 0) {
                    if (this.getItem(i) === value) {
                        this.setItem(i, false);
                    }
                }
            },
            Enumerate: function () {
                return new (Bridge.GeneratorEnumerable$1(System.Boolean))(Bridge.fn.bind(this, function ()  {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Boolean))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < 3 ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 5;
                                        continue;
                                    }
                                    case 2: {
                                        $enumerator.current = this.getItem(i);
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 5: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }));
            },
            getHashCode: function () {
                var h = Bridge.addHash([5290348900, this._0, this._1, this._2]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Poly2Tri.Triangulation.Util.FixedBitArray3)) {
                    return false;
                }
                return Bridge.equals(this._0, o._0) && Bridge.equals(this._1, o._1) && Bridge.equals(this._2, o._2);
            },
            $clone: function (to) {
                var s = to || new Poly2Tri.Triangulation.Util.FixedBitArray3();
                s._0 = this._0;
                s._1 = this._1;
                s._2 = this._2;
                return s;
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Util.PointGenerator", {
        statics: {
            fields: {
                RNG: null
            },
            ctors: {
                init: function () {
                    this.RNG = new System.Random.ctor();
                }
            },
            methods: {
                UniformDistribution: function (n, scale) {
                    var points = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.TriangulationPoint)).ctor();
                    for (var i = 0; i < n; i = (i + 1) | 0) {
                        points.add(new Poly2Tri.Triangulation.TriangulationPoint(scale * (0.5 - Poly2Tri.Triangulation.Util.PointGenerator.RNG.NextDouble()), scale * (0.5 - Poly2Tri.Triangulation.Util.PointGenerator.RNG.NextDouble())));
                    }
                    return points;
                },
                UniformGrid: function (n, scale) {
                    var x = 0;
                    var size = scale / n;
                    var halfScale = 0.5 * scale;

                    var points = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.TriangulationPoint)).ctor();
                    for (var i = 0; i < ((n + 1) | 0); i = (i + 1) | 0) {
                        x = halfScale - i * size;
                        for (var j = 0; j < ((n + 1) | 0); j = (j + 1) | 0) {
                            points.add(new Poly2Tri.Triangulation.TriangulationPoint(x, halfScale - j * size));
                        }
                    }
                    return points;
                }
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Util.PolygonGenerator", {
        statics: {
            fields: {
                RNG: null,
                PI_2: 0
            },
            ctors: {
                init: function () {
                    this.RNG = new System.Random.ctor();
                    this.PI_2 = 6.2831853071795862;
                }
            },
            methods: {
                RandomCircleSweep: function (scale, vertexCount) {
                    var point;
                    var points;
                    var radius = scale / 4;

                    points = System.Array.init(vertexCount, null, Poly2Tri.Triangulation.Polygon.PolygonPoint);
                    for (var i = 0; i < vertexCount; i = (i + 1) | 0) {
                        do {
                            if (i % 250 === 0) {
                                radius += scale / 2 * (0.5 - Poly2Tri.Triangulation.Util.PolygonGenerator.RNG.NextDouble());
                            } else if (i % 50 === 0) {
                                radius += scale / 5 * (0.5 - Poly2Tri.Triangulation.Util.PolygonGenerator.RNG.NextDouble());
                            } else {
                                radius += 25 * scale / vertexCount * (0.5 - Poly2Tri.Triangulation.Util.PolygonGenerator.RNG.NextDouble());
                            }
                            radius = radius > scale / 2 ? scale / 2 : radius;
                            radius = radius < scale / 10 ? scale / 10 : radius;
                        } while (radius < scale / 10 || radius > scale / 2);
                        point = new Poly2Tri.Triangulation.Polygon.PolygonPoint(radius * Math.cos((Poly2Tri.Triangulation.Util.PolygonGenerator.PI_2 * i) / vertexCount), radius * Math.sin((Poly2Tri.Triangulation.Util.PolygonGenerator.PI_2 * i) / vertexCount));
                        points[System.Array.index(i, points)] = point;
                    }
                    return new Poly2Tri.Triangulation.Polygon.Polygon.$ctor2(points);
                },
                RandomCircleSweep2: function (scale, vertexCount) {
                    var point;
                    var points;
                    var radius = scale / 4;

                    points = System.Array.init(vertexCount, null, Poly2Tri.Triangulation.Polygon.PolygonPoint);
                    for (var i = 0; i < vertexCount; i = (i + 1) | 0) {
                        do {
                            radius += scale / 5 * (0.5 - Poly2Tri.Triangulation.Util.PolygonGenerator.RNG.NextDouble());
                            radius = radius > scale / 2 ? scale / 2 : radius;
                            radius = radius < scale / 10 ? scale / 10 : radius;
                        } while (radius < scale / 10 || radius > scale / 2);
                        point = new Poly2Tri.Triangulation.Polygon.PolygonPoint(radius * Math.cos((Poly2Tri.Triangulation.Util.PolygonGenerator.PI_2 * i) / vertexCount), radius * Math.sin((Poly2Tri.Triangulation.Util.PolygonGenerator.PI_2 * i) / vertexCount));
                        points[System.Array.index(i, points)] = point;
                    }
                    return new Poly2Tri.Triangulation.Polygon.Polygon.$ctor2(points);
                }
            }
        }
    });

    Bridge.define("QuadTree$1", function (T) { return {
        statics: {
            methods: {
                /**
                 * tests if ray intersects AABB
                 *
                 * @static
                 * @public
                 * @this QuadTree$1
                 * @memberof QuadTree$1
                 * @param   {FarseerPhysics.Collision.AABB}      aabb    
                 * @param   {Microsoft.Xna.Framework.Vector2}    p1      
                 * @param   {Microsoft.Xna.Framework.Vector2}    p2
                 * @return  {boolean}
                 */
                RayCastAABB: function (aabb, p1, p2) {
                    p1 = {v:p1};
                    p2 = {v:p2};
                    var segmentAABB = new FarseerPhysics.Collision.AABB.ctor();
                    {
                        Microsoft.Xna.Framework.Vector2.Min$1(p1, p2, Bridge.ref(segmentAABB, "LowerBound"));
                        Microsoft.Xna.Framework.Vector2.Max$1(p1, p2, Bridge.ref(segmentAABB, "UpperBound"));
                    }
                    if (!FarseerPhysics.Collision.AABB.TestOverlap(aabb.$clone(), segmentAABB.$clone())) {
                        return false;
                    }

                    var rayDir = Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.v.$clone(), p1.v.$clone());
                    var rayPos = p1.v.$clone();

                    var norm = new Microsoft.Xna.Framework.Vector2.$ctor2(-rayDir.Y, rayDir.X);
                    if (norm.Length() === 0.0) {
                        return true;
                    }
                    norm.Normalize();

                    var dPos = Microsoft.Xna.Framework.Vector2.Dot(rayPos.$clone(), norm.$clone());

                    var verts = aabb.GetVertices();
                    var d0 = Microsoft.Xna.Framework.Vector2.Dot(verts[System.Array.index(0, verts)].$clone(), norm.$clone()) - dPos;
                    for (var i = 1; i < 4; i = (i + 1) | 0) {
                        var d = Microsoft.Xna.Framework.Vector2.Dot(verts[System.Array.index(i, verts)].$clone(), norm.$clone()) - dPos;
                        if (Bridge.Int.sign(d) !== Bridge.Int.sign(d0)) {
                            return true;
                        }
                    }

                    return false;
                }
            }
        },
        fields: {
            MaxBucket: 0,
            MaxDepth: 0,
            Nodes: null,
            Span: null,
            SubTrees: null
        },
        props: {
            IsPartitioned: {
                get: function () {
                    return this.SubTrees != null;
                }
            }
        },
        ctors: {
            init: function () {
                this.Span = new FarseerPhysics.Collision.AABB();
            },
            ctor: function (span, maxbucket, maxdepth) {
                this.$initialize();
                this.Span = span.$clone();
                this.Nodes = new (System.Collections.Generic.List$1(Element$1(T))).ctor();

                this.MaxBucket = maxbucket;
                this.MaxDepth = maxdepth;
            }
        },
        methods: {
            /**
             * returns the quadrant of span that entirely contains test. if none, return 0.
             *
             * @instance
             * @private
             * @this QuadTree$1
             * @memberof QuadTree$1
             * @param   {FarseerPhysics.Collision.AABB}    span    
             * @param   {FarseerPhysics.Collision.AABB}    test
             * @return  {number}
             */
            Partition: function (span, test) {
                test = {v:test};
                if (span.Q1.Contains(test)) {
                    return 1;
                }
                if (span.Q2.Contains(test)) {
                    return 2;
                }
                if (span.Q3.Contains(test)) {
                    return 3;
                }
                if (span.Q4.Contains(test)) {
                    return 4;
                }

                return 0;
            },
            AddNode: function (node) {
                var $t;
                if (!this.IsPartitioned) {
                    if (this.Nodes.Count >= this.MaxBucket && this.MaxDepth > 0) {
                        this.Nodes.add(node);

                        this.SubTrees = System.Array.init(4, null, QuadTree$1(T));
                        this.SubTrees[System.Array.index(0, this.SubTrees)] = new (QuadTree$1(T))(this.Span.Q1.$clone(), this.MaxBucket, ((this.MaxDepth - 1) | 0));
                        this.SubTrees[System.Array.index(1, this.SubTrees)] = new (QuadTree$1(T))(this.Span.Q2.$clone(), this.MaxBucket, ((this.MaxDepth - 1) | 0));
                        this.SubTrees[System.Array.index(2, this.SubTrees)] = new (QuadTree$1(T))(this.Span.Q3.$clone(), this.MaxBucket, ((this.MaxDepth - 1) | 0));
                        this.SubTrees[System.Array.index(3, this.SubTrees)] = new (QuadTree$1(T))(this.Span.Q4.$clone(), this.MaxBucket, ((this.MaxDepth - 1) | 0));

                        var remNodes = new (System.Collections.Generic.List$1(Element$1(T))).ctor();

                        $t = Bridge.getEnumerator(this.Nodes);
                        try {
                            while ($t.moveNext()) {
                                var n = $t.Current;
                                switch (this.Partition(this.Span.$clone(), n.Span.$clone())) {
                                    case 1: 
                                        this.SubTrees[System.Array.index(0, this.SubTrees)].AddNode(n);
                                        break;
                                    case 2: 
                                        this.SubTrees[System.Array.index(1, this.SubTrees)].AddNode(n);
                                        break;
                                    case 3: 
                                        this.SubTrees[System.Array.index(2, this.SubTrees)].AddNode(n);
                                        break;
                                    case 4: 
                                        this.SubTrees[System.Array.index(3, this.SubTrees)].AddNode(n);
                                        break;
                                    default: 
                                        n.Parent = this;
                                        remNodes.add(n);
                                        break;
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                        this.Nodes = remNodes;
                    } else {
                        node.Parent = this;
                        this.Nodes.add(node);
                    }
                } else {
                    switch (this.Partition(this.Span.$clone(), node.Span.$clone())) {
                        case 1: 
                            this.SubTrees[System.Array.index(0, this.SubTrees)].AddNode(node);
                            break;
                        case 2: 
                            this.SubTrees[System.Array.index(1, this.SubTrees)].AddNode(node);
                            break;
                        case 3: 
                            this.SubTrees[System.Array.index(2, this.SubTrees)].AddNode(node);
                            break;
                        case 4: 
                            this.SubTrees[System.Array.index(3, this.SubTrees)].AddNode(node);
                            break;
                        default: 
                            node.Parent = this;
                            this.Nodes.add(node);
                            break;
                    }
                }
            },
            QueryAABB: function (callback, searchR) {
                var $t, $t1;
                var stack = new (System.Collections.Generic.Stack$1(QuadTree$1(T))).ctor();
                stack.Push(this);

                while (stack.Count > 0) {
                    var qt = stack.Pop();
                    if (!FarseerPhysics.Collision.AABB.TestOverlap$1(searchR, Bridge.ref(qt, "Span"))) {
                        continue;
                    }

                    $t = Bridge.getEnumerator(qt.Nodes);
                    try {
                        while ($t.moveNext()) {
                            var n = $t.Current;
                            if (FarseerPhysics.Collision.AABB.TestOverlap$1(searchR, Bridge.ref(n, "Span"))) {
                                if (!callback(n)) {
                                    return;
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    if (qt.IsPartitioned) {
                        $t1 = Bridge.getEnumerator(qt.SubTrees);
                        try {
                            while ($t1.moveNext()) {
                                var st = $t1.Current;
                                stack.Push(st);
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }}
                }
            },
            RayCast: function (callback, input) {
                var $t, $t1;
                var stack = new (System.Collections.Generic.Stack$1(QuadTree$1(T))).ctor();
                stack.Push(this);

                var maxFraction = input.v.MaxFraction;
                var p1 = input.v.Point1.$clone();
                var p2 = Microsoft.Xna.Framework.Vector2.op_Addition(p1.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$1((Microsoft.Xna.Framework.Vector2.op_Subtraction(input.v.Point2.$clone(), input.v.Point1.$clone())), maxFraction));

                while (stack.Count > 0) {
                    var qt = stack.Pop();

                    if (!QuadTree$1(T).RayCastAABB(qt.Span.$clone(), p1.$clone(), p2.$clone())) {
                        continue;
                    }

                    $t = Bridge.getEnumerator(qt.Nodes);
                    try {
                        while ($t.moveNext()) {
                            var n = $t.Current;
                            if (!QuadTree$1(T).RayCastAABB(n.Span.$clone(), p1.$clone(), p2.$clone())) {
                                continue;
                            }

                            var subInput = new FarseerPhysics.Collision.RayCastInput();
                            subInput.Point1 = input.v.Point1.$clone();
                            subInput.Point2 = input.v.Point2.$clone();
                            subInput.MaxFraction = maxFraction;

                            var value = callback(subInput.$clone(), n);
                            if (value === 0.0) {
                                return;
                            }

                            if (value <= 0.0) {
                                continue;
                            }

                            maxFraction = value;
                            p2 = Microsoft.Xna.Framework.Vector2.op_Addition(p1.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$1((Microsoft.Xna.Framework.Vector2.op_Subtraction(input.v.Point2.$clone(), input.v.Point1.$clone())), maxFraction));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }if (this.IsPartitioned) {
                        $t1 = Bridge.getEnumerator(qt.SubTrees);
                        try {
                            while ($t1.moveNext()) {
                                var st = $t1.Current;
                                stack.Push(st);
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }}
                }
            },
            GetAllNodesR: function (nodes) {
                var $t;
                nodes.v.AddRange(this.Nodes);

                if (this.IsPartitioned) {
                    $t = Bridge.getEnumerator(this.SubTrees);
                    try {
                        while ($t.moveNext()) {
                            var st = $t.Current;
                            st.GetAllNodesR(nodes);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }}
            },
            RemoveNode: function (node) {
                node.Parent.Nodes.remove(node);
            },
            Reconstruct: function () {
                var allNodes = { v : new (System.Collections.Generic.List$1(Element$1(T))).ctor() };
                this.GetAllNodesR(allNodes);

                this.Clear();

                allNodes.v.ForEach(Bridge.fn.cacheBind(this, this.AddNode));
            },
            Clear: function () {
                this.Nodes.clear();
                this.SubTrees = null;
            }
        }
    }; });

    /**
     * The broad-phase is used for computing pairs and performing volume queries and ray casts.
     This broad-phase does not persist pairs. Instead, this reports potentially new pairs.
     It is up to the client to consume the new pairs and to track subsequent overlap.
     *
     * @public
     * @class FarseerPhysics.Collision.DynamicTreeBroadPhase
     * @implements  FarseerPhysics.Collision.IBroadPhase
     */
    Bridge.define("FarseerPhysics.Collision.DynamicTreeBroadPhase", {
        inherits: [FarseerPhysics.Collision.IBroadPhase],
        fields: {
            _moveBuffer: null,
            _moveCapacity: 0,
            _moveCount: 0,
            _pairBuffer: null,
            _pairCapacity: 0,
            _pairCount: 0,
            _proxyCount: 0,
            _queryCallback: null,
            _queryProxyId: 0,
            _tree: null
        },
        props: {
            /**
             * Get the number of proxies.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @function ProxyCount
             * @type number
             */
            ProxyCount: {
                get: function () {
                    return this._proxyCount;
                }
            }
        },
        alias: [
            "ProxyCount", "FarseerPhysics$Collision$IBroadPhase$ProxyCount",
            "AddProxy", "FarseerPhysics$Collision$IBroadPhase$AddProxy",
            "RemoveProxy", "FarseerPhysics$Collision$IBroadPhase$RemoveProxy",
            "MoveProxy", "FarseerPhysics$Collision$IBroadPhase$MoveProxy",
            "GetFatAABB", "FarseerPhysics$Collision$IBroadPhase$GetFatAABB",
            "GetProxy", "FarseerPhysics$Collision$IBroadPhase$GetProxy",
            "TestOverlap", "FarseerPhysics$Collision$IBroadPhase$TestOverlap",
            "UpdatePairs", "FarseerPhysics$Collision$IBroadPhase$UpdatePairs",
            "Query", "FarseerPhysics$Collision$IBroadPhase$Query",
            "RayCast", "FarseerPhysics$Collision$IBroadPhase$RayCast",
            "TouchProxy", "FarseerPhysics$Collision$IBroadPhase$TouchProxy"
        ],
        ctors: {
            init: function () {
                this._tree = new (FarseerPhysics.Collision.DynamicTree$1(FarseerPhysics.Dynamics.FixtureProxy))();
            },
            ctor: function () {
                this.$initialize();
                this._queryCallback = Bridge.fn.cacheBind(this, this.QueryCallback);

                this._pairCapacity = 16;
                this._pairBuffer = System.Array.init(this._pairCapacity, function (){
                    return new FarseerPhysics.Collision.Pair();
                }, FarseerPhysics.Collision.Pair);

                this._moveCapacity = 16;
                this._moveBuffer = System.Array.init(this._moveCapacity, 0, System.Int32);
            }
        },
        methods: {
            /**
             * Create a proxy with an initial AABB. Pairs are not reported until
             UpdatePairs is called.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @memberof FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @param   {FarseerPhysics.Dynamics.FixtureProxy}    proxy    The user data.
             * @return  {number}
             */
            AddProxy: function (proxy) {
                var proxyId = this._tree.AddProxy(Bridge.ref(proxy.v, "AABB"), proxy.v.$clone());
                this._proxyCount = (this._proxyCount + 1) | 0;
                this.BufferMove(proxyId);
                return proxyId;
            },
            /**
             * Destroy a proxy. It is up to the client to remove any pairs.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @memberof FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @param   {number}    proxyId    The proxy id.
             * @return  {void}
             */
            RemoveProxy: function (proxyId) {
                this.UnBufferMove(proxyId);
                this._proxyCount = (this._proxyCount - 1) | 0;
                this._tree.RemoveProxy(proxyId);
            },
            MoveProxy: function (proxyId, aabb, displacement) {
                var buffer = this._tree.MoveProxy(proxyId, aabb, displacement.$clone());
                if (buffer) {
                    this.BufferMove(proxyId);
                }
            },
            /**
             * Get the AABB for a proxy.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @memberof FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @param   {number}                           proxyId    The proxy id.
             * @param   {FarseerPhysics.Collision.AABB}    aabb       The aabb.
             * @return  {void}
             */
            GetFatAABB: function (proxyId, aabb) {
                this._tree.GetFatAABB(proxyId, aabb);
            },
            /**
             * Get user data from a proxy. Returns null if the id is invalid.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @memberof FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @param   {number}                                  proxyId    The proxy id.
             * @return  {FarseerPhysics.Dynamics.FixtureProxy}
             */
            GetProxy: function (proxyId) {
                return this._tree.GetUserData(proxyId);
            },
            /**
             * Test overlap of fat AABBs.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @memberof FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @param   {number}     proxyIdA    The proxy id A.
             * @param   {number}     proxyIdB    The proxy id B.
             * @return  {boolean}
             */
            TestOverlap: function (proxyIdA, proxyIdB) {
                var aabbA = { v : new FarseerPhysics.Collision.AABB() }, aabbB = { v : new FarseerPhysics.Collision.AABB() };
                this._tree.GetFatAABB(proxyIdA, aabbA);
                this._tree.GetFatAABB(proxyIdB, aabbB);
                return FarseerPhysics.Collision.AABB.TestOverlap$1(aabbA, aabbB);
            },
            /**
             * Update the pairs. This results in pair callbacks. This can only add pairs.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @memberof FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @param   {FarseerPhysics.Dynamics.BroadphaseDelegate}    callback    The callback.
             * @return  {void}
             */
            UpdatePairs: function (callback) {
                this._pairCount = 0;

                for (var j = 0; j < this._moveCount; j = (j + 1) | 0) {
                    this._queryProxyId = this._moveBuffer[System.Array.index(j, this._moveBuffer)];
                    if (this._queryProxyId === -1) {
                        continue;
                    }

                    var fatAABB = { v : new FarseerPhysics.Collision.AABB() };
                    this._tree.GetFatAABB(this._queryProxyId, fatAABB);

                    this._tree.Query(this._queryCallback, fatAABB);
                }

                this._moveCount = 0;

                System.Array.sort(this._pairBuffer, 0, this._pairCount);

                var i = 0;
                while (i < this._pairCount) {
                    var primaryPair = this._pairBuffer[System.Array.index(i, this._pairBuffer)].$clone();
                    var userDataA = { v : this._tree.GetUserData(primaryPair.ProxyIdA).$clone() };
                    var userDataB = { v : this._tree.GetUserData(primaryPair.ProxyIdB).$clone() };

                    callback(userDataA, userDataB);
                    i = (i + 1) | 0;

                    while (i < this._pairCount) {
                        var pair = this._pairBuffer[System.Array.index(i, this._pairBuffer)].$clone();
                        if (pair.ProxyIdA !== primaryPair.ProxyIdA || pair.ProxyIdB !== primaryPair.ProxyIdB) {
                            break;
                        }
                        i = (i + 1) | 0;
                    }
                }

                this._tree.Rebalance(4);
            },
            /**
             * Query an AABB for overlapping proxies. The callback class
             is called for each proxy that overlaps the supplied AABB.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @memberof FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @param   {System.Func}                      callback    The callback.
             * @param   {FarseerPhysics.Collision.AABB}    aabb        The aabb.
             * @return  {void}
             */
            Query: function (callback, aabb) {
                this._tree.Query(callback, aabb);
            },
            /**
             * Ray-cast against the proxies in the tree. This relies on the callback
             to perform a exact ray-cast in the case were the proxy contains a shape.
             The callback also performs the any collision filtering. This has performance
             roughly equal to k * log(n), where k is the number of collisions and n is the
             number of proxies in the tree.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @memberof FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @param   {System.Func}                              callback    A callback class that is called for each proxy that is hit by the ray.
             * @param   {FarseerPhysics.Collision.RayCastInput}    input       The ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).
             * @return  {void}
             */
            RayCast: function (callback, input) {
                this._tree.RayCast(callback, input);
            },
            TouchProxy: function (proxyId) {
                this.BufferMove(proxyId);
            },
            /**
             * Compute the height of the embedded tree.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @memberof FarseerPhysics.Collision.DynamicTreeBroadPhase
             * @return  {number}
             */
            ComputeHeight: function () {
                return this._tree.ComputeHeight();
            },
            BufferMove: function (proxyId) {
                if (this._moveCount === this._moveCapacity) {
                    var oldBuffer = this._moveBuffer;
                    this._moveCapacity = Bridge.Int.mul(this._moveCapacity, 2);
                    this._moveBuffer = System.Array.init(this._moveCapacity, 0, System.Int32);
                    System.Array.copy(oldBuffer, 0, this._moveBuffer, 0, this._moveCount);
                }

                this._moveBuffer[System.Array.index(this._moveCount, this._moveBuffer)] = proxyId;
                this._moveCount = (this._moveCount + 1) | 0;
            },
            UnBufferMove: function (proxyId) {
                for (var i = 0; i < this._moveCount; i = (i + 1) | 0) {
                    if (this._moveBuffer[System.Array.index(i, this._moveBuffer)] === proxyId) {
                        this._moveBuffer[System.Array.index(i, this._moveBuffer)] = -1;
                        return;
                    }
                }
            },
            QueryCallback: function (proxyId) {
                if (proxyId === this._queryProxyId) {
                    return true;
                }

                if (this._pairCount === this._pairCapacity) {
                    var oldBuffer = this._pairBuffer;
                    this._pairCapacity = Bridge.Int.mul(this._pairCapacity, 2);
                    this._pairBuffer = System.Array.init(this._pairCapacity, function (){
                        return new FarseerPhysics.Collision.Pair();
                    }, FarseerPhysics.Collision.Pair);
                    System.Array.copy(oldBuffer, 0, this._pairBuffer, 0, this._pairCount);
                }

                this._pairBuffer[System.Array.index(this._pairCount, this._pairBuffer)].ProxyIdA = Math.min(proxyId, this._queryProxyId);
                this._pairBuffer[System.Array.index(this._pairCount, this._pairBuffer)].ProxyIdB = Math.max(proxyId, this._queryProxyId);
                this._pairCount = (this._pairCount + 1) | 0;

                return true;
            }
        }
    });

    Bridge.define("FarseerPhysics.Collision.Shapes.CircleShape", {
        inherits: [FarseerPhysics.Collision.Shapes.Shape],
        fields: {
            _position: null
        },
        props: {
            ChildCount: {
                get: function () {
                    return 1;
                }
            },
            Position: {
                get: function () {
                    return this._position.$clone();
                },
                set: function (value) {
                    this._position = value.$clone();
                    this.ComputeProperties();
                }
            }
        },
        ctors: {
            init: function () {
                this._position = new Microsoft.Xna.Framework.Vector2();
            },
            $ctor1: function (radius, density) {
                this.$initialize();
                FarseerPhysics.Collision.Shapes.Shape.ctor.call(this, density);
                this.ShapeType = FarseerPhysics.Collision.Shapes.ShapeType.Circle;
                this._radius = radius;
                this._position = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                this.ComputeProperties();
            },
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Collision.Shapes.Shape.ctor.call(this, 0);
                this.ShapeType = FarseerPhysics.Collision.Shapes.ShapeType.Circle;
                this._radius = 0.0;
                this._position = Microsoft.Xna.Framework.Vector2.Zero.$clone();
            }
        },
        methods: {
            Clone: function () {
                var shape = new FarseerPhysics.Collision.Shapes.CircleShape.ctor();
                shape._radius = this.Radius;
                shape._density = this._density;
                shape._position = this._position.$clone();
                shape.ShapeType = this.ShapeType;
                shape.MassData = this.MassData.$clone();
                return shape;
            },
            /**
             * Test a point for containment in this shape. This only works for convex shapes.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.CircleShape
             * @memberof FarseerPhysics.Collision.Shapes.CircleShape
             * @param   {FarseerPhysics.Common.Transform}    transform    The shape world transform.
             * @param   {Microsoft.Xna.Framework.Vector2}    point        a point in world coordinates.
             * @return  {boolean}                                         True if the point is inside the shape
             */
            TestPoint: function (transform, point) {
                var center = Microsoft.Xna.Framework.Vector2.op_Addition(transform.v.Position.$clone(), FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(transform.v, "R"), this.Position.$clone()));
                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(point.v.$clone(), center.$clone());
                return Microsoft.Xna.Framework.Vector2.Dot(d.$clone(), d.$clone()) <= this.Radius * this.Radius;
            },
            /**
             * Cast a ray against a child shape.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.CircleShape
             * @memberof FarseerPhysics.Collision.Shapes.CircleShape
             * @param   {FarseerPhysics.Collision.RayCastOutput}    output        The ray-cast results.
             * @param   {FarseerPhysics.Collision.RayCastInput}     input         The ray-cast input parameters.
             * @param   {FarseerPhysics.Common.Transform}           transform     The transform to be applied to the shape.
             * @param   {number}                                    childIndex    The child shape index.
             * @return  {boolean}                                                 True if the ray-cast hits the shape
             */
            RayCast: function (output, input, transform, childIndex) {

                output.v = new FarseerPhysics.Collision.RayCastOutput();

                var position = Microsoft.Xna.Framework.Vector2.op_Addition(transform.v.Position.$clone(), FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(transform.v, "R"), this.Position.$clone()));
                var s = Microsoft.Xna.Framework.Vector2.op_Subtraction(input.v.Point1.$clone(), position.$clone());
                var b = Microsoft.Xna.Framework.Vector2.Dot(s.$clone(), s.$clone()) - this.Radius * this.Radius;

                var r = Microsoft.Xna.Framework.Vector2.op_Subtraction(input.v.Point2.$clone(), input.v.Point1.$clone());
                var c = Microsoft.Xna.Framework.Vector2.Dot(s.$clone(), r.$clone());
                var rr = Microsoft.Xna.Framework.Vector2.Dot(r.$clone(), r.$clone());
                var sigma = c * c - rr * b;

                if (sigma < 0.0 || rr < FarseerPhysics.Settings.Epsilon) {
                    return false;
                }

                var a = -(c + Math.sqrt(sigma));

                if (0.0 <= a && a <= input.v.MaxFraction * rr) {
                    a /= rr;
                    output.v.Fraction = a;
                    var norm = (Microsoft.Xna.Framework.Vector2.op_Addition(s.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(a, r.$clone())));
                    norm.Normalize();
                    output.v.Normal = norm.$clone();
                    return true;
                }

                return false;
            },
            /**
             * Given a transform, compute the associated axis aligned bounding box for a child shape.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.CircleShape
             * @memberof FarseerPhysics.Collision.Shapes.CircleShape
             * @param   {FarseerPhysics.Collision.AABB}      aabb          The aabb results.
             * @param   {FarseerPhysics.Common.Transform}    transform     The world transform of the shape.
             * @param   {number}                             childIndex    The child shape index.
             * @return  {void}
             */
            ComputeAABB: function (aabb, transform, childIndex) {
                var p = Microsoft.Xna.Framework.Vector2.op_Addition(transform.v.Position.$clone(), FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(transform.v, "R"), this.Position.$clone()));
                aabb.v.LowerBound = new Microsoft.Xna.Framework.Vector2.$ctor2(p.X - this.Radius, p.Y - this.Radius);
                aabb.v.UpperBound = new Microsoft.Xna.Framework.Vector2.$ctor2(p.X + this.Radius, p.Y + this.Radius);
            },
            /**
             * Compute the mass properties of this shape using its dimensions and density.
             The inertia tensor is computed about the local origin, not the centroid.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.CircleShape
             * @memberof FarseerPhysics.Collision.Shapes.CircleShape
             * @return  {void}
             */
            ComputeProperties: function () {
                var area = FarseerPhysics.Settings.Pi * this.Radius * this.Radius;
                this.MassData.Area = area;
                this.MassData.Mass = this.Density * area;
                this.MassData.Centroid = this.Position.$clone();

                this.MassData.Inertia = this.MassData.Mass * (0.5 * this.Radius * this.Radius + Microsoft.Xna.Framework.Vector2.Dot(this.Position.$clone(), this.Position.$clone()));
            },
            CompareTo$1: function (shape) {
                return (this.Radius === shape.Radius && Microsoft.Xna.Framework.Vector2.op_Equality(this.Position.$clone(), shape.Position.$clone()));
            },
            ComputeSubmergedArea: function (normal, offset, xf, sc) {
                xf = {v:xf};
                sc.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();

                var p = FarseerPhysics.Common.MathUtils.Multiply$2(xf, this.Position.$clone());
                var l = -(Microsoft.Xna.Framework.Vector2.Dot(normal.$clone(), p.$clone()) - offset);
                if (l < -this.Radius + FarseerPhysics.Settings.Epsilon) {
                    return 0;
                }
                if (l > this.Radius) {
                    sc.v = p.$clone();
                    return FarseerPhysics.Settings.Pi * this.Radius * this.Radius;
                }

                var r2 = this.Radius * this.Radius;
                var l2 = l * l;
                var area = r2 * ((Math.asin(l / this.Radius) + 1.57079637) + l * Math.sqrt(r2 - l2));
                var com = -0.6666667 * Math.pow(r2 - l2, 1.5) / area;

                sc.v.X = p.X + normal.X * com;
                sc.v.Y = p.Y + normal.Y * com;

                return area;
            }
        }
    });

    /**
     * A line segment (edge) Shape. These can be connected in chains or loops
     to other edge Shapes. The connectivity information is used to ensure
     correct contact normals.
     *
     * @public
     * @class FarseerPhysics.Collision.Shapes.EdgeShape
     * @augments FarseerPhysics.Collision.Shapes.Shape
     */
    Bridge.define("FarseerPhysics.Collision.Shapes.EdgeShape", {
        inherits: [FarseerPhysics.Collision.Shapes.Shape],
        fields: {
            HasVertex0: false,
            HasVertex3: false,
            /**
             * Optional adjacent vertices. These are used for smooth collision.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Shapes.EdgeShape
             * @type Microsoft.Xna.Framework.Vector2
             */
            Vertex0: null,
            /**
             * Optional adjacent vertices. These are used for smooth collision.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Shapes.EdgeShape
             * @type Microsoft.Xna.Framework.Vector2
             */
            Vertex3: null,
            /**
             * Edge start vertex
             *
             * @instance
             * @private
             * @memberof FarseerPhysics.Collision.Shapes.EdgeShape
             * @type Microsoft.Xna.Framework.Vector2
             */
            _vertex1: null,
            /**
             * Edge end vertex
             *
             * @instance
             * @private
             * @memberof FarseerPhysics.Collision.Shapes.EdgeShape
             * @type Microsoft.Xna.Framework.Vector2
             */
            _vertex2: null
        },
        props: {
            ChildCount: {
                get: function () {
                    return 1;
                }
            },
            /**
             * These are the edge vertices
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Shapes.EdgeShape
             * @function Vertex1
             * @type Microsoft.Xna.Framework.Vector2
             */
            Vertex1: {
                get: function () {
                    return this._vertex1.$clone();
                },
                set: function (value) {
                    this._vertex1 = value.$clone();
                    this.ComputeProperties();
                }
            },
            /**
             * These are the edge vertices
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Shapes.EdgeShape
             * @function Vertex2
             * @type Microsoft.Xna.Framework.Vector2
             */
            Vertex2: {
                get: function () {
                    return this._vertex2.$clone();
                },
                set: function (value) {
                    this._vertex2 = value.$clone();
                    this.ComputeProperties();
                }
            }
        },
        ctors: {
            init: function () {
                this.Vertex0 = new Microsoft.Xna.Framework.Vector2();
                this.Vertex3 = new Microsoft.Xna.Framework.Vector2();
                this._vertex1 = new Microsoft.Xna.Framework.Vector2();
                this._vertex2 = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Collision.Shapes.Shape.ctor.call(this, 0);
                this.ShapeType = FarseerPhysics.Collision.Shapes.ShapeType.Edge;
                this._radius = FarseerPhysics.Settings.PolygonRadius;
            },
            $ctor1: function (start, end) {
                this.$initialize();
                FarseerPhysics.Collision.Shapes.Shape.ctor.call(this, 0);
                this.ShapeType = FarseerPhysics.Collision.Shapes.ShapeType.Edge;
                this._radius = FarseerPhysics.Settings.PolygonRadius;
                this.Set(start.$clone(), end.$clone());
            }
        },
        methods: {
            /**
             * Set this as an isolated edge.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.Shapes.EdgeShape
             * @memberof FarseerPhysics.Collision.Shapes.EdgeShape
             * @param   {Microsoft.Xna.Framework.Vector2}    start    The start.
             * @param   {Microsoft.Xna.Framework.Vector2}    end      The end.
             * @return  {void}
             */
            Set: function (start, end) {
                this._vertex1 = start.$clone();
                this._vertex2 = end.$clone();
                this.HasVertex0 = false;
                this.HasVertex3 = false;

                this.ComputeProperties();
            },
            Clone: function () {
                var edge = new FarseerPhysics.Collision.Shapes.EdgeShape.ctor();
                edge._radius = this._radius;
                edge._density = this._density;
                edge.HasVertex0 = this.HasVertex0;
                edge.HasVertex3 = this.HasVertex3;
                edge.Vertex0 = this.Vertex0.$clone();
                edge._vertex1 = this._vertex1.$clone();
                edge._vertex2 = this._vertex2.$clone();
                edge.Vertex3 = this.Vertex3.$clone();
                edge.MassData = this.MassData.$clone();
                return edge;
            },
            /**
             * Test a point for containment in this shape. This only works for convex shapes.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.EdgeShape
             * @memberof FarseerPhysics.Collision.Shapes.EdgeShape
             * @param   {FarseerPhysics.Common.Transform}    transform    The shape world transform.
             * @param   {Microsoft.Xna.Framework.Vector2}    point        a point in world coordinates.
             * @return  {boolean}                                         True if the point is inside the shape
             */
            TestPoint: function (transform, point) {
                return false;
            },
            /**
             * Cast a ray against a child shape.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.EdgeShape
             * @memberof FarseerPhysics.Collision.Shapes.EdgeShape
             * @param   {FarseerPhysics.Collision.RayCastOutput}    output        The ray-cast results.
             * @param   {FarseerPhysics.Collision.RayCastInput}     input         The ray-cast input parameters.
             * @param   {FarseerPhysics.Common.Transform}           transform     The transform to be applied to the shape.
             * @param   {number}                                    childIndex    The child shape index.
             * @return  {boolean}                                                 True if the ray-cast hits the shape
             */
            RayCast: function (output, input, transform, childIndex) {

                output.v = new FarseerPhysics.Collision.RayCastOutput();

                var p1 = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(transform.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(input.v.Point1.$clone(), transform.v.Position.$clone()));
                var p2 = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(transform.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(input.v.Point2.$clone(), transform.v.Position.$clone()));
                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.$clone(), p1.$clone());

                var v1 = this._vertex1.$clone();
                var v2 = this._vertex2.$clone();
                var e = Microsoft.Xna.Framework.Vector2.op_Subtraction(v2.$clone(), v1.$clone());
                var normal = new Microsoft.Xna.Framework.Vector2.$ctor2(e.Y, -e.X);
                normal.Normalize();

                var numerator = Microsoft.Xna.Framework.Vector2.Dot(normal.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(v1.$clone(), p1.$clone()));
                var denominator = Microsoft.Xna.Framework.Vector2.Dot(normal.$clone(), d.$clone());

                if (denominator === 0.0) {
                    return false;
                }

                var t = numerator / denominator;
                if (t < 0.0 || 1.0 < t) {
                    return false;
                }

                var q = Microsoft.Xna.Framework.Vector2.op_Addition(p1.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(t, d.$clone()));

                var r = Microsoft.Xna.Framework.Vector2.op_Subtraction(v2.$clone(), v1.$clone());
                var rr = Microsoft.Xna.Framework.Vector2.Dot(r.$clone(), r.$clone());
                if (rr === 0.0) {
                    return false;
                }

                var s = Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Subtraction(q.$clone(), v1.$clone()), r.$clone()) / rr;
                if (s < 0.0 || 1.0 < s) {
                    return false;
                }

                output.v.Fraction = t;
                if (numerator > 0.0) {
                    output.v.Normal = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(normal.$clone());
                } else {
                    output.v.Normal = normal.$clone();
                }
                return true;
            },
            /**
             * Given a transform, compute the associated axis aligned bounding box for a child shape.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.EdgeShape
             * @memberof FarseerPhysics.Collision.Shapes.EdgeShape
             * @param   {FarseerPhysics.Collision.AABB}      aabb          The aabb results.
             * @param   {FarseerPhysics.Common.Transform}    transform     The world transform of the shape.
             * @param   {number}                             childIndex    The child shape index.
             * @return  {void}
             */
            ComputeAABB: function (aabb, transform, childIndex) {
                var v1 = FarseerPhysics.Common.MathUtils.Multiply$2(transform, this._vertex1.$clone());
                var v2 = FarseerPhysics.Common.MathUtils.Multiply$2(transform, this._vertex2.$clone());

                var lower = Microsoft.Xna.Framework.Vector2.Min(v1.$clone(), v2.$clone());
                var upper = Microsoft.Xna.Framework.Vector2.Max(v1.$clone(), v2.$clone());

                var r = new Microsoft.Xna.Framework.Vector2.$ctor2(this.Radius, this.Radius);
                aabb.v.LowerBound = Microsoft.Xna.Framework.Vector2.op_Subtraction(lower.$clone(), r.$clone());
                aabb.v.UpperBound = Microsoft.Xna.Framework.Vector2.op_Addition(upper.$clone(), r.$clone());
            },
            /**
             * Compute the mass properties of this shape using its dimensions and density.
             The inertia tensor is computed about the local origin, not the centroid.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.EdgeShape
             * @memberof FarseerPhysics.Collision.Shapes.EdgeShape
             * @return  {void}
             */
            ComputeProperties: function () {
                this.MassData.Centroid = Microsoft.Xna.Framework.Vector2.op_Multiply$2(0.5, (Microsoft.Xna.Framework.Vector2.op_Addition(this._vertex1.$clone(), this._vertex2.$clone())));
            },
            ComputeSubmergedArea: function (normal, offset, xf, sc) {
                sc.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                return 0;
            },
            CompareTo$1: function (shape) {
                return (this.HasVertex0 === shape.HasVertex0 && this.HasVertex3 === shape.HasVertex3 && Microsoft.Xna.Framework.Vector2.op_Equality(this.Vertex0.$clone(), shape.Vertex0.$clone()) && Microsoft.Xna.Framework.Vector2.op_Equality(this.Vertex1.$clone(), shape.Vertex1.$clone()) && Microsoft.Xna.Framework.Vector2.op_Equality(this.Vertex2.$clone(), shape.Vertex2.$clone()) && Microsoft.Xna.Framework.Vector2.op_Equality(this.Vertex3.$clone(), shape.Vertex3.$clone()));
            }
        }
    });

    /**
     * A loop Shape is a free form sequence of line segments that form a circular list.
     The loop may cross upon itself, but this is not recommended for smooth collision.
     The loop has double sided collision, so you can use inside and outside collision.
     Therefore, you may use any winding order.
     *
     * @public
     * @class FarseerPhysics.Collision.Shapes.LoopShape
     * @augments FarseerPhysics.Collision.Shapes.Shape
     */
    Bridge.define("FarseerPhysics.Collision.Shapes.LoopShape", {
        inherits: [FarseerPhysics.Collision.Shapes.Shape],
        statics: {
            fields: {
                _edgeShape: null
            },
            ctors: {
                init: function () {
                    this._edgeShape = new FarseerPhysics.Collision.Shapes.EdgeShape.ctor();
                }
            }
        },
        fields: {
            /**
             * The vertices. These are not owned/freed by the loop Shape.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Collision.Shapes.LoopShape
             * @type FarseerPhysics.Common.Vertices
             */
            Vertices: null
        },
        props: {
            ChildCount: {
                get: function () {
                    return this.Vertices.Count;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Collision.Shapes.Shape.ctor.call(this, 0);
                this.ShapeType = FarseerPhysics.Collision.Shapes.ShapeType.Loop;
                this._radius = FarseerPhysics.Settings.PolygonRadius;
            },
            $ctor1: function (vertices) {
                this.$initialize();
                FarseerPhysics.Collision.Shapes.Shape.ctor.call(this, 0);
                this.ShapeType = FarseerPhysics.Collision.Shapes.ShapeType.Loop;
                this._radius = FarseerPhysics.Settings.PolygonRadius;

                if (FarseerPhysics.Settings.ConserveMemory) {
                    this.Vertices = vertices;
                } else {
                    this.Vertices = new FarseerPhysics.Common.Vertices.$ctor2(vertices);
                }
            }
        },
        methods: {
            Clone: function () {
                var loop = new FarseerPhysics.Collision.Shapes.LoopShape.ctor();
                loop._density = this._density;
                loop._radius = this._radius;
                loop.Vertices = this.Vertices;
                loop.MassData = this.MassData.$clone();
                return loop;
            },
            /**
             * Get a child edge.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.Shapes.LoopShape
             * @memberof FarseerPhysics.Collision.Shapes.LoopShape
             * @param   {FarseerPhysics.Collision.Shapes.EdgeShape}    edge     The edge.
             * @param   {number}                                       index    The index.
             * @return  {void}
             */
            GetChildEdge: function (edge, index) {
                System.Diagnostics.Debug.Assert(2 <= this.Vertices.Count);
                System.Diagnostics.Debug.Assert(0 <= index && index < this.Vertices.Count);
                edge.v.ShapeType = FarseerPhysics.Collision.Shapes.ShapeType.Edge;
                edge.v._radius = this._radius;
                edge.v.HasVertex0 = true;
                edge.v.HasVertex3 = true;

                var i0 = ((index - 1) | 0) >= 0 ? ((index - 1) | 0) : ((this.Vertices.Count - 1) | 0);
                var i1 = index;
                var i2 = ((index + 1) | 0) < this.Vertices.Count ? ((index + 1) | 0) : 0;
                var i3 = (index + 2) | 0;
                while (i3 >= this.Vertices.Count) {
                    i3 = (i3 - this.Vertices.Count) | 0;
                }

                edge.v.Vertex0 = this.Vertices.getItem(i0).$clone();
                edge.v.Vertex1 = this.Vertices.getItem(i1).$clone();
                edge.v.Vertex2 = this.Vertices.getItem(i2).$clone();
                edge.v.Vertex3 = this.Vertices.getItem(i3).$clone();
            },
            /**
             * Test a point for containment in this shape. This only works for convex shapes.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.LoopShape
             * @memberof FarseerPhysics.Collision.Shapes.LoopShape
             * @param   {FarseerPhysics.Common.Transform}    transform    The shape world transform.
             * @param   {Microsoft.Xna.Framework.Vector2}    point        a point in world coordinates.
             * @return  {boolean}                                         True if the point is inside the shape
             */
            TestPoint: function (transform, point) {
                return false;
            },
            /**
             * Cast a ray against a child shape.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.LoopShape
             * @memberof FarseerPhysics.Collision.Shapes.LoopShape
             * @param   {FarseerPhysics.Collision.RayCastOutput}    output        The ray-cast results.
             * @param   {FarseerPhysics.Collision.RayCastInput}     input         The ray-cast input parameters.
             * @param   {FarseerPhysics.Common.Transform}           transform     The transform to be applied to the shape.
             * @param   {number}                                    childIndex    The child shape index.
             * @return  {boolean}                                                 True if the ray-cast hits the shape
             */
            RayCast: function (output, input, transform, childIndex) {
                System.Diagnostics.Debug.Assert(childIndex < this.Vertices.Count);

                var i1 = childIndex;
                var i2 = (childIndex + 1) | 0;
                if (i2 === this.Vertices.Count) {
                    i2 = 0;
                }

                FarseerPhysics.Collision.Shapes.LoopShape._edgeShape.Vertex1 = this.Vertices.getItem(i1).$clone();
                FarseerPhysics.Collision.Shapes.LoopShape._edgeShape.Vertex2 = this.Vertices.getItem(i2).$clone();

                return FarseerPhysics.Collision.Shapes.LoopShape._edgeShape.RayCast(output, input, transform, 0);
            },
            /**
             * Given a transform, compute the associated axis aligned bounding box for a child shape.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.LoopShape
             * @memberof FarseerPhysics.Collision.Shapes.LoopShape
             * @param   {FarseerPhysics.Collision.AABB}      aabb          The aabb results.
             * @param   {FarseerPhysics.Common.Transform}    transform     The world transform of the shape.
             * @param   {number}                             childIndex    The child shape index.
             * @return  {void}
             */
            ComputeAABB: function (aabb, transform, childIndex) {
                System.Diagnostics.Debug.Assert(childIndex < this.Vertices.Count);

                var i1 = childIndex;
                var i2 = (childIndex + 1) | 0;
                if (i2 === this.Vertices.Count) {
                    i2 = 0;
                }

                var v1 = FarseerPhysics.Common.MathUtils.Multiply$2(transform, this.Vertices.getItem(i1).$clone());
                var v2 = FarseerPhysics.Common.MathUtils.Multiply$2(transform, this.Vertices.getItem(i2).$clone());

                aabb.v.LowerBound = Microsoft.Xna.Framework.Vector2.Min(v1.$clone(), v2.$clone());
                aabb.v.UpperBound = Microsoft.Xna.Framework.Vector2.Max(v1.$clone(), v2.$clone());
            },
            /**
             * Chains have zero mass.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.LoopShape
             * @memberof FarseerPhysics.Collision.Shapes.LoopShape
             * @return  {void}
             */
            ComputeProperties: function () { },
            ComputeSubmergedArea: function (normal, offset, xf, sc) {
                sc.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                return 0;
            }
        }
    });

    /**
     * Represents a simple non-selfintersecting convex polygon.
     If you want to have concave polygons, you will have to use the {@link } or the {@link }
     to decompose the concave polygon into 2 or more convex polygons.
     *
     * @public
     * @class FarseerPhysics.Collision.Shapes.PolygonShape
     * @augments FarseerPhysics.Collision.Shapes.Shape
     */
    Bridge.define("FarseerPhysics.Collision.Shapes.PolygonShape", {
        inherits: [FarseerPhysics.Collision.Shapes.Shape],
        fields: {
            Normals: null,
            Vertices: null
        },
        props: {
            ChildCount: {
                get: function () {
                    return 1;
                }
            }
        },
        ctors: {
            /**
             * Initializes a new instance of the {@link } class.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.Shapes.PolygonShape
             * @memberof FarseerPhysics.Collision.Shapes.PolygonShape
             * @param   {FarseerPhysics.Common.Vertices}    vertices    The vertices.
             * @param   {number}                            density     The density.
             * @return  {void}
             */
            $ctor1: function (vertices, density) {
                this.$initialize();
                FarseerPhysics.Collision.Shapes.Shape.ctor.call(this, density);
                this.ShapeType = FarseerPhysics.Collision.Shapes.ShapeType.Polygon;
                this._radius = FarseerPhysics.Settings.PolygonRadius;

                this.Set(vertices);
            },
            $ctor2: function (density) {
                this.$initialize();
                FarseerPhysics.Collision.Shapes.Shape.ctor.call(this, density);
                this.ShapeType = FarseerPhysics.Collision.Shapes.ShapeType.Polygon;
                this._radius = FarseerPhysics.Settings.PolygonRadius;
                this.Normals = new FarseerPhysics.Common.Vertices.ctor();
                this.Vertices = new FarseerPhysics.Common.Vertices.ctor();
            },
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Collision.Shapes.Shape.ctor.call(this, 0);
                this.ShapeType = FarseerPhysics.Collision.Shapes.ShapeType.Polygon;
                this._radius = FarseerPhysics.Settings.PolygonRadius;
                this.Normals = new FarseerPhysics.Common.Vertices.ctor();
                this.Vertices = new FarseerPhysics.Common.Vertices.ctor();
            }
        },
        methods: {
            Clone: function () {
                var clone = new FarseerPhysics.Collision.Shapes.PolygonShape.ctor();
                clone.ShapeType = this.ShapeType;
                clone._radius = this._radius;
                clone._density = this._density;

                if (FarseerPhysics.Settings.ConserveMemory) {
                    clone.Vertices = this.Vertices;
                    clone.Normals = this.Normals;
                } else {
                    clone.Vertices = new FarseerPhysics.Common.Vertices.$ctor2(this.Vertices);
                    clone.Normals = new FarseerPhysics.Common.Vertices.$ctor2(this.Normals);
                }

                clone.MassData = this.MassData.$clone();
                return clone;
            },
            /**
             * Copy vertices. This assumes the vertices define a convex polygon.
             It is assumed that the exterior is the the right of each edge.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.Shapes.PolygonShape
             * @memberof FarseerPhysics.Collision.Shapes.PolygonShape
             * @param   {FarseerPhysics.Common.Vertices}    vertices    The vertices.
             * @return  {void}
             */
            Set: function (vertices) {
                System.Diagnostics.Debug.Assert(vertices.Count >= 3 && vertices.Count <= FarseerPhysics.Settings.MaxPolygonVertices);

                if (FarseerPhysics.Settings.ConserveMemory) {
                    this.Vertices = vertices;
                } else {
                    this.Vertices = new FarseerPhysics.Common.Vertices.$ctor2(vertices);
                }

                this.Normals = new FarseerPhysics.Common.Vertices.$ctor3(vertices.Count);

                for (var i = 0; i < vertices.Count; i = (i + 1) | 0) {
                    var i1 = i;
                    var i2 = ((i + 1) | 0) < vertices.Count ? ((i + 1) | 0) : 0;
                    var edge = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.Vertices.getItem(i2).$clone(), this.Vertices.getItem(i1).$clone());
                    System.Diagnostics.Debug.Assert(edge.LengthSquared() > 1.42108547E-14);

                    var temp = new Microsoft.Xna.Framework.Vector2.$ctor2(edge.Y, -edge.X);
                    temp.Normalize();
                    this.Normals.add(temp.$clone());
                }

                for (var i3 = 0; i3 < this.Vertices.Count; i3 = (i3 + 1) | 0) {
                    var i11 = i3;
                    var i21 = ((i3 + 1) | 0) < this.Vertices.Count ? ((i3 + 1) | 0) : 0;
                    var edge1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.Vertices.getItem(i21).$clone(), this.Vertices.getItem(i11).$clone());

                    for (var j = 0; j < vertices.Count; j = (j + 1) | 0) {
                        if (j === i11 || j === i21) {
                            continue;
                        }

                        var r = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.Vertices.getItem(j).$clone(), this.Vertices.getItem(i11).$clone());

                        var s = edge1.X * r.Y - edge1.Y * r.X;

                        System.Diagnostics.Debug.Assert(s > 0.0);
                    }
                }

                this.ComputeProperties();
            },
            /**
             * Compute the mass properties of this shape using its dimensions and density.
             The inertia tensor is computed about the local origin, not the centroid.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.PolygonShape
             * @memberof FarseerPhysics.Collision.Shapes.PolygonShape
             * @return  {void}
             */
            ComputeProperties: function () {

                System.Diagnostics.Debug.Assert(this.Vertices.Count >= 3);

                if (this._density <= 0) {
                    return;
                }

                var center = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                var area = 0.0;
                var I = 0.0;

                var pRef = Microsoft.Xna.Framework.Vector2.Zero.$clone();


                var inv3 = 0.333333343;

                for (var i = 0; i < this.Vertices.Count; i = (i + 1) | 0) {
                    var p1 = pRef.$clone();
                    var p2 = this.Vertices.getItem(i).$clone();
                    var p3 = ((i + 1) | 0) < this.Vertices.Count ? this.Vertices.getItem(((i + 1) | 0)).$clone() : this.Vertices.getItem(0).$clone();

                    var e1 = { v : Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.$clone(), p1.$clone()) };
                    var e2 = { v : Microsoft.Xna.Framework.Vector2.op_Subtraction(p3.$clone(), p1.$clone()) };

                    var d = { };
                    FarseerPhysics.Common.MathUtils.Cross$3(e1, e2, d);

                    var triangleArea = 0.5 * d.v;
                    area += triangleArea;

                    center = Microsoft.Xna.Framework.Vector2.op_Addition(center.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(triangleArea * inv3, (Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Addition(p1.$clone(), p2.$clone()), p3.$clone()))));

                    var px = p1.X, py = p1.Y;
                    var ex1 = e1.v.X, ey1 = e1.v.Y;
                    var ex2 = e2.v.X, ey2 = e2.v.Y;

                    var intx2 = inv3 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px;
                    var inty2 = inv3 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py;

                    I += d.v * (intx2 + inty2);
                }

                System.Diagnostics.Debug.Assert(area > FarseerPhysics.Settings.Epsilon);

                this.MassData.Area = area;

                this.MassData.Mass = this._density * area;

                center = Microsoft.Xna.Framework.Vector2.op_Multiply$1(center.$clone(), 1.0 / area);
                this.MassData.Centroid = center.$clone();

                this.MassData.Inertia = this._density * I;
            },
            /**
             * Build vertices to represent an axis-aligned box.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.Shapes.PolygonShape
             * @memberof FarseerPhysics.Collision.Shapes.PolygonShape
             * @param   {number}    halfWidth     The half-width.
             * @param   {number}    halfHeight    The half-height.
             * @return  {void}
             */
            SetAsBox: function (halfWidth, halfHeight) {
                this.Set(FarseerPhysics.Common.PolygonTools.CreateRectangle(halfWidth, halfHeight));
            },
            /**
             * Build vertices to represent an oriented box.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Collision.Shapes.PolygonShape
             * @memberof FarseerPhysics.Collision.Shapes.PolygonShape
             * @param   {number}                             halfWidth     The half-width..
             * @param   {number}                             halfHeight    The half-height.
             * @param   {Microsoft.Xna.Framework.Vector2}    center        The center of the box in local coordinates.
             * @param   {number}                             angle         The rotation of the box in local coordinates.
             * @return  {void}
             */
            SetAsBox$1: function (halfWidth, halfHeight, center, angle) {
                this.Set(FarseerPhysics.Common.PolygonTools.CreateRectangle$1(halfWidth, halfHeight, center.$clone(), angle));
            },
            /**
             * Test a point for containment in this shape. This only works for convex shapes.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.PolygonShape
             * @memberof FarseerPhysics.Collision.Shapes.PolygonShape
             * @param   {FarseerPhysics.Common.Transform}    transform    The shape world transform.
             * @param   {Microsoft.Xna.Framework.Vector2}    point        a point in world coordinates.
             * @return  {boolean}                                         True if the point is inside the shape
             */
            TestPoint: function (transform, point) {
                var pLocal = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(transform.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(point.v.$clone(), transform.v.Position.$clone()));

                for (var i = 0; i < this.Vertices.Count; i = (i + 1) | 0) {
                    var dot = Microsoft.Xna.Framework.Vector2.Dot(this.Normals.getItem(i).$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(pLocal.$clone(), this.Vertices.getItem(i).$clone()));
                    if (dot > 0.0) {
                        return false;
                    }
                }

                return true;
            },
            /**
             * Cast a ray against a child shape.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.PolygonShape
             * @memberof FarseerPhysics.Collision.Shapes.PolygonShape
             * @param   {FarseerPhysics.Collision.RayCastOutput}    output        The ray-cast results.
             * @param   {FarseerPhysics.Collision.RayCastInput}     input         The ray-cast input parameters.
             * @param   {FarseerPhysics.Common.Transform}           transform     The transform to be applied to the shape.
             * @param   {number}                                    childIndex    The child shape index.
             * @return  {boolean}                                                 True if the ray-cast hits the shape
             */
            RayCast: function (output, input, transform, childIndex) {
                output.v = new FarseerPhysics.Collision.RayCastOutput();

                var p1 = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(transform.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(input.v.Point1.$clone(), transform.v.Position.$clone()));
                var p2 = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(transform.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(input.v.Point2.$clone(), transform.v.Position.$clone()));
                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.$clone(), p1.$clone());

                var lower = 0.0, upper = input.v.MaxFraction;

                var index = -1;

                for (var i = 0; i < this.Vertices.Count; i = (i + 1) | 0) {
                    var numerator = Microsoft.Xna.Framework.Vector2.Dot(this.Normals.getItem(i).$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.Vertices.getItem(i).$clone(), p1.$clone()));
                    var denominator = Microsoft.Xna.Framework.Vector2.Dot(this.Normals.getItem(i).$clone(), d.$clone());

                    if (denominator === 0.0) {
                        if (numerator < 0.0) {
                            return false;
                        }
                    } else {
                        if (denominator < 0.0 && numerator < lower * denominator) {
                            lower = numerator / denominator;
                            index = i;
                        } else if (denominator > 0.0 && numerator < upper * denominator) {
                            upper = numerator / denominator;
                        }
                    }

                    if (upper < lower) {
                        return false;
                    }
                }

                System.Diagnostics.Debug.Assert(0.0 <= lower && lower <= input.v.MaxFraction);

                if (index >= 0) {
                    output.v.Fraction = lower;
                    output.v.Normal = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(transform.v, "R"), this.Normals.getItem(index).$clone());
                    return true;
                }

                return false;
            },
            /**
             * Given a transform, compute the associated axis aligned bounding box for a child shape.
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Collision.Shapes.PolygonShape
             * @memberof FarseerPhysics.Collision.Shapes.PolygonShape
             * @param   {FarseerPhysics.Collision.AABB}      aabb          The aabb results.
             * @param   {FarseerPhysics.Common.Transform}    transform     The world transform of the shape.
             * @param   {number}                             childIndex    The child shape index.
             * @return  {void}
             */
            ComputeAABB: function (aabb, transform, childIndex) {
                var lower = FarseerPhysics.Common.MathUtils.Multiply$2(transform, this.Vertices.getItem(0).$clone());
                var upper = lower.$clone();

                for (var i = 1; i < this.Vertices.Count; i = (i + 1) | 0) {
                    var v = FarseerPhysics.Common.MathUtils.Multiply$2(transform, this.Vertices.getItem(i).$clone());
                    lower = Microsoft.Xna.Framework.Vector2.Min(lower.$clone(), v.$clone());
                    upper = Microsoft.Xna.Framework.Vector2.Max(upper.$clone(), v.$clone());
                }

                var r = new Microsoft.Xna.Framework.Vector2.$ctor2(this.Radius, this.Radius);
                aabb.v.LowerBound = Microsoft.Xna.Framework.Vector2.op_Subtraction(lower.$clone(), r.$clone());
                aabb.v.UpperBound = Microsoft.Xna.Framework.Vector2.op_Addition(upper.$clone(), r.$clone());
            },
            CompareTo$1: function (shape) {
                if (this.Vertices.Count !== shape.Vertices.Count) {
                    return false;
                }

                for (var i = 0; i < this.Vertices.Count; i = (i + 1) | 0) {
                    if (Microsoft.Xna.Framework.Vector2.op_Inequality(this.Vertices.getItem(i).$clone(), shape.Vertices.getItem(i).$clone())) {
                        return false;
                    }
                }

                return (this.Radius === shape.Radius && FarseerPhysics.Collision.Shapes.MassData.op_Equality(this.MassData.$clone(), shape.MassData.$clone()));
            },
            ComputeSubmergedArea: function (normal, offset, xf, sc) {
                xf = {v:xf};
                sc.v = Microsoft.Xna.Framework.Vector2.Zero.$clone();

                var normalL = FarseerPhysics.Common.MathUtils.MultiplyT(Bridge.ref(xf.v, "R"), normal.$clone());
                var offsetL = offset - Microsoft.Xna.Framework.Vector2.Dot(normal.$clone(), xf.v.Position.$clone());

                var depths = System.Array.init(FarseerPhysics.Settings.MaxPolygonVertices, 0, System.Single);
                var diveCount = 0;
                var intoIndex = -1;
                var outoIndex = -1;

                var lastSubmerged = false;
                var i;
                for (i = 0; i < this.Vertices.Count; i = (i + 1) | 0) {
                    depths[System.Array.index(i, depths)] = Microsoft.Xna.Framework.Vector2.Dot(normalL.$clone(), this.Vertices.getItem(i).$clone()) - offsetL;
                    var isSubmerged = depths[System.Array.index(i, depths)] < -1.1920929E-07;
                    if (i > 0) {
                        if (isSubmerged) {
                            if (!lastSubmerged) {
                                intoIndex = (i - 1) | 0;
                                diveCount = (diveCount + 1) | 0;
                            }
                        } else {
                            if (lastSubmerged) {
                                outoIndex = (i - 1) | 0;
                                diveCount = (diveCount + 1) | 0;
                            }
                        }
                    }
                    lastSubmerged = isSubmerged;
                }
                switch (diveCount) {
                    case 0: 
                        if (lastSubmerged) {
                            sc.v = FarseerPhysics.Common.MathUtils.Multiply$2(xf, this.MassData.Centroid.$clone());
                            return this.MassData.Mass / this.Density;
                        } else {
                            return 0;
                        }
                        break;
                    case 1: 
                        if (intoIndex === -1) {
                            intoIndex = (this.Vertices.Count - 1) | 0;
                        } else {
                            outoIndex = (this.Vertices.Count - 1) | 0;
                        }
                        break;
                }
                var intoIndex2 = (((intoIndex + 1) | 0)) % this.Vertices.Count;
                var outoIndex2 = (((outoIndex + 1) | 0)) % this.Vertices.Count;

                var intoLambda = (0 - depths[System.Array.index(intoIndex, depths)]) / (depths[System.Array.index(intoIndex2, depths)] - depths[System.Array.index(intoIndex, depths)]);
                var outoLambda = (0 - depths[System.Array.index(outoIndex, depths)]) / (depths[System.Array.index(outoIndex2, depths)] - depths[System.Array.index(outoIndex, depths)]);

                var intoVec = new Microsoft.Xna.Framework.Vector2.$ctor2(this.Vertices.getItem(intoIndex).$clone().X * (1 - intoLambda) + this.Vertices.getItem(intoIndex2).$clone().X * intoLambda, this.Vertices.getItem(intoIndex).$clone().Y * (1 - intoLambda) + this.Vertices.getItem(intoIndex2).$clone().Y * intoLambda);
                var outoVec = new Microsoft.Xna.Framework.Vector2.$ctor2(this.Vertices.getItem(outoIndex).$clone().X * (1 - outoLambda) + this.Vertices.getItem(outoIndex2).$clone().X * outoLambda, this.Vertices.getItem(outoIndex).$clone().Y * (1 - outoLambda) + this.Vertices.getItem(outoIndex2).$clone().Y * outoLambda);

                var area = 0;
                var center = new Microsoft.Xna.Framework.Vector2.$ctor2(0, 0);
                var p2 = this.Vertices.getItem(intoIndex2).$clone();
                var p3 = new Microsoft.Xna.Framework.Vector2();

                var k_inv3 = 0.333333343;

                i = intoIndex2;
                while (i !== outoIndex2) {
                    i = (((i + 1) | 0)) % this.Vertices.Count;
                    if (i === outoIndex2) {
                        p3 = outoVec.$clone();
                    } else {
                        p3 = this.Vertices.getItem(i).$clone();
                    }
                    {
                        var e1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.$clone(), intoVec.$clone());
                        var e2 = Microsoft.Xna.Framework.Vector2.op_Subtraction(p3.$clone(), intoVec.$clone());

                        var D = FarseerPhysics.Common.MathUtils.Cross$2(e1.$clone(), e2.$clone());

                        var triangleArea = 0.5 * D;

                        area += triangleArea;

                        center = Microsoft.Xna.Framework.Vector2.op_Addition(center.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(triangleArea * k_inv3, (Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Addition(intoVec.$clone(), p2.$clone()), p3.$clone()))));
                    }
                    p2 = p3.$clone();
                }

                center = Microsoft.Xna.Framework.Vector2.op_Multiply$1(center.$clone(), 1.0 / area);

                sc.v = FarseerPhysics.Common.MathUtils.Multiply$2(xf, center.$clone());

                return area;
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.Sink", {
        inherits: [FarseerPhysics.Common.Decomposition.Node],
        statics: {
            methods: {
                Isink: function (trapezoid) {
                    if (trapezoid.Sink == null) {
                        return new FarseerPhysics.Common.Decomposition.Sink(trapezoid);
                    }
                    return trapezoid.Sink;
                }
            }
        },
        fields: {
            Trapezoid: null
        },
        ctors: {
            ctor: function (trapezoid) {
                this.$initialize();
                FarseerPhysics.Common.Decomposition.Node.ctor.call(this, null, null);
                this.Trapezoid = trapezoid;
                trapezoid.Sink = this;
            }
        },
        methods: {
            Locate: function (edge) {
                return this;
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.XNode", {
        inherits: [FarseerPhysics.Common.Decomposition.Node],
        fields: {
            _point: null
        },
        ctors: {
            ctor: function (point, lChild, rChild) {
                this.$initialize();
                FarseerPhysics.Common.Decomposition.Node.ctor.call(this, lChild, rChild);
                this._point = point;
            }
        },
        methods: {
            Locate: function (edge) {
                if (edge.P.X >= this._point.X) {
                    return this.RightChild.Locate(edge);
                }
                return this.LeftChild.Locate(edge);
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.Decomposition.YNode", {
        inherits: [FarseerPhysics.Common.Decomposition.Node],
        fields: {
            _edge: null
        },
        ctors: {
            ctor: function (edge, lChild, rChild) {
                this.$initialize();
                FarseerPhysics.Common.Decomposition.Node.ctor.call(this, lChild, rChild);
                this._edge = edge;
            }
        },
        methods: {
            Locate: function (edge) {
                if (this._edge.IsAbove(edge.P)) {
                    return this.RightChild.Locate(edge);
                }

                if (this._edge.IsBelow(edge.P)) {
                    return this.LeftChild.Locate(edge);
                }

                if (edge.Slope < this._edge.Slope) {
                    return this.RightChild.Locate(edge);
                }

                return this.LeftChild.Locate(edge);
            }
        }
    });

    /**
     * Detected vertices of a single polygon.
     *
     * @public
     * @class FarseerPhysics.Common.DetectedVertices
     * @augments FarseerPhysics.Common.Vertices
     */
    Bridge.define("FarseerPhysics.Common.DetectedVertices", {
        inherits: [FarseerPhysics.Common.Vertices],
        fields: {
            _holes: null
        },
        props: {
            Holes: {
                get: function () {
                    return this._holes;
                },
                set: function (value) {
                    this._holes = value;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Common.Vertices.ctor.call(this);
            },
            $ctor1: function (vertices) {
                this.$initialize();
                FarseerPhysics.Common.Vertices.$ctor2.call(this, vertices);
            }
        },
        methods: {
            Transform: function (transform) {
                transform = {v:transform};
                for (var i = 0; i < this.Count; i = (i + 1) | 0) {
                    this.setItem(i, Microsoft.Xna.Framework.Vector2.Transform(this.getItem(i).$clone(), transform.v.$clone()));
                }

                var temp = null;
                if (this._holes != null && this._holes.Count > 0) {
                    for (var i1 = 0; i1 < this._holes.Count; i1 = (i1 + 1) | 0) {
                        temp = this._holes.getItem(i1).ToArray();
                        Microsoft.Xna.Framework.Vector2.Transform$4(temp, transform, temp);

                        this._holes.setItem(i1, new FarseerPhysics.Common.Vertices.$ctor1(temp));
                    }
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Common.PhysicsLogic.PhysicsLogic", {
        inherits: [FarseerPhysics.Dynamics.FilterData],
        fields: {
            _type: 0,
            World: null
        },
        ctors: {
            ctor: function (world, type) {
                this.$initialize();
                FarseerPhysics.Dynamics.FilterData.ctor.call(this);
                this._type = type;
                this.World = world;
            }
        },
        methods: {
            IsActiveOn: function (body) {
                if (body.PhysicsLogicFilter.IsPhysicsLogicIgnored(this._type)) {
                    return false;
                }

                return FarseerPhysics.Dynamics.FilterData.prototype.IsActiveOn.call(this, body);
            }
        }
    });

    Bridge.define("FarseerPhysics.Controllers.Controller", {
        inherits: [FarseerPhysics.Dynamics.FilterData],
        fields: {
            Enabled: false,
            World: null,
            _type: 0
        },
        ctors: {
            ctor: function (controllerType) {
                this.$initialize();
                FarseerPhysics.Dynamics.FilterData.ctor.call(this);
                this._type = controllerType;
            }
        },
        methods: {
            IsActiveOn: function (body) {
                if (body.ControllerFilter.IsControllerIgnored(this._type)) {
                    return false;
                }

                return FarseerPhysics.Dynamics.FilterData.prototype.IsActiveOn.call(this, body);
            }
        }
    });

    /**
     * Maintains a fixed angle between two bodies
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.AngleJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.AngleJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            BiasFactor: 0,
            MaxImpulse: 0,
            Softness: 0,
            _bias: 0,
            _jointError: 0,
            _massFactor: 0,
            _targetAngle: 0
        },
        props: {
            TargetAngle: {
                get: function () {
                    return this._targetAngle;
                },
                set: function (value) {
                    if (value !== this._targetAngle) {
                        this._targetAngle = value;
                        this.WakeBodies();
                    }
                }
            },
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.Position.$clone();
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyB.Position.$clone();
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.ctor.call(this);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Angle;
            },
            $ctor1: function (bodyA, bodyB) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor2.call(this, bodyA, bodyB);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Angle;
                this.TargetAngle = 0;
                this.BiasFactor = 0.2;
                this.Softness = 0.0;
                this.MaxImpulse = 3.40282347E+38;
            }
        },
        methods: {
            GetReactionForce: function (inv_dt) {
                return Microsoft.Xna.Framework.Vector2.Zero.$clone();
            },
            GetReactionTorque: function (inv_dt) {
                return 0;
            },
            InitVelocityConstraints: function (step) {
                this._jointError = (this.BodyB.Sweep.A - this.BodyA.Sweep.A - this.TargetAngle);

                this._bias = -this.BiasFactor * step.v.inv_dt * this._jointError;

                this._massFactor = (1 - this.Softness) / (this.BodyA.InvI + this.BodyB.InvI);
            },
            SolveVelocityConstraints: function (step) {
                var $t, $t1;
                var p = (this._bias - this.BodyB.AngularVelocity + this.BodyA.AngularVelocity) * this._massFactor;
                $t = this.BodyA;
                $t.AngularVelocity -= this.BodyA.InvI * Bridge.Int.sign(p) * Math.min(Math.abs(p), this.MaxImpulse);
                $t1 = this.BodyB;
                $t1.AngularVelocity += this.BodyB.InvI * Bridge.Int.sign(p) * Math.min(Math.abs(p), this.MaxImpulse);
            },
            SolvePositionConstraints: function () {
                return true;
            }
        }
    });

    /**
     * A distance joint rains two points on two bodies
     to remain at a fixed distance from each other. You can view
     this as a massless, rigid rod.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.DistanceJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.DistanceJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            /**
             * The local anchor point relative to bodyA's origin.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.DistanceJoint
             * @type Microsoft.Xna.Framework.Vector2
             */
            LocalAnchorA: null,
            /**
             * The local anchor point relative to bodyB's origin.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.DistanceJoint
             * @type Microsoft.Xna.Framework.Vector2
             */
            LocalAnchorB: null,
            _bias: 0,
            _gamma: 0,
            _impulse: 0,
            _mass: 0,
            _tmpFloat1: 0,
            _tmpVector1: null,
            _u: null,
            /**
             * The natural length between the anchor points.
             Manipulating the length can lead to non-physical behavior when the frequency is zero.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.DistanceJoint
             * @function Length
             * @type number
             */
            Length: 0,
            /**
             * The mass-spring-damper frequency in Hertz.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.DistanceJoint
             * @function Frequency
             * @type number
             */
            Frequency: 0,
            /**
             * The damping ratio. 0 = no damping, 1 = critical damping.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.DistanceJoint
             * @function DampingRatio
             * @type number
             */
            DampingRatio: 0
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyB.GetWorldPoint(this.LocalAnchorB.$clone());
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            }
        },
        ctors: {
            init: function () {
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorB = new Microsoft.Xna.Framework.Vector2();
                this._tmpVector1 = new Microsoft.Xna.Framework.Vector2();
                this._u = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.ctor.call(this);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Distance;
            },
            /**
             * This requires defining an
             anchor point on both bodies and the non-zero length of the
             distance joint. If you don't supply a length, the local anchor points
             is used so that the initial configuration can violate the constraint
             slightly. This helps when saving and loading a game.
             @warning Do not use a zero or short length.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.DistanceJoint
             * @memberof FarseerPhysics.Dynamics.Joints.DistanceJoint
             * @param   {FarseerPhysics.Dynamics.Body}       bodyA           The first body
             * @param   {FarseerPhysics.Dynamics.Body}       bodyB           The second body
             * @param   {Microsoft.Xna.Framework.Vector2}    localAnchorA    The first body anchor
             * @param   {Microsoft.Xna.Framework.Vector2}    localAnchorB    The second body anchor
             * @return  {void}
             */
            $ctor1: function (bodyA, bodyB, localAnchorA, localAnchorB) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor2.call(this, bodyA, bodyB);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Distance;

                this.LocalAnchorA = localAnchorA.$clone();
                this.LocalAnchorB = localAnchorB.$clone();

                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.WorldAnchorB.$clone(), this.WorldAnchorA.$clone());
                this.Length = d.Length();
            }
        },
        methods: {
            GetReactionForce: function (inv_dt) {
                var F = Microsoft.Xna.Framework.Vector2.op_Multiply$2((inv_dt * this._impulse), this._u.$clone());
                return F.$clone();
            },
            GetReactionTorque: function (inv_dt) {
                return 0.0;
            },
            InitVelocityConstraints: function (step) {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var r1 = { v : FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(b1.Xf, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone())) };
                var r2 = { v : FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(b2.Xf, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone())) };
                this._u = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), r2.v.$clone()), b1.Sweep.C.$clone()), r1.v.$clone());

                var length = this._u.Length();
                if (length > FarseerPhysics.Settings.LinearSlop) {
                    this._u = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._u.$clone(), 1.0 / length);
                } else {
                    this._u = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                }

                var cr1u = { }, cr2u = { };
                FarseerPhysics.Common.MathUtils.Cross$3(r1, Bridge.ref(this, "_u"), cr1u);
                FarseerPhysics.Common.MathUtils.Cross$3(r2, Bridge.ref(this, "_u"), cr2u);
                var invMass = b1.InvMass + b1.InvI * cr1u.v * cr1u.v + b2.InvMass + b2.InvI * cr2u.v * cr2u.v;
                System.Diagnostics.Debug.Assert(invMass > FarseerPhysics.Settings.Epsilon);
                this._mass = invMass !== 0.0 ? 1.0 / invMass : 0.0;

                if (this.Frequency > 0.0) {
                    var C = length - this.Length;

                    var omega = 6.28318548 * this.Frequency;

                    var d = 2.0 * this._mass * this.DampingRatio * omega;

                    var k = this._mass * omega * omega;

                    this._gamma = step.v.dt * (d + step.v.dt * k);
                    this._gamma = this._gamma !== 0.0 ? 1.0 / this._gamma : 0.0;
                    this._bias = C * step.v.dt * k * this._gamma;

                    this._mass = invMass + this._gamma;
                    this._mass = this._mass !== 0.0 ? 1.0 / this._mass : 0.0;
                }

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._impulse *= step.v.dtRatio;

                    var P = { v : Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse, this._u.$clone()) };
                    b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P.v.$clone()));
                    FarseerPhysics.Common.MathUtils.Cross$3(r1, P, Bridge.ref(this, "_tmpFloat1"));
                    b1.AngularVelocityInternal -= b1.InvI * this._tmpFloat1;
                    b2.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass, P.v.$clone()));
                    FarseerPhysics.Common.MathUtils.Cross$3(r2, P, Bridge.ref(this, "_tmpFloat1"));
                    b2.AngularVelocityInternal += b2.InvI * this._tmpFloat1;
                } else {
                    this._impulse = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var xf1 = { v : new FarseerPhysics.Common.Transform() }, xf2 = { v : new FarseerPhysics.Common.Transform() };
                b1.GetTransform(xf1);
                b2.GetTransform(xf2);

                var r1 = { v : FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone())) };
                var r2 = { v : FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone())) };

                FarseerPhysics.Common.MathUtils.Cross$4(b1.AngularVelocityInternal, r1, Bridge.ref(this, "_tmpVector1"));
                var v1 = Microsoft.Xna.Framework.Vector2.op_Addition(b1.LinearVelocityInternal.$clone(), this._tmpVector1.$clone());
                FarseerPhysics.Common.MathUtils.Cross$4(b2.AngularVelocityInternal, r2, Bridge.ref(this, "_tmpVector1"));
                var v2 = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), this._tmpVector1.$clone());
                var Cdot = Microsoft.Xna.Framework.Vector2.Dot(this._u.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(v2.$clone(), v1.$clone()));

                var impulse = -this._mass * (Cdot + this._bias + this._gamma * this._impulse);
                this._impulse += impulse;

                var P = { v : Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, this._u.$clone()) };
                b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P.v.$clone()));
                FarseerPhysics.Common.MathUtils.Cross$3(r1, P, Bridge.ref(this, "_tmpFloat1"));
                b1.AngularVelocityInternal -= b1.InvI * this._tmpFloat1;
                b2.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass, P.v.$clone()));
                FarseerPhysics.Common.MathUtils.Cross$3(r2, P, Bridge.ref(this, "_tmpFloat1"));
                b2.AngularVelocityInternal += b2.InvI * this._tmpFloat1;
            },
            SolvePositionConstraints: function () {
                if (this.Frequency > 0.0) {
                    return true;
                }

                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var xf1 = { v : new FarseerPhysics.Common.Transform() }, xf2 = { v : new FarseerPhysics.Common.Transform() };
                b1.GetTransform(xf1);
                b2.GetTransform(xf2);

                var r1 = { v : FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone())) };
                var r2 = { v : FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone())) };

                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), r2.v.$clone()), b1.Sweep.C.$clone()), r1.v.$clone());

                var length = d.Length();

                if (length === 0.0) {
                    return true;
                }

                d = Microsoft.Xna.Framework.Vector2.op_Division$1(d.$clone(), length);
                var C = length - this.Length;
                C = FarseerPhysics.Common.MathUtils.Clamp$2(C, -0.2, FarseerPhysics.Settings.MaxLinearCorrection);

                var impulse = -this._mass * C;
                this._u = d.$clone();
                var P = { v : Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, this._u.$clone()) };

                b1.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P.v.$clone()));
                FarseerPhysics.Common.MathUtils.Cross$3(r1, P, Bridge.ref(this, "_tmpFloat1"));
                b1.Sweep.A -= b1.InvI * this._tmpFloat1;
                b2.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass, P.v.$clone()));
                FarseerPhysics.Common.MathUtils.Cross$3(r2, P, Bridge.ref(this, "_tmpFloat1"));
                b2.Sweep.A += b2.InvI * this._tmpFloat1;

                b1.SynchronizeTransform();
                b2.SynchronizeTransform();

                return Math.abs(C) < FarseerPhysics.Settings.LinearSlop;
            }
        }
    });

    Bridge.define("FarseerPhysics.Dynamics.Joints.FixedAngleJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            BiasFactor: 0,
            MaxImpulse: 0,
            Softness: 0,
            _bias: 0,
            _jointError: 0,
            _massFactor: 0,
            _targetAngle: 0
        },
        props: {
            TargetAngle: {
                get: function () {
                    return this._targetAngle;
                },
                set: function (value) {
                    if (value !== this._targetAngle) {
                        this._targetAngle = value;
                        this.WakeBodies();
                    }
                }
            },
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.Position.$clone();
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyA.Position.$clone();
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            }
        },
        ctors: {
            ctor: function (bodyA) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor1.call(this, bodyA);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.FixedAngle;
                this.TargetAngle = 0;
                this.BiasFactor = 0.2;
                this.Softness = 0.0;
                this.MaxImpulse = 3.40282347E+38;
            }
        },
        methods: {
            GetReactionForce: function (inv_dt) {
                return Microsoft.Xna.Framework.Vector2.Zero.$clone();
            },
            GetReactionTorque: function (inv_dt) {
                return 0;
            },
            InitVelocityConstraints: function (step) {
                this._jointError = this.BodyA.Sweep.A - this.TargetAngle;

                this._bias = -this.BiasFactor * step.v.inv_dt * this._jointError;

                this._massFactor = (1 - this.Softness) / (this.BodyA.InvI);
            },
            SolveVelocityConstraints: function (step) {
                var $t;
                var p = (this._bias - this.BodyA.AngularVelocity) * this._massFactor;
                $t = this.BodyA;
                $t.AngularVelocity += this.BodyA.InvI * Bridge.Int.sign(p) * Math.min(Math.abs(p), this.MaxImpulse);
            },
            SolvePositionConstraints: function () {
                return true;
            }
        }
    });

    /**
     * A distance joint rains two points on two bodies
     to remain at a fixed distance from each other. You can view
     this as a massless, rigid rod.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.FixedDistanceJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.FixedDistanceJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            /**
             * The local anchor point relative to bodyA's origin.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedDistanceJoint
             * @type Microsoft.Xna.Framework.Vector2
             */
            LocalAnchorA: null,
            _bias: 0,
            _gamma: 0,
            _impulse: 0,
            _mass: 0,
            _u: null,
            _worldAnchorB: null,
            /**
             * The natural length between the anchor points.
             Manipulating the length can lead to non-physical behavior when the frequency is zero.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedDistanceJoint
             * @function Length
             * @type number
             */
            Length: 0,
            /**
             * The mass-spring-damper frequency in Hertz.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedDistanceJoint
             * @function Frequency
             * @type number
             */
            Frequency: 0,
            /**
             * The damping ratio. 0 = no damping, 1 = critical damping.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedDistanceJoint
             * @function DampingRatio
             * @type number
             */
            DampingRatio: 0
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this._worldAnchorB.$clone();
                },
                set: function (value) {
                    this._worldAnchorB = value.$clone();
                }
            }
        },
        ctors: {
            init: function () {
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this._u = new Microsoft.Xna.Framework.Vector2();
                this._worldAnchorB = new Microsoft.Xna.Framework.Vector2();
            },
            /**
             * This requires defining an
             anchor point on both bodies and the non-zero length of the
             distance joint. If you don't supply a length, the local anchor points
             is used so that the initial configuration can violate the constraint
             slightly. This helps when saving and loading a game.
             @warning Do not use a zero or short length.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.FixedDistanceJoint
             * @memberof FarseerPhysics.Dynamics.Joints.FixedDistanceJoint
             * @param   {FarseerPhysics.Dynamics.Body}       body           The body.
             * @param   {Microsoft.Xna.Framework.Vector2}    bodyAnchor     The body anchor.
             * @param   {Microsoft.Xna.Framework.Vector2}    worldAnchor    The world anchor.
             * @return  {void}
             */
            ctor: function (body, bodyAnchor, worldAnchor) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor1.call(this, body);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.FixedDistance;

                this.LocalAnchorA = bodyAnchor.$clone();
                this._worldAnchorB = worldAnchor.$clone();

                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.WorldAnchorB.$clone(), this.WorldAnchorA.$clone());
                this.Length = d.Length();
            }
        },
        methods: {
            GetReactionForce: function (invDt) {
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2((invDt * this._impulse), this._u.$clone());
            },
            GetReactionTorque: function (invDt) {
                return 0.0;
            },
            InitVelocityConstraints: function (step) {
                var b1 = this.BodyA;

                var xf1 = { v : new FarseerPhysics.Common.Transform() };
                b1.GetTransform(xf1);

                var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));
                var r2 = this._worldAnchorB.$clone();
                this._u = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(r2.$clone(), b1.Sweep.C.$clone()), r1.$clone());

                var length = this._u.Length();
                if (length > FarseerPhysics.Settings.LinearSlop) {
                    this._u = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._u.$clone(), 1.0 / length);
                } else {
                    this._u = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                }

                var cr1u = FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), this._u.$clone());
                var cr2u = FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), this._u.$clone());
                var invMass = b1.InvMass + b1.InvI * cr1u * cr1u + 0 * cr2u * cr2u;
                System.Diagnostics.Debug.Assert(invMass > FarseerPhysics.Settings.Epsilon);
                this._mass = invMass !== 0.0 ? 1.0 / invMass : 0.0;

                if (this.Frequency > 0.0) {
                    var C = length - this.Length;

                    var omega = 6.28318548 * this.Frequency;

                    var d = 2.0 * this._mass * this.DampingRatio * omega;

                    var k = this._mass * omega * omega;

                    this._gamma = step.v.dt * (d + step.v.dt * k);
                    this._gamma = this._gamma !== 0.0 ? 1.0 / this._gamma : 0.0;
                    this._bias = C * step.v.dt * k * this._gamma;

                    this._mass = invMass + this._gamma;
                    this._mass = this._mass !== 0.0 ? 1.0 / this._mass : 0.0;
                }

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._impulse *= step.v.dtRatio;

                    var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse, this._u.$clone());
                    b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P.$clone()));
                    b1.AngularVelocityInternal -= b1.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), P.$clone());
                } else {
                    this._impulse = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var b1 = this.BodyA;

                var xf1 = { v : new FarseerPhysics.Common.Transform() };
                b1.GetTransform(xf1);

                var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));

                var v1 = Microsoft.Xna.Framework.Vector2.op_Addition(b1.LinearVelocityInternal.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(b1.AngularVelocityInternal, r1.$clone()));
                var v2 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                var Cdot = Microsoft.Xna.Framework.Vector2.Dot(this._u.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(v2.$clone(), v1.$clone()));

                var impulse = -this._mass * (Cdot + this._bias + this._gamma * this._impulse);
                this._impulse += impulse;

                var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, this._u.$clone());
                b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P.$clone()));
                b1.AngularVelocityInternal -= b1.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), P.$clone());
            },
            SolvePositionConstraints: function () {
                if (this.Frequency > 0.0) {
                    return true;
                }

                var b1 = this.BodyA;

                var xf1 = { v : new FarseerPhysics.Common.Transform() };
                b1.GetTransform(xf1);

                var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));
                var r2 = this._worldAnchorB.$clone();

                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(r2.$clone(), b1.Sweep.C.$clone()), r1.$clone());

                var length = d.Length();

                if (length === 0.0) {
                    return true;
                }

                d = Microsoft.Xna.Framework.Vector2.op_Division$1(d.$clone(), length);
                var C = length - this.Length;
                C = FarseerPhysics.Common.MathUtils.Clamp$2(C, -0.2, FarseerPhysics.Settings.MaxLinearCorrection);

                var impulse = -this._mass * C;
                this._u = d.$clone();
                var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, this._u.$clone());

                b1.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P.$clone()));
                b1.Sweep.A -= b1.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), P.$clone());

                b1.SynchronizeTransform();

                return Math.abs(C) < FarseerPhysics.Settings.LinearSlop;
            }
        }
    });

    /**
     * Friction joint. This is used for top-down friction.
     It provides 2D translational friction and angular friction.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.FixedFrictionJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.FixedFrictionJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            LocalAnchorA: null,
            /**
             * The maximum friction force in N.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedFrictionJoint
             * @type number
             */
            MaxForce: 0,
            /**
             * The maximum friction torque in N-m.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedFrictionJoint
             * @type number
             */
            MaxTorque: 0,
            _angularImpulse: 0,
            _angularMass: 0,
            _linearImpulse: null,
            _linearMass: null
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return Microsoft.Xna.Framework.Vector2.Zero.$clone();
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            }
        },
        ctors: {
            init: function () {
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this._linearImpulse = new Microsoft.Xna.Framework.Vector2();
                this._linearMass = new FarseerPhysics.Common.Mat22();
            },
            ctor: function (body, localAnchorA) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor1.call(this, body);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.FixedFriction;
                this.LocalAnchorA = localAnchorA.$clone();

                var gravity = 10.0;

                var radius = Math.sqrt(2.0 * (body.Inertia / body.Mass));

                this.MaxForce = body.Mass * gravity;
                this.MaxTorque = body.Mass * radius * gravity;
            }
        },
        methods: {
            GetReactionForce: function (invDT) {
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2(invDT, this._linearImpulse.$clone());
            },
            GetReactionTorque: function (invDT) {
                return invDT * this._angularImpulse;
            },
            InitVelocityConstraints: function (step) {
                var bA = this.BodyA;

                var xfA = { v : new FarseerPhysics.Common.Transform() };
                bA.GetTransform(xfA);

                var rA = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfA.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), bA.LocalCenter.$clone()));



                var mA = bA.InvMass;
                var iA = bA.InvI;

                var K1 = { v : new FarseerPhysics.Common.Mat22.ctor() };
                K1.v.Col1.X = mA;
                K1.v.Col2.X = 0.0;
                K1.v.Col1.Y = 0.0;
                K1.v.Col2.Y = mA;

                var K2 = { v : new FarseerPhysics.Common.Mat22.ctor() };
                K2.v.Col1.X = iA * rA.Y * rA.Y;
                K2.v.Col2.X = -iA * rA.X * rA.Y;
                K2.v.Col1.Y = -iA * rA.X * rA.Y;
                K2.v.Col2.Y = iA * rA.X * rA.X;

                var K12 = { v : new FarseerPhysics.Common.Mat22() };
                FarseerPhysics.Common.Mat22.Add(K1, K2, K12);

                this._linearMass = K12.v.Inverse.$clone();

                this._angularMass = iA;
                if (this._angularMass > 0.0) {
                    this._angularMass = 1.0 / this._angularMass;
                }

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._linearImpulse = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._linearImpulse.$clone(), step.v.dtRatio);
                    this._angularImpulse *= step.v.dtRatio;

                    var P = new Microsoft.Xna.Framework.Vector2.$ctor2(this._linearImpulse.X, this._linearImpulse.Y);

                    bA.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Subtraction(bA.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(mA, P.$clone()));
                    bA.AngularVelocityInternal -= iA * (FarseerPhysics.Common.MathUtils.Cross$2(rA.$clone(), P.$clone()) + this._angularImpulse);
                } else {
                    this._linearImpulse = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    this._angularImpulse = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var bA = this.BodyA;

                var vA = bA.LinearVelocityInternal.$clone();
                var wA = bA.AngularVelocityInternal;

                var mA = bA.InvMass;
                var iA = bA.InvI;

                var xfA = { v : new FarseerPhysics.Common.Transform() };
                bA.GetTransform(xfA);

                var rA = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfA.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), bA.LocalCenter.$clone()));

                {
                    var Cdot = -wA;
                    var impulse = -this._angularMass * Cdot;

                    var oldImpulse = this._angularImpulse;
                    var maxImpulse = step.v.dt * this.MaxTorque;
                    this._angularImpulse = FarseerPhysics.Common.MathUtils.Clamp$2(this._angularImpulse + impulse, -maxImpulse, maxImpulse);
                    impulse = this._angularImpulse - oldImpulse;

                    wA -= iA * impulse;
                }

                {
                    var Cdot1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(vA.$clone()), FarseerPhysics.Common.MathUtils.Cross$1(wA, rA.$clone()));

                    var impulse1 = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(this, "_linearMass"), Cdot1.$clone()));
                    var oldImpulse1 = this._linearImpulse.$clone();
                    this._linearImpulse = Microsoft.Xna.Framework.Vector2.op_Addition(this._linearImpulse.$clone(), impulse1.$clone());

                    var maxImpulse1 = step.v.dt * this.MaxForce;

                    if (this._linearImpulse.LengthSquared() > maxImpulse1 * maxImpulse1) {
                        this._linearImpulse.Normalize();
                        this._linearImpulse = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._linearImpulse.$clone(), maxImpulse1);
                    }

                    impulse1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(this._linearImpulse.$clone(), oldImpulse1.$clone());

                    vA = Microsoft.Xna.Framework.Vector2.op_Subtraction(vA.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(mA, impulse1.$clone()));
                    wA -= iA * FarseerPhysics.Common.MathUtils.Cross$2(rA.$clone(), impulse1.$clone());
                }

                bA.LinearVelocityInternal = vA.$clone();
                bA.AngularVelocityInternal = wA;
            },
            SolvePositionConstraints: function () {
                return true;
            }
        }
    });

    Bridge.define("FarseerPhysics.Dynamics.Joints.FixedLineJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            _ax: null,
            _ay: null,
            _bias: 0,
            _enableMotor: false,
            _gamma: 0,
            _impulse: 0,
            _localXAxis: null,
            _localYAxisA: null,
            _mass: 0,
            _maxMotorTorque: 0,
            _motorImpulse: 0,
            _motorMass: 0,
            _motorSpeed: 0,
            _sAx: 0,
            _sAy: 0,
            _sBx: 0,
            _sBy: 0,
            _springImpulse: 0,
            _springMass: 0,
            LocalAnchorA: null,
            LocalAnchorB: null,
            Frequency: 0,
            DampingRatio: 0
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.LocalAnchorA.$clone();
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorB.$clone());
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            },
            JointTranslation: {
                get: function () {
                    var bA = this.BodyA;
                    var bB = this.BodyB;

                    var pA = bA.GetWorldPoint(this.LocalAnchorA.$clone());
                    var pB = bB.GetWorldPoint(this.LocalAnchorB.$clone());
                    var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(pB.$clone(), pA.$clone());
                    var axis = bA.GetWorldVector(this.LocalXAxis.$clone());

                    var translation = Microsoft.Xna.Framework.Vector2.Dot(d.$clone(), axis.$clone());
                    return translation;
                }
            },
            JointSpeed: {
                get: function () {
                    var wA = this.BodyA.AngularVelocityInternal;
                    var wB = this.BodyB.AngularVelocityInternal;
                    return wB - wA;
                }
            },
            MotorEnabled: {
                get: function () {
                    return this._enableMotor;
                },
                set: function (value) {
                    this.BodyA.Awake = true;
                    this.BodyB.Awake = true;
                    this._enableMotor = value;
                }
            },
            MotorSpeed: {
                get: function () {
                    return this._motorSpeed;
                },
                set: function (value) {
                    this.BodyA.Awake = true;
                    this.BodyB.Awake = true;
                    this._motorSpeed = value;
                }
            },
            MaxMotorTorque: {
                get: function () {
                    return this._maxMotorTorque;
                },
                set: function (value) {
                    this.BodyA.Awake = true;
                    this.BodyB.Awake = true;
                    this._maxMotorTorque = value;
                }
            },
            LocalXAxis: {
                get: function () {
                    return this._localXAxis.$clone();
                },
                set: function (value) {
                    this._localXAxis = value.$clone();
                    this._localYAxisA = FarseerPhysics.Common.MathUtils.Cross$1(1.0, this._localXAxis.$clone());
                }
            }
        },
        ctors: {
            init: function () {
                this._ax = new Microsoft.Xna.Framework.Vector2();
                this._ay = new Microsoft.Xna.Framework.Vector2();
                this._localXAxis = new Microsoft.Xna.Framework.Vector2();
                this._localYAxisA = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorB = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.ctor.call(this);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.FixedLine;
            },
            $ctor1: function (body, worldAnchor, axis) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor1.call(this, body);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.FixedLine;

                this.BodyB = this.BodyA;

                this.LocalAnchorA = worldAnchor.$clone();
                this.LocalAnchorB = this.BodyB.GetLocalPoint(worldAnchor.$clone());
                this.LocalXAxis = axis.$clone();
            }
        },
        methods: {
            GetReactionForce: function (invDt) {
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2(invDt, (Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse, this._ay.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._springImpulse, this._ax.$clone()))));
            },
            GetReactionTorque: function (invDt) {
                return invDt * this._motorImpulse;
            },
            InitVelocityConstraints: function (step) {
                var bB = this.BodyB;

                this.LocalCenterA = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                this.LocalCenterB = bB.LocalCenter.$clone();

                var xfB = { v : new FarseerPhysics.Common.Transform() };
                bB.GetTransform(xfB);

                var rA = this.LocalAnchorA.$clone();
                var rB = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfB.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), this.LocalCenterB.$clone()));
                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(bB.Sweep.C.$clone(), rB.$clone()), rA.$clone());

                this.InvMassA = 0.0;
                this.InvIA = 0.0;
                this.InvMassB = bB.InvMass;
                this.InvIB = bB.InvI;

                {
                    this._ay = this._localYAxisA.$clone();
                    this._sAy = FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Addition(d.$clone(), rA.$clone()), this._ay.$clone());
                    this._sBy = FarseerPhysics.Common.MathUtils.Cross$2(rB.$clone(), this._ay.$clone());

                    this._mass = this.InvMassA + this.InvMassB + this.InvIA * this._sAy * this._sAy + this.InvIB * this._sBy * this._sBy;

                    if (this._mass > 0.0) {
                        this._mass = 1.0 / this._mass;
                    }
                }

                this._springMass = 0.0;
                if (this.Frequency > 0.0) {
                    this._ax = this.LocalXAxis.$clone();
                    this._sAx = FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Addition(d.$clone(), rA.$clone()), this._ax.$clone());
                    this._sBx = FarseerPhysics.Common.MathUtils.Cross$2(rB.$clone(), this._ax.$clone());

                    var invMass = this.InvMassA + this.InvMassB + this.InvIA * this._sAx * this._sAx + this.InvIB * this._sBx * this._sBx;

                    if (invMass > 0.0) {
                        this._springMass = 1.0 / invMass;

                        var C = Microsoft.Xna.Framework.Vector2.Dot(d.$clone(), this._ax.$clone());

                        var omega = 6.28318548 * this.Frequency;

                        var da = 2.0 * this._springMass * this.DampingRatio * omega;

                        var k = this._springMass * omega * omega;

                        this._gamma = step.v.dt * (da + step.v.dt * k);
                        if (this._gamma > 0.0) {
                            this._gamma = 1.0 / this._gamma;
                        }

                        this._bias = C * step.v.dt * k * this._gamma;

                        this._springMass = invMass + this._gamma;
                        if (this._springMass > 0.0) {
                            this._springMass = 1.0 / this._springMass;
                        }
                    }
                } else {
                    this._springImpulse = 0.0;
                    this._springMass = 0.0;
                }

                if (this._enableMotor) {
                    this._motorMass = this.InvIA + this.InvIB;
                    if (this._motorMass > 0.0) {
                        this._motorMass = 1.0 / this._motorMass;
                    }
                } else {
                    this._motorMass = 0.0;
                    this._motorImpulse = 0.0;
                }

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._impulse *= step.v.dtRatio;
                    this._springImpulse *= step.v.dtRatio;
                    this._motorImpulse *= step.v.dtRatio;

                    var P = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse, this._ay.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._springImpulse, this._ax.$clone()));
                    var LB = this._impulse * this._sBy + this._springImpulse * this._sBx + this._motorImpulse;

                    bB.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(bB.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P.$clone()));
                    bB.AngularVelocityInternal += this.InvIB * LB;
                } else {
                    this._impulse = 0.0;
                    this._springImpulse = 0.0;
                    this._motorImpulse = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var bB = this.BodyB;

                var vA = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                var wA = 0.0;
                var vB = bB.LinearVelocityInternal.$clone();
                var wB = bB.AngularVelocityInternal;

                {
                    var Cdot = Microsoft.Xna.Framework.Vector2.Dot(this._ax.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(vB.$clone(), vA.$clone())) + this._sBx * wB - this._sAx * wA;
                    var impulse = -this._springMass * (Cdot + this._bias + this._gamma * this._springImpulse);
                    this._springImpulse += impulse;

                    var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, this._ax.$clone());
                    var LA = impulse * this._sAx;
                    var LB = impulse * this._sBx;

                    vA = Microsoft.Xna.Framework.Vector2.op_Subtraction(vA.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassA, P.$clone()));
                    wA -= this.InvIA * LA;

                    vB = Microsoft.Xna.Framework.Vector2.op_Addition(vB.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P.$clone()));
                    wB += this.InvIB * LB;
                }

                {
                    var Cdot1 = wB - wA - this._motorSpeed;
                    var impulse1 = -this._motorMass * Cdot1;

                    var oldImpulse = this._motorImpulse;
                    var maxImpulse = step.v.dt * this._maxMotorTorque;
                    this._motorImpulse = FarseerPhysics.Common.MathUtils.Clamp$2(this._motorImpulse + impulse1, -maxImpulse, maxImpulse);
                    impulse1 = this._motorImpulse - oldImpulse;

                    wA -= this.InvIA * impulse1;
                    wB += this.InvIB * impulse1;
                }

                {
                    var Cdot2 = Microsoft.Xna.Framework.Vector2.Dot(this._ay.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(vB.$clone(), vA.$clone())) + this._sBy * wB - this._sAy * wA;
                    var impulse2 = this._mass * (-Cdot2);
                    this._impulse += impulse2;

                    var P1 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse2, this._ay.$clone());
                    var LB1 = impulse2 * this._sBy;

                    vB = Microsoft.Xna.Framework.Vector2.op_Addition(vB.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P1.$clone()));
                    wB += this.InvIB * LB1;
                }

                bB.LinearVelocityInternal = vB.$clone();
                bB.AngularVelocityInternal = wB;
            },
            SolvePositionConstraints: function () {
                var bB = this.BodyB;

                var xA = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                var angleA = 0.0;

                var xB = bB.Sweep.C.$clone();
                var angleB = bB.Sweep.A;

                var RA = { v : new FarseerPhysics.Common.Mat22.$ctor2(angleA) };
                var RB = { v : new FarseerPhysics.Common.Mat22.$ctor2(angleB) };

                var rA = FarseerPhysics.Common.MathUtils.Multiply(RA, Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), this.LocalCenterA.$clone()));
                var rB = FarseerPhysics.Common.MathUtils.Multiply(RB, Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), this.LocalCenterB.$clone()));
                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(xB.$clone(), rB.$clone()), xA.$clone()), rA.$clone());

                var ay = FarseerPhysics.Common.MathUtils.Multiply(RA, this._localYAxisA.$clone());

                var sBy = FarseerPhysics.Common.MathUtils.Cross$2(rB.$clone(), ay.$clone());

                var C = Microsoft.Xna.Framework.Vector2.Dot(d.$clone(), ay.$clone());

                var k = this.InvMassA + this.InvMassB + this.InvIA * this._sAy * this._sAy + this.InvIB * this._sBy * this._sBy;

                var impulse;
                if (k !== 0.0) {
                    impulse = -C / k;
                } else {
                    impulse = 0.0;
                }

                var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, ay.$clone());
                var LB = impulse * sBy;

                xB = Microsoft.Xna.Framework.Vector2.op_Addition(xB.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P.$clone()));
                angleB += this.InvIB * LB;

                bB.Sweep.C = xB.$clone();
                bB.Sweep.A = angleB;
                bB.SynchronizeTransform();

                return Math.abs(C) <= FarseerPhysics.Settings.LinearSlop;
            },
            GetMotorTorque: function (invDt) {
                return invDt * this._motorImpulse;
            }
        }
    });

    /**
     * A mouse joint is used to make a point on a body track a
     specified world point. This a soft constraint with a maximum
     force. This allows the constraint to stretch and without
     applying huge forces.
     NOTE: this joint is not documented in the manual because it was
     developed to be used in the testbed. If you want to learn how to
     use the mouse joint, look at the testbed.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.FixedMouseJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.FixedMouseJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            LocalAnchorA: null,
            _C: null,
            _beta: 0,
            _gamma: 0,
            _impulse: null,
            _mass: null,
            _worldAnchor: null,
            /**
             * The maximum constraint force that can be exerted
             to move the candidate body. Usually you will express
             as some multiple of the weight (multiplier * mass * gravity).
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedMouseJoint
             * @function MaxForce
             * @type number
             */
            MaxForce: 0,
            /**
             * The response speed.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedMouseJoint
             * @function Frequency
             * @type number
             */
            Frequency: 0,
            /**
             * The damping ratio. 0 = no damping, 1 = critical damping.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedMouseJoint
             * @function DampingRatio
             * @type number
             */
            DampingRatio: 0
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this._worldAnchor.$clone();
                },
                set: function (value) {
                    this.BodyA.Awake = true;
                    this._worldAnchor = value.$clone();
                }
            }
        },
        ctors: {
            init: function () {
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this._C = new Microsoft.Xna.Framework.Vector2();
                this._impulse = new Microsoft.Xna.Framework.Vector2();
                this._mass = new FarseerPhysics.Common.Mat22();
                this._worldAnchor = new Microsoft.Xna.Framework.Vector2();
            },
            /**
             * This requires a world target point,
             tuning parameters, and the time step.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.FixedMouseJoint
             * @memberof FarseerPhysics.Dynamics.Joints.FixedMouseJoint
             * @param   {FarseerPhysics.Dynamics.Body}       body           The body.
             * @param   {Microsoft.Xna.Framework.Vector2}    worldAnchor    The target.
             * @return  {void}
             */
            ctor: function (body, worldAnchor) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor1.call(this, body);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.FixedMouse;
                this.Frequency = 5.0;
                this.DampingRatio = 0.7;

                System.Diagnostics.Debug.Assert(FarseerPhysics.Common.MathUtils.IsValid(worldAnchor));

                var xf1 = { v : new FarseerPhysics.Common.Transform() };
                this.BodyA.GetTransform(xf1);

                this._worldAnchor = worldAnchor.$clone();
                this.LocalAnchorA = this.BodyA.GetLocalPoint(worldAnchor.$clone());
            }
        },
        methods: {
            GetReactionForce: function (inv_dt) {
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2(inv_dt, this._impulse.$clone());
            },
            GetReactionTorque: function (inv_dt) {
                return inv_dt * 0.0;
            },
            InitVelocityConstraints: function (step) {
                var b = this.BodyA;

                var mass = b.Mass;

                var omega = 6.28318548 * this.Frequency;

                var d = 2.0 * mass * this.DampingRatio * omega;

                var k = mass * (omega * omega);

                System.Diagnostics.Debug.Assert(d + step.v.dt * k > FarseerPhysics.Settings.Epsilon);

                this._gamma = step.v.dt * (d + step.v.dt * k);
                if (this._gamma !== 0.0) {
                    this._gamma = 1.0 / this._gamma;
                }

                this._beta = step.v.dt * k * this._gamma;

                var xf1 = { v : new FarseerPhysics.Common.Transform() };
                b.GetTransform(xf1);
                var r = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b.LocalCenter.$clone()));

                var invMass = b.InvMass;
                var invI = b.InvI;

                var K1 = { v : new FarseerPhysics.Common.Mat22.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(invMass, 0.0), new Microsoft.Xna.Framework.Vector2.$ctor2(0.0, invMass)) };
                var K2 = { v : new FarseerPhysics.Common.Mat22.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(invI * r.Y * r.Y, -invI * r.X * r.Y), new Microsoft.Xna.Framework.Vector2.$ctor2(-invI * r.X * r.Y, invI * r.X * r.X)) };

                var K = { v : new FarseerPhysics.Common.Mat22() };
                FarseerPhysics.Common.Mat22.Add(K1, K2, K);

                K.v.Col1.X += this._gamma;
                K.v.Col2.Y += this._gamma;

                this._mass = K.v.Inverse.$clone();

                this._C = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(b.Sweep.C.$clone(), r.$clone()), this._worldAnchor.$clone());

                b.AngularVelocityInternal *= 0.98;

                this._impulse = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._impulse.$clone(), step.v.dtRatio);
                b.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(invMass, this._impulse.$clone()));
                b.AngularVelocityInternal += invI * FarseerPhysics.Common.MathUtils.Cross$2(r.$clone(), this._impulse.$clone());
            },
            SolveVelocityConstraints: function (step) {
                var b = this.BodyA;

                var xf1 = { v : new FarseerPhysics.Common.Transform() };
                b.GetTransform(xf1);

                var r = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b.LocalCenter.$clone()));

                var Cdot = Microsoft.Xna.Framework.Vector2.op_Addition(b.LinearVelocityInternal.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(b.AngularVelocityInternal, r.$clone()));
                var impulse = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(this, "_mass"), Microsoft.Xna.Framework.Vector2.op_UnaryNegation((Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Addition(Cdot.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._beta, this._C.$clone())), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._gamma, this._impulse.$clone())))));

                var oldImpulse = this._impulse.$clone();
                this._impulse = Microsoft.Xna.Framework.Vector2.op_Addition(this._impulse.$clone(), impulse.$clone());
                var maxImpulse = step.v.dt * this.MaxForce;
                if (this._impulse.LengthSquared() > maxImpulse * maxImpulse) {
                    this._impulse = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._impulse.$clone(), maxImpulse / this._impulse.Length());
                }
                impulse = Microsoft.Xna.Framework.Vector2.op_Subtraction(this._impulse.$clone(), oldImpulse.$clone());

                b.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b.InvMass, impulse.$clone()));
                b.AngularVelocityInternal += b.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r.$clone(), impulse.$clone());
            },
            SolvePositionConstraints: function () {
                return true;
            }
        }
    });

    /**
     * A prismatic joint. This joint provides one degree of freedom: translation
     along an axis fixed in body1. Relative rotation is prevented. You can
     use a joint limit to restrict the range of motion and a joint motor to
     drive the motion or to model joint friction.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            _K: null,
            _a1: 0,
            _a2: 0,
            _axis: null,
            _enableLimit: false,
            _enableMotor: false,
            _impulse: null,
            _limitState: 0,
            _localXAxis1: null,
            _localYAxis1: null,
            _lowerTranslation: 0,
            _maxMotorForce: 0,
            _motorMass: 0,
            _motorSpeed: 0,
            _perp: null,
            _refAngle: 0,
            _s1: 0,
            _s2: 0,
            _upperTranslation: 0,
            LocalAnchorA: null,
            LocalAnchorB: null,
            /**
             * Get the current motor force, usually in N.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint
             * @function MotorForce
             * @type number
             */
            MotorForce: 0
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.LocalAnchorA.$clone();
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorB.$clone());
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            },
            /**
             * Get the current joint translation, usually in meters.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint
             * @function JointTranslation
             * @type number
             */
            JointTranslation: {
                get: function () {
                    var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.BodyB.GetWorldPoint(this.LocalAnchorB.$clone()), this.LocalAnchorA.$clone());
                    var axis = this._localXAxis1.$clone();

                    return Microsoft.Xna.Framework.Vector2.Dot(d.$clone(), axis.$clone());
                }
            },
            /**
             * Get the current joint translation speed, usually in meters per second.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint
             * @function JointSpeed
             * @type number
             */
            JointSpeed: {
                get: function () {
                    var xf2 = { v : new FarseerPhysics.Common.Transform() };
                    this.BodyB.GetTransform(xf2);

                    var r1 = this.LocalAnchorA.$clone();
                    var r2 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), this.BodyB.LocalCenter.$clone()));
                    var p1 = r1.$clone();
                    var p2 = Microsoft.Xna.Framework.Vector2.op_Addition(this.BodyB.Sweep.C.$clone(), r2.$clone());
                    var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.$clone(), p1.$clone());
                    var axis = this._localXAxis1.$clone();

                    var v1 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    var v2 = this.BodyB.LinearVelocityInternal.$clone();
                    var w1 = 0.0;
                    var w2 = this.BodyB.AngularVelocityInternal;

                    var speed = Microsoft.Xna.Framework.Vector2.Dot(d.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(w1, axis.$clone())) + Microsoft.Xna.Framework.Vector2.Dot(axis.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(w2, r2.$clone())), v1.$clone()), FarseerPhysics.Common.MathUtils.Cross$1(w1, r1.$clone())));
                    return speed;
                }
            },
            /**
             * Is the joint limit enabled?
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint
             * @function LimitEnabled
             * @type boolean
             */
            LimitEnabled: {
                get: function () {
                    return this._enableLimit;
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(this.BodyA.FixedRotation === false, "Warning: limits does currently not work with fixed rotation");

                    this.WakeBodies();
                    this._enableLimit = value;
                }
            },
            /**
             * Get the lower joint limit, usually in meters.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint
             * @function LowerLimit
             * @type number
             */
            LowerLimit: {
                get: function () {
                    return this._lowerTranslation;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._lowerTranslation = value;
                }
            },
            /**
             * Get the upper joint limit, usually in meters.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint
             * @function UpperLimit
             * @type number
             */
            UpperLimit: {
                get: function () {
                    return this._upperTranslation;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._upperTranslation = value;
                }
            },
            /**
             * Is the joint motor enabled?
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint
             * @function MotorEnabled
             * @type boolean
             */
            MotorEnabled: {
                get: function () {
                    return this._enableMotor;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._enableMotor = value;
                }
            },
            /**
             * Set the motor speed, usually in meters per second.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint
             * @function MotorSpeed
             * @type number
             */
            MotorSpeed: {
                get: function () {
                    return this._motorSpeed;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._motorSpeed = value;
                }
            },
            /**
             * Set the maximum motor force, usually in N.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint
             * @function MaxMotorForce
             * @type number
             */
            MaxMotorForce: {
                set: function (value) {
                    this.WakeBodies();
                    this._maxMotorForce = value;
                }
            },
            LocalXAxis1: {
                get: function () {
                    return this._localXAxis1.$clone();
                },
                set: function (value) {
                    this._localXAxis1 = value.$clone();
                    this._localYAxis1 = FarseerPhysics.Common.MathUtils.Cross$1(1.0, this._localXAxis1.$clone());
                }
            }
        },
        ctors: {
            init: function () {
                this._K = new FarseerPhysics.Common.Mat33();
                this._axis = new Microsoft.Xna.Framework.Vector2();
                this._impulse = new Microsoft.Xna.Framework.Vector3();
                this._localXAxis1 = new Microsoft.Xna.Framework.Vector2();
                this._localYAxis1 = new Microsoft.Xna.Framework.Vector2();
                this._perp = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorB = new Microsoft.Xna.Framework.Vector2();
            },
            /**
             * This requires defining a line of
             motion using an axis and an anchor point. The definition uses local
             anchor points and a local axis so that the initial configuration
             can violate the constraint slightly. The joint translation is zero
             when the local anchor points coincide in world space. Using local
             anchors and a local axis helps when saving and loading a game.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint
             * @memberof FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint
             * @param   {FarseerPhysics.Dynamics.Body}       body           The body.
             * @param   {Microsoft.Xna.Framework.Vector2}    worldAnchor    The anchor.
             * @param   {Microsoft.Xna.Framework.Vector2}    axis           The axis.
             * @return  {void}
             */
            ctor: function (body, worldAnchor, axis) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor1.call(this, body);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.FixedPrismatic;

                this.BodyB = this.BodyA;

                this.LocalAnchorA = worldAnchor.$clone();
                this.LocalAnchorB = this.BodyB.GetLocalPoint(worldAnchor.$clone());

                this._localXAxis1 = axis.$clone();
                this._localYAxis1 = FarseerPhysics.Common.MathUtils.Cross$1(1.0, this._localXAxis1.$clone());
                this._refAngle = this.BodyB.Rotation;

                this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
            }
        },
        methods: {
            GetReactionForce: function (inv_dt) {
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2(inv_dt, (Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse.X, this._perp.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2((this.MotorForce + this._impulse.Z), this._axis.$clone()))));
            },
            GetReactionTorque: function (inv_dt) {
                return inv_dt * this._impulse.Y;
            },
            InitVelocityConstraints: function (step) {
                var bB = this.BodyB;

                this.LocalCenterA = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                this.LocalCenterB = bB.LocalCenter.$clone();

                var xf2 = { v : new FarseerPhysics.Common.Transform() };
                bB.GetTransform(xf2);

                var r1 = this.LocalAnchorA.$clone();
                var r2 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), this.LocalCenterB.$clone()));
                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(bB.Sweep.C.$clone(), r2.$clone()), r1.$clone());

                this.InvMassA = 0.0;
                this.InvIA = 0.0;
                this.InvMassB = bB.InvMass;
                this.InvIB = bB.InvI;

                {
                    this._axis = this._localXAxis1.$clone();
                    this._a1 = FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Addition(d.$clone(), r1.$clone()), this._axis.$clone());
                    this._a2 = FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), this._axis.$clone());

                    this._motorMass = this.InvMassA + this.InvMassB + this.InvIA * this._a1 * this._a1 + this.InvIB * this._a2 * this._a2;

                    if (this._motorMass > FarseerPhysics.Settings.Epsilon) {
                        this._motorMass = 1.0 / this._motorMass;
                    }
                }

                {
                    this._perp = this._localYAxis1.$clone();

                    this._s1 = FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Addition(d.$clone(), r1.$clone()), this._perp.$clone());
                    this._s2 = FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), this._perp.$clone());

                    var m1 = this.InvMassA, m2 = this.InvMassB;
                    var i1 = this.InvIA, i2 = this.InvIB;

                    var k11 = m1 + m2 + i1 * this._s1 * this._s1 + i2 * this._s2 * this._s2;
                    var k12 = i1 * this._s1 + i2 * this._s2;
                    var k13 = i1 * this._s1 * this._a1 + i2 * this._s2 * this._a2;
                    var k22 = i1 + i2;
                    var k23 = i1 * this._a1 + i2 * this._a2;
                    var k33 = m1 + m2 + i1 * this._a1 * this._a1 + i2 * this._a2 * this._a2;

                    this._K.Col1 = new Microsoft.Xna.Framework.Vector3.$ctor3(k11, k12, k13);
                    this._K.Col2 = new Microsoft.Xna.Framework.Vector3.$ctor3(k12, k22, k23);
                    this._K.Col3 = new Microsoft.Xna.Framework.Vector3.$ctor3(k13, k23, k33);
                }

                if (this._enableLimit) {
                    var jointTranslation = Microsoft.Xna.Framework.Vector2.Dot(this._axis.$clone(), d.$clone());
                    if (Math.abs(this._upperTranslation - this._lowerTranslation) < 0.01) {
                        this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Equal;
                    } else if (jointTranslation <= this._lowerTranslation) {
                        if (this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.AtLower) {
                            this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.AtLower;
                            this._impulse.Z = 0.0;
                        }
                    } else if (jointTranslation >= this._upperTranslation) {
                        if (this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                            this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.AtUpper;
                            this._impulse.Z = 0.0;
                        }
                    } else {
                        this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
                        this._impulse.Z = 0.0;
                    }
                } else {
                    this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
                }

                if (this._enableMotor === false) {
                    this.MotorForce = 0.0;
                }

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._impulse = Microsoft.Xna.Framework.Vector3.op_Multiply$1(this._impulse.$clone(), step.v.dtRatio);
                    this.MotorForce *= step.v.dtRatio;

                    var P = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse.X, this._perp.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2((this.MotorForce + this._impulse.Z), this._axis.$clone()));
                    var L2 = this._impulse.X * this._s2 + this._impulse.Y + (this.MotorForce + this._impulse.Z) * this._a2;

                    bB.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(bB.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P.$clone()));
                    bB.AngularVelocityInternal += this.InvIB * L2;
                } else {
                    this._impulse = Microsoft.Xna.Framework.Vector3.Zero.$clone();
                    this.MotorForce = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var bB = this.BodyB;

                var v1 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                var w1 = 0.0;
                var v2 = bB.LinearVelocityInternal.$clone();
                var w2 = bB.AngularVelocityInternal;

                if (this._enableMotor && this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.Equal) {
                    var Cdot = Microsoft.Xna.Framework.Vector2.Dot(this._axis.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(v2.$clone(), v1.$clone())) + this._a2 * w2 - this._a1 * w1;
                    var impulse = this._motorMass * (this._motorSpeed - Cdot);
                    var oldImpulse = this.MotorForce;
                    var maxImpulse = step.v.dt * this._maxMotorForce;
                    this.MotorForce = FarseerPhysics.Common.MathUtils.Clamp$2(this.MotorForce + impulse, -maxImpulse, maxImpulse);
                    impulse = this.MotorForce - oldImpulse;

                    var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, this._axis.$clone());
                    var L1 = impulse * this._a1;
                    var L2 = impulse * this._a2;

                    v1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(v1.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassA, P.$clone()));
                    w1 -= this.InvIA * L1;

                    v2 = Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P.$clone()));
                    w2 += this.InvIB * L2;
                }

                var Cdot1 = new Microsoft.Xna.Framework.Vector2.$ctor2(Microsoft.Xna.Framework.Vector2.Dot(this._perp.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(v2.$clone(), v1.$clone())) + this._s2 * w2 - this._s1 * w1, w2 - w1);

                if (this._enableLimit && this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.Inactive) {
                    var Cdot2 = Microsoft.Xna.Framework.Vector2.Dot(this._axis.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(v2.$clone(), v1.$clone())) + this._a2 * w2 - this._a1 * w1;
                    var Cdot3 = new Microsoft.Xna.Framework.Vector3.$ctor3(Cdot1.X, Cdot1.Y, Cdot2);

                    var f1 = this._impulse.$clone();
                    var df = this._K.Solve33(Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Cdot3.$clone()));
                    this._impulse = Microsoft.Xna.Framework.Vector3.op_Addition(this._impulse.$clone(), df.$clone());

                    if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.AtLower) {
                        this._impulse.Z = Math.max(this._impulse.Z, 0.0);
                    } else if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                        this._impulse.Z = Math.min(this._impulse.Z, 0.0);
                    }

                    var b = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Cdot1.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2((this._impulse.Z - f1.Z), new Microsoft.Xna.Framework.Vector2.$ctor2(this._K.Col3.X, this._K.Col3.Y)));
                    var f2r = Microsoft.Xna.Framework.Vector2.op_Addition(this._K.Solve22(b.$clone()), new Microsoft.Xna.Framework.Vector2.$ctor2(f1.X, f1.Y));
                    this._impulse.X = f2r.X;
                    this._impulse.Y = f2r.Y;

                    df = Microsoft.Xna.Framework.Vector3.op_Subtraction(this._impulse.$clone(), f1.$clone());

                    var P1 = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(df.X, this._perp.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(df.Z, this._axis.$clone()));
                    var L21 = df.X * this._s2 + df.Y + df.Z * this._a2;

                    v2 = Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P1.$clone()));
                    w2 += this.InvIB * L21;
                } else {
                    var df1 = this._K.Solve22(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Cdot1.$clone()));
                    this._impulse.X += df1.X;
                    this._impulse.Y += df1.Y;

                    var P2 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(df1.X, this._perp.$clone());
                    var L22 = df1.X * this._s2 + df1.Y;

                    v2 = Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P2.$clone()));
                    w2 += this.InvIB * L22;
                }

                bB.LinearVelocityInternal = v2.$clone();
                bB.AngularVelocityInternal = w2;
            },
            SolvePositionConstraints: function () {
                var b2 = this.BodyB;

                var c1 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                var a1 = 0.0;

                var c2 = b2.Sweep.C.$clone();
                var a2 = b2.Sweep.A;

                var linearError = 0.0;
                var active = false;
                var C2 = 0.0;

                var R1 = { v : new FarseerPhysics.Common.Mat22.$ctor2(a1) };
                var R2 = { v : new FarseerPhysics.Common.Mat22.$ctor2(a2) };

                var r1 = FarseerPhysics.Common.MathUtils.Multiply(R1, Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), this.LocalCenterA.$clone()));
                var r2 = FarseerPhysics.Common.MathUtils.Multiply(R2, Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), this.LocalCenterB.$clone()));
                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(c2.$clone(), r2.$clone()), c1.$clone()), r1.$clone());

                if (this._enableLimit) {
                    this._axis = FarseerPhysics.Common.MathUtils.Multiply(R1, this._localXAxis1.$clone());

                    this._a1 = FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Addition(d.$clone(), r1.$clone()), this._axis.$clone());
                    this._a2 = FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), this._axis.$clone());

                    var translation = Microsoft.Xna.Framework.Vector2.Dot(this._axis.$clone(), d.$clone());
                    if (Math.abs(this._upperTranslation - this._lowerTranslation) < 0.01) {
                        C2 = FarseerPhysics.Common.MathUtils.Clamp$2(translation, -0.2, FarseerPhysics.Settings.MaxLinearCorrection);
                        linearError = Math.abs(translation);
                        active = true;
                    } else if (translation <= this._lowerTranslation) {
                        C2 = FarseerPhysics.Common.MathUtils.Clamp$2(translation - this._lowerTranslation + FarseerPhysics.Settings.LinearSlop, -0.2, 0.0);
                        linearError = this._lowerTranslation - translation;
                        active = true;
                    } else if (translation >= this._upperTranslation) {
                        C2 = FarseerPhysics.Common.MathUtils.Clamp$2(translation - this._upperTranslation - FarseerPhysics.Settings.LinearSlop, 0.0, FarseerPhysics.Settings.MaxLinearCorrection);
                        linearError = translation - this._upperTranslation;
                        active = true;
                    }
                }

                this._perp = FarseerPhysics.Common.MathUtils.Multiply(R1, this._localYAxis1.$clone());

                this._s1 = FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Addition(d.$clone(), r1.$clone()), this._perp.$clone());
                this._s2 = FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), this._perp.$clone());

                var impulse = new Microsoft.Xna.Framework.Vector3();
                var C1 = new Microsoft.Xna.Framework.Vector2.$ctor2(Microsoft.Xna.Framework.Vector2.Dot(this._perp.$clone(), d.$clone()), a2 - a1 - this._refAngle);

                linearError = Math.max(linearError, Math.abs(C1.X));
                var angularError = Math.abs(C1.Y);

                if (active) {
                    var m1 = this.InvMassA, m2 = this.InvMassB;
                    var i1 = this.InvIA, i2 = this.InvIB;

                    var k11 = m1 + m2 + i1 * this._s1 * this._s1 + i2 * this._s2 * this._s2;
                    var k12 = i1 * this._s1 + i2 * this._s2;
                    var k13 = i1 * this._s1 * this._a1 + i2 * this._s2 * this._a2;
                    var k22 = i1 + i2;
                    var k23 = i1 * this._a1 + i2 * this._a2;
                    var k33 = m1 + m2 + i1 * this._a1 * this._a1 + i2 * this._a2 * this._a2;

                    this._K.Col1 = new Microsoft.Xna.Framework.Vector3.$ctor3(k11, k12, k13);
                    this._K.Col2 = new Microsoft.Xna.Framework.Vector3.$ctor3(k12, k22, k23);
                    this._K.Col3 = new Microsoft.Xna.Framework.Vector3.$ctor3(k13, k23, k33);

                    var C = new Microsoft.Xna.Framework.Vector3.$ctor3(-C1.X, -C1.Y, -C2);
                    impulse = this._K.Solve33(C.$clone());
                } else {
                    var m11 = this.InvMassA, m21 = this.InvMassB;
                    var i11 = this.InvIA, i21 = this.InvIB;

                    var k111 = m11 + m21 + i11 * this._s1 * this._s1 + i21 * this._s2 * this._s2;
                    var k121 = i11 * this._s1 + i21 * this._s2;
                    var k221 = i11 + i21;

                    this._K.Col1 = new Microsoft.Xna.Framework.Vector3.$ctor3(k111, k121, 0.0);
                    this._K.Col2 = new Microsoft.Xna.Framework.Vector3.$ctor3(k121, k221, 0.0);

                    var impulse1 = this._K.Solve22(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(C1.$clone()));
                    impulse.X = impulse1.X;
                    impulse.Y = impulse1.Y;
                    impulse.Z = 0.0;
                }

                var P = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse.X, this._perp.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse.Z, this._axis.$clone()));
                var L2 = impulse.X * this._s2 + impulse.Y + impulse.Z * this._a2;

                c2 = Microsoft.Xna.Framework.Vector2.op_Addition(c2.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P.$clone()));
                a2 += this.InvIB * L2;

                b2.Sweep.C = c2.$clone();
                b2.Sweep.A = a2;
                b2.SynchronizeTransform();

                return linearError <= FarseerPhysics.Settings.LinearSlop && angularError <= FarseerPhysics.Settings.AngularSlop;
            }
        }
    });

    /**
     * A revolute joint rains to bodies to share a common point while they
     are free to rotate about the point. The relative rotation about the shared
     point is the joint angle. You can limit the relative rotation with
     a joint limit that specifies a lower and upper angle. You can use a motor
     to drive the relative rotation about the shared point. A maximum motor torque
     is provided so that infinite forces are not generated.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            _enableLimit: false,
            _enableMotor: false,
            _impulse: null,
            _limitState: 0,
            _lowerAngle: 0,
            _mass: null,
            _maxMotorTorque: 0,
            _motorImpulse: 0,
            _motorMass: 0,
            _motorSpeed: 0,
            _upperAngle: 0,
            _worldAnchor: null,
            LocalAnchorA: null,
            ReferenceAngle: 0
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this._worldAnchor.$clone();
                },
                set: function (value) {
                    this._worldAnchor = value.$clone();
                }
            },
            /**
             * Get the current joint angle in radians.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint
             * @function JointAngle
             * @type number
             */
            JointAngle: {
                get: function () {
                    return this.BodyA.Sweep.A - this.ReferenceAngle;
                }
            },
            /**
             * Get the current joint angle speed in radians per second.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint
             * @function JointSpeed
             * @type number
             */
            JointSpeed: {
                get: function () {
                    return this.BodyA.AngularVelocityInternal;
                }
            },
            /**
             * Is the joint limit enabled?
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint
             * @function LimitEnabled
             * @type boolean
             */
            LimitEnabled: {
                get: function () {
                    return this._enableLimit;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._enableLimit = value;
                }
            },
            /**
             * Get the lower joint limit in radians.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint
             * @function LowerLimit
             * @type number
             */
            LowerLimit: {
                get: function () {
                    return this._lowerAngle;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._lowerAngle = value;
                }
            },
            /**
             * Get the upper joint limit in radians.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint
             * @function UpperLimit
             * @type number
             */
            UpperLimit: {
                get: function () {
                    return this._upperAngle;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._upperAngle = value;
                }
            },
            /**
             * Is the joint motor enabled?
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint
             * @function MotorEnabled
             * @type boolean
             */
            MotorEnabled: {
                get: function () {
                    return this._enableMotor;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._enableMotor = value;
                }
            },
            /**
             * Set the motor speed in radians per second.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint
             * @function MotorSpeed
             * @type number
             */
            MotorSpeed: {
                get: function () {
                    return this._motorSpeed;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._motorSpeed = value;
                }
            },
            /**
             * Set the maximum motor torque, usually in N-m.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint
             * @function MaxMotorTorque
             * @type number
             */
            MaxMotorTorque: {
                get: function () {
                    return this._maxMotorTorque;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._maxMotorTorque = value;
                }
            },
            /**
             * Get the current motor torque, usually in N-m.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint
             * @function MotorTorque
             * @type number
             */
            MotorTorque: {
                get: function () {
                    return this._motorImpulse;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._motorImpulse = value;
                }
            }
        },
        ctors: {
            init: function () {
                this._impulse = new Microsoft.Xna.Framework.Vector3();
                this._mass = new FarseerPhysics.Common.Mat33();
                this._worldAnchor = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
            },
            /**
             * Initialize the bodies, anchors, and reference angle using the world
             anchor.
             This requires defining an
             anchor point where the bodies are joined. The definition
             uses local anchor points so that the initial configuration
             can violate the constraint slightly. You also need to
             specify the initial relative angle for joint limits. This
             helps when saving and loading a game.
             The local anchor points are measured from the body's origin
             rather than the center of mass because:
             1. you might not know where the center of mass will be.
             2. if you add/remove shapes from a body and recompute the mass,
             the joints will be broken.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint
             * @memberof FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint
             * @param   {FarseerPhysics.Dynamics.Body}       body           The body.
             * @param   {Microsoft.Xna.Framework.Vector2}    bodyAnchor     The body anchor.
             * @param   {Microsoft.Xna.Framework.Vector2}    worldAnchor    The world anchor.
             * @return  {void}
             */
            ctor: function (body, bodyAnchor, worldAnchor) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor1.call(this, body);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.FixedRevolute;

                this.LocalAnchorA = bodyAnchor.$clone();
                this._worldAnchor = worldAnchor.$clone();

                this.ReferenceAngle = -this.BodyA.Rotation;

                this._impulse = Microsoft.Xna.Framework.Vector3.Zero.$clone();

                this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
            }
        },
        methods: {
            GetReactionForce: function (inv_dt) {
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2(inv_dt, new Microsoft.Xna.Framework.Vector2.$ctor2(this._impulse.X, this._impulse.Y));
            },
            GetReactionTorque: function (inv_dt) {
                return inv_dt * this._impulse.Z;
            },
            InitVelocityConstraints: function (step) {
                var b1 = this.BodyA;

                if (this._enableMotor || this._enableLimit) {
                    System.Diagnostics.Debug.Assert(b1.InvI > 0.0);
                }

                var xf1 = { v : new FarseerPhysics.Common.Transform() };
                b1.GetTransform(xf1);

                var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));
                var r2 = this._worldAnchor.$clone();



                var m1 = b1.InvMass;
                var m2 = 0;
                var i1 = b1.InvI;
                var i2 = 0;

                this._mass.Col1.X = m1 + m2 + r1.Y * r1.Y * i1 + r2.Y * r2.Y * i2;
                this._mass.Col2.X = -r1.Y * r1.X * i1 - r2.Y * r2.X * i2;
                this._mass.Col3.X = -r1.Y * i1 - r2.Y * i2;
                this._mass.Col1.Y = this._mass.Col2.X;
                this._mass.Col2.Y = m1 + m2 + r1.X * r1.X * i1 + r2.X * r2.X * i2;
                this._mass.Col3.Y = r1.X * i1 + r2.X * i2;
                this._mass.Col1.Z = this._mass.Col3.X;
                this._mass.Col2.Z = this._mass.Col3.Y;
                this._mass.Col3.Z = i1 + i2;

                this._motorMass = i1 + i2;
                if (this._motorMass > 0.0) {
                    this._motorMass = 1.0 / this._motorMass;
                }

                if (this._enableMotor === false) {
                    this._motorImpulse = 0.0;
                }

                if (this._enableLimit) {
                    var jointAngle = 0 - b1.Sweep.A - this.ReferenceAngle;
                    if (Math.abs(this._upperAngle - this._lowerAngle) < 0.06981318) {
                        this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Equal;
                    } else if (jointAngle <= this._lowerAngle) {
                        if (this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.AtLower) {
                            this._impulse.Z = 0.0;
                        }
                        this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.AtLower;
                    } else if (jointAngle >= this._upperAngle) {
                        if (this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                            this._impulse.Z = 0.0;
                        }
                        this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.AtUpper;
                    } else {
                        this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
                        this._impulse.Z = 0.0;
                    }
                } else {
                    this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
                }

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._impulse = Microsoft.Xna.Framework.Vector3.op_Multiply$1(this._impulse.$clone(), step.v.dtRatio);
                    this._motorImpulse *= step.v.dtRatio;

                    var P = new Microsoft.Xna.Framework.Vector2.$ctor2(this._impulse.X, this._impulse.Y);

                    b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(m1, P.$clone()));
                    b1.AngularVelocityInternal -= i1 * (FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), P.$clone()) + this._motorImpulse + this._impulse.Z);
                } else {
                    this._impulse = Microsoft.Xna.Framework.Vector3.Zero.$clone();
                    this._motorImpulse = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var b1 = this.BodyA;

                var v1 = b1.LinearVelocityInternal.$clone();
                var w1 = b1.AngularVelocityInternal;
                var v2 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                var w2 = 0;

                var m1 = b1.InvMass;
                var i1 = b1.InvI;

                if (this._enableMotor && this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.Equal) {
                    var Cdot = w2 - w1 - this._motorSpeed;
                    var impulse = this._motorMass * (-Cdot);
                    var oldImpulse = this._motorImpulse;
                    var maxImpulse = step.v.dt * this._maxMotorTorque;
                    this._motorImpulse = FarseerPhysics.Common.MathUtils.Clamp$2(this._motorImpulse + impulse, -maxImpulse, maxImpulse);
                    impulse = this._motorImpulse - oldImpulse;

                    w1 -= i1 * impulse;
                }

                if (this._enableLimit && this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.Inactive) {
                    var xf1 = { v : new FarseerPhysics.Common.Transform() };
                    b1.GetTransform(xf1);

                    var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));
                    var r2 = this._worldAnchor.$clone();

                    var Cdot1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(w2, r2.$clone())), v1.$clone()), FarseerPhysics.Common.MathUtils.Cross$1(w1, r1.$clone()));
                    var Cdot2 = w2 - w1;
                    var Cdot3 = new Microsoft.Xna.Framework.Vector3.$ctor3(Cdot1.X, Cdot1.Y, Cdot2);

                    var impulse1 = this._mass.Solve33(Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Cdot3.$clone()));

                    if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.Equal) {
                        this._impulse = Microsoft.Xna.Framework.Vector3.op_Addition(this._impulse.$clone(), impulse1.$clone());
                    } else if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.AtLower) {
                        var newImpulse = this._impulse.Z + impulse1.Z;
                        if (newImpulse < 0.0) {
                            var reduced = this._mass.Solve22(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Cdot1.$clone()));
                            impulse1.X = reduced.X;
                            impulse1.Y = reduced.Y;
                            impulse1.Z = -this._impulse.Z;
                            this._impulse.X += reduced.X;
                            this._impulse.Y += reduced.Y;
                            this._impulse.Z = 0.0;
                        }
                    } else if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                        var newImpulse1 = this._impulse.Z + impulse1.Z;
                        if (newImpulse1 > 0.0) {
                            var reduced1 = this._mass.Solve22(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Cdot1.$clone()));
                            impulse1.X = reduced1.X;
                            impulse1.Y = reduced1.Y;
                            impulse1.Z = -this._impulse.Z;
                            this._impulse.X += reduced1.X;
                            this._impulse.Y += reduced1.Y;
                            this._impulse.Z = 0.0;
                        }
                    }

                    var P = new Microsoft.Xna.Framework.Vector2.$ctor2(impulse1.X, impulse1.Y);

                    v1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(v1.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(m1, P.$clone()));
                    w1 -= i1 * (FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), P.$clone()) + impulse1.Z);
                } else {
                    var xf11 = { v : new FarseerPhysics.Common.Transform() };
                    b1.GetTransform(xf11);

                    var r11 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf11.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));
                    var r21 = this._worldAnchor.$clone();

                    var Cdot4 = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(w2, r21.$clone())), v1.$clone()), FarseerPhysics.Common.MathUtils.Cross$1(w1, r11.$clone()));
                    var impulse2 = this._mass.Solve22(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Cdot4.$clone()));

                    this._impulse.X += impulse2.X;
                    this._impulse.Y += impulse2.Y;

                    v1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(v1.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(m1, impulse2.$clone()));
                    w1 -= i1 * FarseerPhysics.Common.MathUtils.Cross$2(r11.$clone(), impulse2.$clone());
                }

                b1.LinearVelocityInternal = v1.$clone();
                b1.AngularVelocityInternal = w1;
            },
            SolvePositionConstraints: function () {

                var b1 = this.BodyA;

                var angularError = 0.0;
                var positionError;

                if (this._enableLimit && this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.Inactive) {
                    var angle = 0 - b1.Sweep.A - this.ReferenceAngle;
                    var limitImpulse = 0.0;

                    if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.Equal) {
                        var C = FarseerPhysics.Common.MathUtils.Clamp$2(angle - this._lowerAngle, -0.139626354, FarseerPhysics.Settings.MaxAngularCorrection);
                        limitImpulse = -this._motorMass * C;
                        angularError = Math.abs(C);
                    } else if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.AtLower) {
                        var C1 = angle - this._lowerAngle;
                        angularError = -C1;

                        C1 = FarseerPhysics.Common.MathUtils.Clamp$2(C1 + FarseerPhysics.Settings.AngularSlop, -0.139626354, 0.0);
                        limitImpulse = -this._motorMass * C1;
                    } else if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                        var C2 = angle - this._upperAngle;
                        angularError = C2;

                        C2 = FarseerPhysics.Common.MathUtils.Clamp$2(C2 - FarseerPhysics.Settings.AngularSlop, 0.0, FarseerPhysics.Settings.MaxAngularCorrection);
                        limitImpulse = -this._motorMass * C2;
                    }

                    b1.Sweep.A -= b1.InvI * limitImpulse;

                    b1.SynchronizeTransform();
                }

                {
                    var xf1 = { v : new FarseerPhysics.Common.Transform() };
                    b1.GetTransform(xf1);

                    var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));
                    var r2 = this._worldAnchor.$clone();

                    var C3 = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.Zero.$clone(), r2.$clone()), b1.Sweep.C.$clone()), r1.$clone());
                    positionError = C3.Length();

                    var invMass1 = b1.InvMass;
                    var invMass2 = 0;
                    var invI1 = b1.InvI;
                    var invI2 = 0;

                    var k_allowedStretch = 0.049999997;
                    if (C3.LengthSquared() > 0.00249999971) {
                        var u = C3.$clone();
                        u.Normalize();
                        var k = invMass1 + invMass2;
                        System.Diagnostics.Debug.Assert(k > FarseerPhysics.Settings.Epsilon);
                        var m = 1.0 / k;
                        var impulse2 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(m, (Microsoft.Xna.Framework.Vector2.op_UnaryNegation(C3.$clone())));
                        var k_beta = 0.5;
                        b1.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(k_beta * invMass1, impulse2.$clone()));

                        C3 = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.Zero.$clone(), r2.$clone()), b1.Sweep.C.$clone()), r1.$clone());
                    }

                    var K1 = { v : new FarseerPhysics.Common.Mat22.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(invMass1 + invMass2, 0.0), new Microsoft.Xna.Framework.Vector2.$ctor2(0.0, invMass1 + invMass2)) };
                    var K2 = { v : new FarseerPhysics.Common.Mat22.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(invI1 * r1.Y * r1.Y, -invI1 * r1.X * r1.Y), new Microsoft.Xna.Framework.Vector2.$ctor2(-invI1 * r1.X * r1.Y, invI1 * r1.X * r1.X)) };
                    var K3 = { v : new FarseerPhysics.Common.Mat22.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(invI2 * r2.Y * r2.Y, 0.0 * r2.X * r2.Y), new Microsoft.Xna.Framework.Vector2.$ctor2(0.0 * r2.X * r2.Y, invI2 * r2.X * r2.X)) };

                    var Ka = { v : new FarseerPhysics.Common.Mat22() };
                    FarseerPhysics.Common.Mat22.Add(K1, K2, Ka);

                    var K = { v : new FarseerPhysics.Common.Mat22() };
                    FarseerPhysics.Common.Mat22.Add(Ka, K3, K);

                    var impulse = K.v.Solve(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(C3.$clone()));

                    b1.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, impulse.$clone()));
                    b1.Sweep.A -= b1.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), impulse.$clone());

                    b1.SynchronizeTransform();
                }

                return positionError <= FarseerPhysics.Settings.LinearSlop && angularError <= FarseerPhysics.Settings.AngularSlop;
            }
        }
    });

    /**
     * Friction joint. This is used for top-down friction.
     It provides 2D translational friction and angular friction.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.FrictionJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.FrictionJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            LocalAnchorA: null,
            LocalAnchorB: null,
            _angularImpulse: 0,
            _angularMass: 0,
            _linearImpulse: null,
            _linearMass: null,
            /**
             * The maximum friction force in N.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FrictionJoint
             * @function MaxForce
             * @type number
             */
            MaxForce: 0,
            /**
             * The maximum friction torque in N-m.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.FrictionJoint
             * @function MaxTorque
             * @type number
             */
            MaxTorque: 0
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyB.GetWorldPoint(this.LocalAnchorB.$clone());
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            }
        },
        ctors: {
            init: function () {
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorB = new Microsoft.Xna.Framework.Vector2();
                this._linearImpulse = new Microsoft.Xna.Framework.Vector2();
                this._linearMass = new FarseerPhysics.Common.Mat22();
            },
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.ctor.call(this);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Friction;
            },
            $ctor1: function (bodyA, bodyB, localAnchorA, localAnchorB) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor2.call(this, bodyA, bodyB);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Friction;
                this.LocalAnchorA = localAnchorA.$clone();
                this.LocalAnchorB = localAnchorB.$clone();
            }
        },
        methods: {
            GetReactionForce: function (inv_dt) {
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2(inv_dt, this._linearImpulse.$clone());
            },
            GetReactionTorque: function (inv_dt) {
                return inv_dt * this._angularImpulse;
            },
            InitVelocityConstraints: function (step) {
                var bA = this.BodyA;
                var bB = this.BodyB;

                var xfA = { v : new FarseerPhysics.Common.Transform() }, xfB = { v : new FarseerPhysics.Common.Transform() };
                bA.GetTransform(xfA);
                bB.GetTransform(xfB);

                var rA = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfA.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), bA.LocalCenter.$clone()));
                var rB = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfB.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), bB.LocalCenter.$clone()));



                var mA = bA.InvMass, mB = bB.InvMass;
                var iA = bA.InvI, iB = bB.InvI;

                var K1 = { v : new FarseerPhysics.Common.Mat22.ctor() };
                K1.v.Col1.X = mA + mB;
                K1.v.Col2.X = 0.0;
                K1.v.Col1.Y = 0.0;
                K1.v.Col2.Y = mA + mB;

                var K2 = { v : new FarseerPhysics.Common.Mat22.ctor() };
                K2.v.Col1.X = iA * rA.Y * rA.Y;
                K2.v.Col2.X = -iA * rA.X * rA.Y;
                K2.v.Col1.Y = -iA * rA.X * rA.Y;
                K2.v.Col2.Y = iA * rA.X * rA.X;

                var K3 = { v : new FarseerPhysics.Common.Mat22.ctor() };
                K3.v.Col1.X = iB * rB.Y * rB.Y;
                K3.v.Col2.X = -iB * rB.X * rB.Y;
                K3.v.Col1.Y = -iB * rB.X * rB.Y;
                K3.v.Col2.Y = iB * rB.X * rB.X;

                var K12 = { v : new FarseerPhysics.Common.Mat22() };
                FarseerPhysics.Common.Mat22.Add(K1, K2, K12);

                var K = { v : new FarseerPhysics.Common.Mat22() };
                FarseerPhysics.Common.Mat22.Add(K12, K3, K);

                this._linearMass = K.v.Inverse.$clone();

                this._angularMass = iA + iB;
                if (this._angularMass > 0.0) {
                    this._angularMass = 1.0 / this._angularMass;
                }

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._linearImpulse = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._linearImpulse.$clone(), step.v.dtRatio);
                    this._angularImpulse *= step.v.dtRatio;

                    var P = new Microsoft.Xna.Framework.Vector2.$ctor2(this._linearImpulse.X, this._linearImpulse.Y);

                    bA.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Subtraction(bA.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(mA, P.$clone()));
                    bA.AngularVelocityInternal -= iA * (FarseerPhysics.Common.MathUtils.Cross$2(rA.$clone(), P.$clone()) + this._angularImpulse);

                    bB.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(bB.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(mB, P.$clone()));
                    bB.AngularVelocityInternal += iB * (FarseerPhysics.Common.MathUtils.Cross$2(rB.$clone(), P.$clone()) + this._angularImpulse);
                } else {
                    this._linearImpulse = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    this._angularImpulse = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var bA = this.BodyA;
                var bB = this.BodyB;

                var vA = bA.LinearVelocityInternal.$clone();
                var wA = bA.AngularVelocityInternal;
                var vB = bB.LinearVelocityInternal.$clone();
                var wB = bB.AngularVelocityInternal;

                var mA = bA.InvMass, mB = bB.InvMass;
                var iA = bA.InvI, iB = bB.InvI;

                var xfA = { v : new FarseerPhysics.Common.Transform() }, xfB = { v : new FarseerPhysics.Common.Transform() };
                bA.GetTransform(xfA);
                bB.GetTransform(xfB);

                var rA = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfA.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), bA.LocalCenter.$clone()));
                var rB = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfB.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), bB.LocalCenter.$clone()));

                {
                    var Cdot = wB - wA;
                    var impulse = -this._angularMass * Cdot;

                    var oldImpulse = this._angularImpulse;
                    var maxImpulse = step.v.dt * this.MaxTorque;
                    this._angularImpulse = FarseerPhysics.Common.MathUtils.Clamp$2(this._angularImpulse + impulse, -maxImpulse, maxImpulse);
                    impulse = this._angularImpulse - oldImpulse;

                    wA -= iA * impulse;
                    wB += iB * impulse;
                }

                {
                    var Cdot1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(vB.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(wB, rB.$clone())), vA.$clone()), FarseerPhysics.Common.MathUtils.Cross$1(wA, rA.$clone()));

                    var impulse1 = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(this, "_linearMass"), Cdot1.$clone()));
                    var oldImpulse1 = this._linearImpulse.$clone();
                    this._linearImpulse = Microsoft.Xna.Framework.Vector2.op_Addition(this._linearImpulse.$clone(), impulse1.$clone());

                    var maxImpulse1 = step.v.dt * this.MaxForce;

                    if (this._linearImpulse.LengthSquared() > maxImpulse1 * maxImpulse1) {
                        this._linearImpulse.Normalize();
                        this._linearImpulse = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._linearImpulse.$clone(), maxImpulse1);
                    }

                    impulse1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(this._linearImpulse.$clone(), oldImpulse1.$clone());

                    vA = Microsoft.Xna.Framework.Vector2.op_Subtraction(vA.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(mA, impulse1.$clone()));
                    wA -= iA * FarseerPhysics.Common.MathUtils.Cross$2(rA.$clone(), impulse1.$clone());

                    vB = Microsoft.Xna.Framework.Vector2.op_Addition(vB.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(mB, impulse1.$clone()));
                    wB += iB * FarseerPhysics.Common.MathUtils.Cross$2(rB.$clone(), impulse1.$clone());
                }

                bA.LinearVelocityInternal = vA.$clone();
                bA.AngularVelocityInternal = wA;
                bB.LinearVelocityInternal = vB.$clone();
                bB.AngularVelocityInternal = wB;
            },
            SolvePositionConstraints: function () {
                return true;
            }
        }
    });

    /**
     * A gear joint is used to connect two joints together. Either joint
     can be a revolute or prismatic joint. You specify a gear ratio
     to bind the motions together:
     coordinate1 + ratio * coordinate2 = ant
     The ratio can be negative or positive. If one joint is a revolute joint
     and the other joint is a prismatic joint, then the ratio will have units
     of length or units of 1/length.
     @warning The revolute and prismatic joints must be attached to
     fixed bodies (which must be body1 on those joints).
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.GearJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.GearJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            _J: null,
            _ant: 0,
            _fixedPrismatic1: null,
            _fixedPrismatic2: null,
            _fixedRevolute1: null,
            _fixedRevolute2: null,
            _impulse: 0,
            _mass: 0,
            _prismatic1: null,
            _prismatic2: null,
            _revolute1: null,
            _revolute2: null,
            /**
             * The gear ratio.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.GearJoint
             * @function Ratio
             * @type number
             */
            Ratio: 0,
            /**
             * The first revolute/prismatic joint attached to the gear joint.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.GearJoint
             * @function JointA
             * @type FarseerPhysics.Dynamics.Joints.Joint
             */
            JointA: null,
            /**
             * The second revolute/prismatic joint attached to the gear joint.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.GearJoint
             * @function JointB
             * @type FarseerPhysics.Dynamics.Joints.Joint
             */
            JointB: null,
            LocalAnchor1: null,
            LocalAnchor2: null
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchor1.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyB.GetWorldPoint(this.LocalAnchor2.$clone());
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            }
        },
        ctors: {
            init: function () {
                this._J = new FarseerPhysics.Dynamics.Joints.Jacobian();
                this.LocalAnchor1 = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchor2 = new Microsoft.Xna.Framework.Vector2();
            },
            /**
             * Requires two existing revolute or prismatic joints (any combination will work).
             The provided joints must attach a dynamic body to a static body.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.GearJoint
             * @memberof FarseerPhysics.Dynamics.Joints.GearJoint
             * @param   {FarseerPhysics.Dynamics.Joints.Joint}    jointA    The first joint.
             * @param   {FarseerPhysics.Dynamics.Joints.Joint}    jointB    The second joint.
             * @param   {number}                                  ratio     The ratio.
             * @return  {void}
             */
            ctor: function (jointA, jointB, ratio) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor2.call(this, jointA.BodyA, jointA.BodyB);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Gear;
                this.JointA = jointA;
                this.JointB = jointB;
                this.Ratio = ratio;

                var type1 = jointA.JointType;
                var type2 = jointB.JointType;

                System.Diagnostics.Debug.Assert(type1 === FarseerPhysics.Dynamics.Joints.JointType.Revolute || type1 === FarseerPhysics.Dynamics.Joints.JointType.Prismatic || type1 === FarseerPhysics.Dynamics.Joints.JointType.FixedRevolute || type1 === FarseerPhysics.Dynamics.Joints.JointType.FixedPrismatic);
                System.Diagnostics.Debug.Assert(type2 === FarseerPhysics.Dynamics.Joints.JointType.Revolute || type2 === FarseerPhysics.Dynamics.Joints.JointType.Prismatic || type2 === FarseerPhysics.Dynamics.Joints.JointType.FixedRevolute || type2 === FarseerPhysics.Dynamics.Joints.JointType.FixedPrismatic);

                if (type1 === FarseerPhysics.Dynamics.Joints.JointType.Revolute || type1 === FarseerPhysics.Dynamics.Joints.JointType.Prismatic) {
                    System.Diagnostics.Debug.Assert(jointA.BodyA.BodyType === FarseerPhysics.Dynamics.BodyType.Static);
                }
                if (type2 === FarseerPhysics.Dynamics.Joints.JointType.Revolute || type2 === FarseerPhysics.Dynamics.Joints.JointType.Prismatic) {
                    System.Diagnostics.Debug.Assert(jointB.BodyA.BodyType === FarseerPhysics.Dynamics.BodyType.Static);
                }

                var coordinate1 = 0.0, coordinate2 = 0.0;

                switch (type1) {
                    case FarseerPhysics.Dynamics.Joints.JointType.Revolute: 
                        this.BodyA = jointA.BodyB;
                        this._revolute1 = Bridge.cast(jointA, FarseerPhysics.Dynamics.Joints.RevoluteJoint);
                        this.LocalAnchor1 = this._revolute1.LocalAnchorB.$clone();
                        coordinate1 = this._revolute1.JointAngle;
                        break;
                    case FarseerPhysics.Dynamics.Joints.JointType.Prismatic: 
                        this.BodyA = jointA.BodyB;
                        this._prismatic1 = Bridge.cast(jointA, FarseerPhysics.Dynamics.Joints.PrismaticJoint);
                        this.LocalAnchor1 = this._prismatic1.LocalAnchorB.$clone();
                        coordinate1 = this._prismatic1.JointTranslation;
                        break;
                    case FarseerPhysics.Dynamics.Joints.JointType.FixedRevolute: 
                        this.BodyA = jointA.BodyA;
                        this._fixedRevolute1 = Bridge.cast(jointA, FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint);
                        this.LocalAnchor1 = this._fixedRevolute1.LocalAnchorA.$clone();
                        coordinate1 = this._fixedRevolute1.JointAngle;
                        break;
                    case FarseerPhysics.Dynamics.Joints.JointType.FixedPrismatic: 
                        this.BodyA = jointA.BodyA;
                        this._fixedPrismatic1 = Bridge.cast(jointA, FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint);
                        this.LocalAnchor1 = this._fixedPrismatic1.LocalAnchorA.$clone();
                        coordinate1 = this._fixedPrismatic1.JointTranslation;
                        break;
                }

                switch (type2) {
                    case FarseerPhysics.Dynamics.Joints.JointType.Revolute: 
                        this.BodyB = jointB.BodyB;
                        this._revolute2 = Bridge.cast(jointB, FarseerPhysics.Dynamics.Joints.RevoluteJoint);
                        this.LocalAnchor2 = this._revolute2.LocalAnchorB.$clone();
                        coordinate2 = this._revolute2.JointAngle;
                        break;
                    case FarseerPhysics.Dynamics.Joints.JointType.Prismatic: 
                        this.BodyB = jointB.BodyB;
                        this._prismatic2 = Bridge.cast(jointB, FarseerPhysics.Dynamics.Joints.PrismaticJoint);
                        this.LocalAnchor2 = this._prismatic2.LocalAnchorB.$clone();
                        coordinate2 = this._prismatic2.JointTranslation;
                        break;
                    case FarseerPhysics.Dynamics.Joints.JointType.FixedRevolute: 
                        this.BodyB = jointB.BodyA;
                        this._fixedRevolute2 = Bridge.cast(jointB, FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint);
                        this.LocalAnchor2 = this._fixedRevolute2.LocalAnchorA.$clone();
                        coordinate2 = this._fixedRevolute2.JointAngle;
                        break;
                    case FarseerPhysics.Dynamics.Joints.JointType.FixedPrismatic: 
                        this.BodyB = jointB.BodyA;
                        this._fixedPrismatic2 = Bridge.cast(jointB, FarseerPhysics.Dynamics.Joints.FixedPrismaticJoint);
                        this.LocalAnchor2 = this._fixedPrismatic2.LocalAnchorA.$clone();
                        coordinate2 = this._fixedPrismatic2.JointTranslation;
                        break;
                }

                this._ant = coordinate1 + this.Ratio * coordinate2;
            }
        },
        methods: {
            GetReactionForce: function (inv_dt) {
                var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse, this._J.LinearB.$clone());
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2(inv_dt, P.$clone());
            },
            GetReactionTorque: function (inv_dt) {
                var xf1 = { v : new FarseerPhysics.Common.Transform() };
                this.BodyB.GetTransform(xf1);

                var r = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchor2.$clone(), this.BodyB.LocalCenter.$clone()));
                var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse, this._J.LinearB.$clone());
                var L = this._impulse * this._J.AngularB - FarseerPhysics.Common.MathUtils.Cross$2(r.$clone(), P.$clone());
                return inv_dt * L;
            },
            InitVelocityConstraints: function (step) {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var K = 0.0;
                this._J.SetZero();

                if (this._revolute1 != null || this._fixedRevolute1 != null) {
                    this._J.AngularA = -1.0;
                    K += b1.InvI;
                } else {
                    var ug = new Microsoft.Xna.Framework.Vector2();
                    if (this._prismatic1 != null) {
                        ug = this._prismatic1.LocalXAxis1.$clone();
                    } else {
                        ug = this._fixedPrismatic1.LocalXAxis1.$clone();
                    }

                    var xf1 = { v : new FarseerPhysics.Common.Transform() };
                    b1.GetTransform(xf1);


                    var r = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchor1.$clone(), b1.LocalCenter.$clone()));
                    var crug = FarseerPhysics.Common.MathUtils.Cross$2(r.$clone(), ug.$clone());
                    this._J.LinearA = Microsoft.Xna.Framework.Vector2.op_UnaryNegation(ug.$clone());
                    this._J.AngularA = -crug;
                    K += b1.InvMass + b1.InvI * crug * crug;
                }

                if (this._revolute2 != null || this._fixedRevolute2 != null) {
                    this._J.AngularB = -this.Ratio;
                    K += this.Ratio * this.Ratio * b2.InvI;
                } else {
                    var ug1 = new Microsoft.Xna.Framework.Vector2();
                    if (this._prismatic2 != null) {
                        ug1 = this._prismatic2.LocalXAxis1.$clone();
                    } else {
                        ug1 = this._fixedPrismatic2.LocalXAxis1.$clone();
                    }

                    var xf2 = { v : new FarseerPhysics.Common.Transform() };
                    b2.GetTransform(xf2);

                    var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchor2.$clone(), b2.LocalCenter.$clone()));
                    var crug1 = FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), ug1.$clone());
                    this._J.LinearB = Microsoft.Xna.Framework.Vector2.op_Multiply$2(-this.Ratio, ug1.$clone());
                    this._J.AngularB = -this.Ratio * crug1;
                    K += this.Ratio * this.Ratio * (b2.InvMass + b2.InvI * crug1 * crug1);
                }

                System.Diagnostics.Debug.Assert(K > 0.0);
                this._mass = K > 0.0 ? 1.0 / K : 0.0;

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass * this._impulse, this._J.LinearA.$clone()));
                    b1.AngularVelocityInternal += b1.InvI * this._impulse * this._J.AngularA;
                    b2.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass * this._impulse, this._J.LinearB.$clone()));
                    b2.AngularVelocityInternal += b2.InvI * this._impulse * this._J.AngularB;
                } else {
                    this._impulse = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var Cdot = this._J.Compute(b1.LinearVelocityInternal.$clone(), b1.AngularVelocityInternal, b2.LinearVelocityInternal.$clone(), b2.AngularVelocityInternal);

                var impulse = this._mass * (-Cdot);
                this._impulse += impulse;

                b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass * impulse, this._J.LinearA.$clone()));
                b1.AngularVelocityInternal += b1.InvI * impulse * this._J.AngularA;
                b2.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass * impulse, this._J.LinearB.$clone()));
                b2.AngularVelocityInternal += b2.InvI * impulse * this._J.AngularB;
            },
            SolvePositionConstraints: function () {
                var linearError = 0.0;

                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var coordinate1 = 0.0, coordinate2 = 0.0;
                if (this._revolute1 != null) {
                    coordinate1 = this._revolute1.JointAngle;
                } else if (this._fixedRevolute1 != null) {
                    coordinate1 = this._fixedRevolute1.JointAngle;
                } else if (this._prismatic1 != null) {
                    coordinate1 = this._prismatic1.JointTranslation;
                } else if (this._fixedPrismatic1 != null) {
                    coordinate1 = this._fixedPrismatic1.JointTranslation;
                }

                if (this._revolute2 != null) {
                    coordinate2 = this._revolute2.JointAngle;
                } else if (this._fixedRevolute2 != null) {
                    coordinate2 = this._fixedRevolute2.JointAngle;
                } else if (this._prismatic2 != null) {
                    coordinate2 = this._prismatic2.JointTranslation;
                } else if (this._fixedPrismatic2 != null) {
                    coordinate2 = this._fixedPrismatic2.JointTranslation;
                }

                var C = this._ant - (coordinate1 + this.Ratio * coordinate2);

                var impulse = this._mass * (-C);

                b1.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Addition(b1.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass * impulse, this._J.LinearA.$clone()));
                b1.Sweep.A += b1.InvI * impulse * this._J.AngularA;
                b2.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass * impulse, this._J.LinearB.$clone()));
                b2.Sweep.A += b2.InvI * impulse * this._J.AngularB;

                b1.SynchronizeTransform();
                b2.SynchronizeTransform();

                return true;
            }
        }
    });

    Bridge.define("FarseerPhysics.Dynamics.Joints.LineJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            _ax: null,
            _ay: null,
            _bias: 0,
            _enableMotor: false,
            _gamma: 0,
            _impulse: 0,
            _localXAxis: null,
            _localYAxisA: null,
            _mass: 0,
            _maxMotorTorque: 0,
            _motorImpulse: 0,
            _motorMass: 0,
            _motorSpeed: 0,
            _sAx: 0,
            _sAy: 0,
            _sBx: 0,
            _sBy: 0,
            _springImpulse: 0,
            _springMass: 0,
            LocalAnchorA: null,
            LocalAnchorB: null,
            Frequency: 0,
            DampingRatio: 0
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyB.GetWorldPoint(this.LocalAnchorB.$clone());
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            },
            JointTranslation: {
                get: function () {
                    var bA = this.BodyA;
                    var bB = this.BodyB;

                    var pA = bA.GetWorldPoint(this.LocalAnchorA.$clone());
                    var pB = bB.GetWorldPoint(this.LocalAnchorB.$clone());
                    var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(pB.$clone(), pA.$clone());
                    var axis = bA.GetWorldVector(this.LocalXAxis.$clone());

                    var translation = Microsoft.Xna.Framework.Vector2.Dot(d.$clone(), axis.$clone());
                    return translation;
                }
            },
            JointSpeed: {
                get: function () {
                    var wA = this.BodyA.AngularVelocityInternal;
                    var wB = this.BodyB.AngularVelocityInternal;
                    return wB - wA;
                }
            },
            MotorEnabled: {
                get: function () {
                    return this._enableMotor;
                },
                set: function (value) {
                    this.BodyA.Awake = true;
                    this.BodyB.Awake = true;
                    this._enableMotor = value;
                }
            },
            MotorSpeed: {
                get: function () {
                    return this._motorSpeed;
                },
                set: function (value) {
                    this.BodyA.Awake = true;
                    this.BodyB.Awake = true;
                    this._motorSpeed = value;
                }
            },
            MaxMotorTorque: {
                get: function () {
                    return this._maxMotorTorque;
                },
                set: function (value) {
                    this.BodyA.Awake = true;
                    this.BodyB.Awake = true;
                    this._maxMotorTorque = value;
                }
            },
            LocalXAxis: {
                get: function () {
                    return this._localXAxis.$clone();
                },
                set: function (value) {
                    this._localXAxis = value.$clone();
                    this._localYAxisA = FarseerPhysics.Common.MathUtils.Cross$1(1.0, this._localXAxis.$clone());
                }
            }
        },
        ctors: {
            init: function () {
                this._ax = new Microsoft.Xna.Framework.Vector2();
                this._ay = new Microsoft.Xna.Framework.Vector2();
                this._localXAxis = new Microsoft.Xna.Framework.Vector2();
                this._localYAxisA = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorB = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.ctor.call(this);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Line;
            },
            $ctor1: function (bA, bB, anchor, axis) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor2.call(this, bA, bB);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Line;

                this.LocalAnchorA = bA.GetLocalPoint(anchor.$clone());
                this.LocalAnchorB = bB.GetLocalPoint(anchor.$clone());
                this.LocalXAxis = bA.GetLocalVector(axis.$clone());
            }
        },
        methods: {
            GetReactionForce: function (invDt) {
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2(invDt, (Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse, this._ay.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._springImpulse, this._ax.$clone()))));
            },
            GetReactionTorque: function (invDt) {
                return invDt * this._motorImpulse;
            },
            InitVelocityConstraints: function (step) {
                var bA = this.BodyA;
                var bB = this.BodyB;

                this.LocalCenterA = bA.LocalCenter.$clone();
                this.LocalCenterB = bB.LocalCenter.$clone();

                var xfA = { v : new FarseerPhysics.Common.Transform() };
                bA.GetTransform(xfA);
                var xfB = { v : new FarseerPhysics.Common.Transform() };
                bB.GetTransform(xfB);

                var rA = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfA.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), this.LocalCenterA.$clone()));
                var rB = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfB.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), this.LocalCenterB.$clone()));
                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(bB.Sweep.C.$clone(), rB.$clone()), bA.Sweep.C.$clone()), rA.$clone());

                this.InvMassA = bA.InvMass;
                this.InvIA = bA.InvI;
                this.InvMassB = bB.InvMass;
                this.InvIB = bB.InvI;

                {
                    this._ay = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfA.v, "R"), this._localYAxisA.$clone());
                    this._sAy = FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Addition(d.$clone(), rA.$clone()), this._ay.$clone());
                    this._sBy = FarseerPhysics.Common.MathUtils.Cross$2(rB.$clone(), this._ay.$clone());

                    this._mass = this.InvMassA + this.InvMassB + this.InvIA * this._sAy * this._sAy + this.InvIB * this._sBy * this._sBy;

                    if (this._mass > 0.0) {
                        this._mass = 1.0 / this._mass;
                    }
                }

                this._springMass = 0.0;
                if (this.Frequency > 0.0) {
                    this._ax = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfA.v, "R"), this.LocalXAxis.$clone());
                    this._sAx = FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Addition(d.$clone(), rA.$clone()), this._ax.$clone());
                    this._sBx = FarseerPhysics.Common.MathUtils.Cross$2(rB.$clone(), this._ax.$clone());

                    var invMass = this.InvMassA + this.InvMassB + this.InvIA * this._sAx * this._sAx + this.InvIB * this._sBx * this._sBx;

                    if (invMass > 0.0) {
                        this._springMass = 1.0 / invMass;

                        var C = Microsoft.Xna.Framework.Vector2.Dot(d.$clone(), this._ax.$clone());

                        var omega = 6.28318548 * this.Frequency;

                        var da = 2.0 * this._springMass * this.DampingRatio * omega;

                        var k = this._springMass * omega * omega;

                        this._gamma = step.v.dt * (da + step.v.dt * k);
                        if (this._gamma > 0.0) {
                            this._gamma = 1.0 / this._gamma;
                        }

                        this._bias = C * step.v.dt * k * this._gamma;

                        this._springMass = invMass + this._gamma;
                        if (this._springMass > 0.0) {
                            this._springMass = 1.0 / this._springMass;
                        }
                    }
                } else {
                    this._springImpulse = 0.0;
                    this._springMass = 0.0;
                }

                if (this._enableMotor) {
                    this._motorMass = this.InvIA + this.InvIB;
                    if (this._motorMass > 0.0) {
                        this._motorMass = 1.0 / this._motorMass;
                    }
                } else {
                    this._motorMass = 0.0;
                    this._motorImpulse = 0.0;
                }

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._impulse *= step.v.dtRatio;
                    this._springImpulse *= step.v.dtRatio;
                    this._motorImpulse *= step.v.dtRatio;

                    var P = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse, this._ay.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._springImpulse, this._ax.$clone()));
                    var LA = this._impulse * this._sAy + this._springImpulse * this._sAx + this._motorImpulse;
                    var LB = this._impulse * this._sBy + this._springImpulse * this._sBx + this._motorImpulse;

                    bA.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Subtraction(bA.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassA, P.$clone()));
                    bA.AngularVelocityInternal -= this.InvIA * LA;

                    bB.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(bB.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P.$clone()));
                    bB.AngularVelocityInternal += this.InvIB * LB;
                } else {
                    this._impulse = 0.0;
                    this._springImpulse = 0.0;
                    this._motorImpulse = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var bA = this.BodyA;
                var bB = this.BodyB;

                var vA = bA.LinearVelocity.$clone();
                var wA = bA.AngularVelocityInternal;
                var vB = bB.LinearVelocityInternal.$clone();
                var wB = bB.AngularVelocityInternal;

                {
                    var Cdot = Microsoft.Xna.Framework.Vector2.Dot(this._ax.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(vB.$clone(), vA.$clone())) + this._sBx * wB - this._sAx * wA;
                    var impulse = -this._springMass * (Cdot + this._bias + this._gamma * this._springImpulse);
                    this._springImpulse += impulse;

                    var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, this._ax.$clone());
                    var LA = impulse * this._sAx;
                    var LB = impulse * this._sBx;

                    vA = Microsoft.Xna.Framework.Vector2.op_Subtraction(vA.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassA, P.$clone()));
                    wA -= this.InvIA * LA;

                    vB = Microsoft.Xna.Framework.Vector2.op_Addition(vB.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P.$clone()));
                    wB += this.InvIB * LB;
                }

                {
                    var Cdot1 = wB - wA - this._motorSpeed;
                    var impulse1 = -this._motorMass * Cdot1;

                    var oldImpulse = this._motorImpulse;
                    var maxImpulse = step.v.dt * this._maxMotorTorque;
                    this._motorImpulse = FarseerPhysics.Common.MathUtils.Clamp$2(this._motorImpulse + impulse1, -maxImpulse, maxImpulse);
                    impulse1 = this._motorImpulse - oldImpulse;

                    wA -= this.InvIA * impulse1;
                    wB += this.InvIB * impulse1;
                }

                {
                    var Cdot2 = Microsoft.Xna.Framework.Vector2.Dot(this._ay.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(vB.$clone(), vA.$clone())) + this._sBy * wB - this._sAy * wA;
                    var impulse2 = this._mass * (-Cdot2);
                    this._impulse += impulse2;

                    var P1 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse2, this._ay.$clone());
                    var LA1 = impulse2 * this._sAy;
                    var LB1 = impulse2 * this._sBy;

                    vA = Microsoft.Xna.Framework.Vector2.op_Subtraction(vA.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassA, P1.$clone()));
                    wA -= this.InvIA * LA1;

                    vB = Microsoft.Xna.Framework.Vector2.op_Addition(vB.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P1.$clone()));
                    wB += this.InvIB * LB1;
                }

                bA.LinearVelocityInternal = vA.$clone();
                bA.AngularVelocityInternal = wA;
                bB.LinearVelocityInternal = vB.$clone();
                bB.AngularVelocityInternal = wB;
            },
            SolvePositionConstraints: function () {
                var bA = this.BodyA;
                var bB = this.BodyB;

                var xA = bA.Sweep.C.$clone();
                var angleA = bA.Sweep.A;

                var xB = bB.Sweep.C.$clone();
                var angleB = bB.Sweep.A;

                var RA = { v : new FarseerPhysics.Common.Mat22.$ctor2(angleA) };
                var RB = { v : new FarseerPhysics.Common.Mat22.$ctor2(angleB) };

                var rA = FarseerPhysics.Common.MathUtils.Multiply(RA, Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), this.LocalCenterA.$clone()));
                var rB = FarseerPhysics.Common.MathUtils.Multiply(RB, Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), this.LocalCenterB.$clone()));
                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(xB.$clone(), rB.$clone()), xA.$clone()), rA.$clone());

                var ay = FarseerPhysics.Common.MathUtils.Multiply(RA, this._localYAxisA.$clone());

                var sAy = FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Addition(d.$clone(), rA.$clone()), ay.$clone());
                var sBy = FarseerPhysics.Common.MathUtils.Cross$2(rB.$clone(), ay.$clone());

                var C = Microsoft.Xna.Framework.Vector2.Dot(d.$clone(), ay.$clone());

                var k = this.InvMassA + this.InvMassB + this.InvIA * this._sAy * this._sAy + this.InvIB * this._sBy * this._sBy;

                var impulse;
                if (k !== 0.0) {
                    impulse = -C / k;
                } else {
                    impulse = 0.0;
                }

                var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, ay.$clone());
                var LA = impulse * sAy;
                var LB = impulse * sBy;

                xA = Microsoft.Xna.Framework.Vector2.op_Subtraction(xA.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassA, P.$clone()));
                angleA -= this.InvIA * LA;
                xB = Microsoft.Xna.Framework.Vector2.op_Addition(xB.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P.$clone()));
                angleB += this.InvIB * LB;

                bA.Sweep.C = xA.$clone();
                bA.Sweep.A = angleA;
                bB.Sweep.C = xB.$clone();
                bB.Sweep.A = angleB;
                bA.SynchronizeTransform();
                bB.SynchronizeTransform();

                return Math.abs(C) <= FarseerPhysics.Settings.LinearSlop;
            },
            GetMotorTorque: function (invDt) {
                return invDt * this._motorImpulse;
            }
        }
    });

    /**
     * A prismatic joint. This joint provides one degree of freedom: translation
     along an axis fixed in body1. Relative rotation is prevented. You can
     use a joint limit to restrict the range of motion and a joint motor to
     drive the motion or to model joint friction.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.PrismaticJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.PrismaticJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            LocalAnchorA: null,
            LocalAnchorB: null,
            _K: null,
            _a1: 0,
            _a2: 0,
            _axis: null,
            _enableLimit: false,
            _enableMotor: false,
            _impulse: null,
            _limitState: 0,
            _localXAxis1: null,
            _localYAxis1: null,
            _lowerTranslation: 0,
            _maxMotorForce: 0,
            _motorImpulse: 0,
            _motorMass: 0,
            _motorSpeed: 0,
            _perp: null,
            _refAngle: 0,
            _s1: 0,
            _s2: 0,
            _upperTranslation: 0
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyB.GetWorldPoint(this.LocalAnchorB.$clone());
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            },
            /**
             * Get the current joint translation, usually in meters.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.Joints.PrismaticJoint
             * @function JointTranslation
             * @type number
             */
            JointTranslation: {
                get: function () {
                    var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.BodyB.GetWorldPoint(this.LocalAnchorB.$clone()), this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone()));
                    var axis = this.BodyA.GetWorldVector$1(Bridge.ref(this, "_localXAxis1"));

                    return Microsoft.Xna.Framework.Vector2.Dot(d.$clone(), axis.$clone());
                }
            },
            /**
             * Get the current joint translation speed, usually in meters per second.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.Joints.PrismaticJoint
             * @function JointSpeed
             * @type number
             */
            JointSpeed: {
                get: function () {
                    var xf1 = { v : new FarseerPhysics.Common.Transform() }, xf2 = { v : new FarseerPhysics.Common.Transform() };
                    this.BodyA.GetTransform(xf1);
                    this.BodyB.GetTransform(xf2);

                    var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), this.BodyA.LocalCenter.$clone()));
                    var r2 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), this.BodyB.LocalCenter.$clone()));
                    var p1 = Microsoft.Xna.Framework.Vector2.op_Addition(this.BodyA.Sweep.C.$clone(), r1.$clone());
                    var p2 = Microsoft.Xna.Framework.Vector2.op_Addition(this.BodyB.Sweep.C.$clone(), r2.$clone());
                    var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.$clone(), p1.$clone());
                    var axis = this.BodyA.GetWorldVector$1(Bridge.ref(this, "_localXAxis1"));

                    var v1 = this.BodyA.LinearVelocityInternal.$clone();
                    var v2 = this.BodyB.LinearVelocityInternal.$clone();
                    var w1 = this.BodyA.AngularVelocityInternal;
                    var w2 = this.BodyB.AngularVelocityInternal;

                    var speed = Microsoft.Xna.Framework.Vector2.Dot(d.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(w1, axis.$clone())) + Microsoft.Xna.Framework.Vector2.Dot(axis.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(w2, r2.$clone())), v1.$clone()), FarseerPhysics.Common.MathUtils.Cross$1(w1, r1.$clone())));
                    return speed;
                }
            },
            /**
             * Is the joint limit enabled?
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.PrismaticJoint
             * @function LimitEnabled
             * @type boolean
             */
            LimitEnabled: {
                get: function () {
                    return this._enableLimit;
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(this.BodyA.FixedRotation === false || this.BodyB.FixedRotation === false, "Warning: limits does currently not work with fixed rotation");

                    this.WakeBodies();
                    this._enableLimit = value;
                }
            },
            /**
             * Get the lower joint limit, usually in meters.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.PrismaticJoint
             * @function LowerLimit
             * @type number
             */
            LowerLimit: {
                get: function () {
                    return this._lowerTranslation;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._lowerTranslation = value;
                }
            },
            /**
             * Get the upper joint limit, usually in meters.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.PrismaticJoint
             * @function UpperLimit
             * @type number
             */
            UpperLimit: {
                get: function () {
                    return this._upperTranslation;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._upperTranslation = value;
                }
            },
            /**
             * Is the joint motor enabled?
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.PrismaticJoint
             * @function MotorEnabled
             * @type boolean
             */
            MotorEnabled: {
                get: function () {
                    return this._enableMotor;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._enableMotor = value;
                }
            },
            /**
             * Set the motor speed, usually in meters per second.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.PrismaticJoint
             * @function MotorSpeed
             * @type number
             */
            MotorSpeed: {
                get: function () {
                    return this._motorSpeed;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._motorSpeed = value;
                }
            },
            /**
             * Set the maximum motor force, usually in N.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.PrismaticJoint
             * @function MaxMotorForce
             * @type number
             */
            MaxMotorForce: {
                get: function () {
                    return this._maxMotorForce;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._maxMotorForce = value;
                }
            },
            /**
             * Get the current motor force, usually in N.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.PrismaticJoint
             * @function MotorForce
             * @type number
             */
            MotorForce: {
                get: function () {
                    return this._motorImpulse;
                },
                set: function (value) {
                    this._motorImpulse = value;
                }
            },
            LocalXAxis1: {
                get: function () {
                    return this._localXAxis1.$clone();
                },
                set: function (value) {
                    this._localXAxis1 = this.BodyA.GetLocalVector(value.$clone());
                    this._localYAxis1 = FarseerPhysics.Common.MathUtils.Cross$1(1.0, this._localXAxis1.$clone());
                }
            },
            ReferenceAngle: {
                get: function () {
                    return this._refAngle;
                },
                set: function (value) {
                    this._refAngle = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorB = new Microsoft.Xna.Framework.Vector2();
                this._K = new FarseerPhysics.Common.Mat33();
                this._axis = new Microsoft.Xna.Framework.Vector2();
                this._impulse = new Microsoft.Xna.Framework.Vector3();
                this._localXAxis1 = new Microsoft.Xna.Framework.Vector2();
                this._localYAxis1 = new Microsoft.Xna.Framework.Vector2();
                this._perp = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.ctor.call(this);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Prismatic;
            },
            /**
             * This requires defining a line of
             motion using an axis and an anchor point. The definition uses local
             anchor points and a local axis so that the initial configuration
             can violate the constraint slightly. The joint translation is zero
             when the local anchor points coincide in world space. Using local
             anchors and a local axis helps when saving and loading a game.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.PrismaticJoint
             * @memberof FarseerPhysics.Dynamics.Joints.PrismaticJoint
             * @param   {FarseerPhysics.Dynamics.Body}       bodyA           The first body.
             * @param   {FarseerPhysics.Dynamics.Body}       bodyB           The second body.
             * @param   {Microsoft.Xna.Framework.Vector2}    localAnchorA    The first body anchor.
             * @param   {Microsoft.Xna.Framework.Vector2}    localAnchorB    The second body anchor.
             * @param   {Microsoft.Xna.Framework.Vector2}    axis            The axis.
             * @return  {void}
             */
            $ctor1: function (bodyA, bodyB, localAnchorA, localAnchorB, axis) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor2.call(this, bodyA, bodyB);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Prismatic;

                this.LocalAnchorA = localAnchorA.$clone();
                this.LocalAnchorB = localAnchorB.$clone();

                this._localXAxis1 = this.BodyA.GetLocalVector(axis.$clone());
                this._localYAxis1 = FarseerPhysics.Common.MathUtils.Cross$1(1.0, this._localXAxis1.$clone());
                this._refAngle = this.BodyB.Rotation - this.BodyA.Rotation;

                this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
            }
        },
        methods: {
            GetReactionForce: function (inv_dt) {
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2(inv_dt, (Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse.X, this._perp.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2((this._motorImpulse + this._impulse.Z), this._axis.$clone()))));
            },
            GetReactionTorque: function (inv_dt) {
                return inv_dt * this._impulse.Y;
            },
            InitVelocityConstraints: function (step) {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                this.LocalCenterA = b1.LocalCenter.$clone();
                this.LocalCenterB = b2.LocalCenter.$clone();

                var xf1 = { v : new FarseerPhysics.Common.Transform() }, xf2 = { v : new FarseerPhysics.Common.Transform() };
                b1.GetTransform(xf1);
                b2.GetTransform(xf2);

                var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), this.LocalCenterA.$clone()));
                var r2 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), this.LocalCenterB.$clone()));
                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), r2.$clone()), b1.Sweep.C.$clone()), r1.$clone());

                this.InvMassA = b1.InvMass;
                this.InvIA = b1.InvI;
                this.InvMassB = b2.InvMass;
                this.InvIB = b2.InvI;

                {
                    this._axis = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), this._localXAxis1.$clone());
                    this._a1 = FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Addition(d.$clone(), r1.$clone()), this._axis.$clone());
                    this._a2 = FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), this._axis.$clone());

                    this._motorMass = this.InvMassA + this.InvMassB + this.InvIA * this._a1 * this._a1 + this.InvIB * this._a2 * this._a2;

                    if (this._motorMass > FarseerPhysics.Settings.Epsilon) {
                        this._motorMass = 1.0 / this._motorMass;
                    }
                }

                {
                    this._perp = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), this._localYAxis1.$clone());

                    this._s1 = FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Addition(d.$clone(), r1.$clone()), this._perp.$clone());
                    this._s2 = FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), this._perp.$clone());

                    var m1 = this.InvMassA, m2 = this.InvMassB;
                    var i1 = this.InvIA, i2 = this.InvIB;

                    var k11 = m1 + m2 + i1 * this._s1 * this._s1 + i2 * this._s2 * this._s2;
                    var k12 = i1 * this._s1 + i2 * this._s2;
                    var k13 = i1 * this._s1 * this._a1 + i2 * this._s2 * this._a2;
                    var k22 = i1 + i2;
                    var k23 = i1 * this._a1 + i2 * this._a2;
                    var k33 = m1 + m2 + i1 * this._a1 * this._a1 + i2 * this._a2 * this._a2;

                    this._K.Col1 = new Microsoft.Xna.Framework.Vector3.$ctor3(k11, k12, k13);
                    this._K.Col2 = new Microsoft.Xna.Framework.Vector3.$ctor3(k12, k22, k23);
                    this._K.Col3 = new Microsoft.Xna.Framework.Vector3.$ctor3(k13, k23, k33);
                }

                if (this._enableLimit) {
                    var jointTranslation = Microsoft.Xna.Framework.Vector2.Dot(this._axis.$clone(), d.$clone());
                    if (Math.abs(this._upperTranslation - this._lowerTranslation) < 0.01) {
                        this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Equal;
                    } else if (jointTranslation <= this._lowerTranslation) {
                        if (this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.AtLower) {
                            this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.AtLower;
                            this._impulse.Z = 0.0;
                        }
                    } else if (jointTranslation >= this._upperTranslation) {
                        if (this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                            this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.AtUpper;
                            this._impulse.Z = 0.0;
                        }
                    } else {
                        this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
                        this._impulse.Z = 0.0;
                    }
                } else {
                    this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
                }

                if (this._enableMotor === false) {
                    this._motorImpulse = 0.0;
                }

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._impulse = Microsoft.Xna.Framework.Vector3.op_Multiply$1(this._impulse.$clone(), step.v.dtRatio);
                    this._motorImpulse *= step.v.dtRatio;

                    var P = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse.X, this._perp.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2((this._motorImpulse + this._impulse.Z), this._axis.$clone()));
                    var L1 = this._impulse.X * this._s1 + this._impulse.Y + (this._motorImpulse + this._impulse.Z) * this._a1;
                    var L2 = this._impulse.X * this._s2 + this._impulse.Y + (this._motorImpulse + this._impulse.Z) * this._a2;

                    b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassA, P.$clone()));
                    b1.AngularVelocityInternal -= this.InvIA * L1;

                    b2.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P.$clone()));
                    b2.AngularVelocityInternal += this.InvIB * L2;
                } else {
                    this._impulse = Microsoft.Xna.Framework.Vector3.Zero.$clone();
                    this._motorImpulse = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var v1 = b1.LinearVelocityInternal.$clone();
                var w1 = b1.AngularVelocityInternal;
                var v2 = b2.LinearVelocityInternal.$clone();
                var w2 = b2.AngularVelocityInternal;

                if (this._enableMotor && this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.Equal) {
                    var Cdot = Microsoft.Xna.Framework.Vector2.Dot(this._axis.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(v2.$clone(), v1.$clone())) + this._a2 * w2 - this._a1 * w1;
                    var impulse = this._motorMass * (this._motorSpeed - Cdot);
                    var oldImpulse = this._motorImpulse;
                    var maxImpulse = step.v.dt * this._maxMotorForce;
                    this._motorImpulse = FarseerPhysics.Common.MathUtils.Clamp$2(this._motorImpulse + impulse, -maxImpulse, maxImpulse);
                    impulse = this._motorImpulse - oldImpulse;

                    var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, this._axis.$clone());
                    var L1 = impulse * this._a1;
                    var L2 = impulse * this._a2;

                    v1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(v1.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassA, P.$clone()));
                    w1 -= this.InvIA * L1;

                    v2 = Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P.$clone()));
                    w2 += this.InvIB * L2;
                }

                var Cdot1 = new Microsoft.Xna.Framework.Vector2.$ctor2(Microsoft.Xna.Framework.Vector2.Dot(this._perp.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(v2.$clone(), v1.$clone())) + this._s2 * w2 - this._s1 * w1, w2 - w1);

                if (this._enableLimit && this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.Inactive) {
                    var Cdot2 = Microsoft.Xna.Framework.Vector2.Dot(this._axis.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(v2.$clone(), v1.$clone())) + this._a2 * w2 - this._a1 * w1;
                    var Cdot3 = new Microsoft.Xna.Framework.Vector3.$ctor3(Cdot1.X, Cdot1.Y, Cdot2);

                    var f1 = this._impulse.$clone();
                    var df = this._K.Solve33(Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Cdot3.$clone()));
                    this._impulse = Microsoft.Xna.Framework.Vector3.op_Addition(this._impulse.$clone(), df.$clone());

                    if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.AtLower) {
                        this._impulse.Z = Math.max(this._impulse.Z, 0.0);
                    } else if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                        this._impulse.Z = Math.min(this._impulse.Z, 0.0);
                    }

                    var b = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Cdot1.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2((this._impulse.Z - f1.Z), new Microsoft.Xna.Framework.Vector2.$ctor2(this._K.Col3.X, this._K.Col3.Y)));
                    var f2r = Microsoft.Xna.Framework.Vector2.op_Addition(this._K.Solve22(b.$clone()), new Microsoft.Xna.Framework.Vector2.$ctor2(f1.X, f1.Y));
                    this._impulse.X = f2r.X;
                    this._impulse.Y = f2r.Y;

                    df = Microsoft.Xna.Framework.Vector3.op_Subtraction(this._impulse.$clone(), f1.$clone());

                    var P1 = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(df.X, this._perp.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(df.Z, this._axis.$clone()));
                    var L11 = df.X * this._s1 + df.Y + df.Z * this._a1;
                    var L21 = df.X * this._s2 + df.Y + df.Z * this._a2;

                    v1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(v1.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassA, P1.$clone()));
                    w1 -= this.InvIA * L11;

                    v2 = Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P1.$clone()));
                    w2 += this.InvIB * L21;
                } else {
                    var df1 = this._K.Solve22(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Cdot1.$clone()));
                    this._impulse.X += df1.X;
                    this._impulse.Y += df1.Y;

                    var P2 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(df1.X, this._perp.$clone());
                    var L12 = df1.X * this._s1 + df1.Y;
                    var L22 = df1.X * this._s2 + df1.Y;

                    v1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(v1.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassA, P2.$clone()));
                    w1 -= this.InvIA * L12;

                    v2 = Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P2.$clone()));
                    w2 += this.InvIB * L22;
                }

                b1.LinearVelocityInternal = v1.$clone();
                b1.AngularVelocityInternal = w1;
                b2.LinearVelocityInternal = v2.$clone();
                b2.AngularVelocityInternal = w2;
            },
            SolvePositionConstraints: function () {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var c1 = b1.Sweep.C.$clone();
                var a1 = b1.Sweep.A;

                var c2 = b2.Sweep.C.$clone();
                var a2 = b2.Sweep.A;

                var linearError = 0.0;
                var active = false;
                var C2 = 0.0;

                var R1 = { v : new FarseerPhysics.Common.Mat22.$ctor2(a1) };
                var R2 = { v : new FarseerPhysics.Common.Mat22.$ctor2(a2) };

                var r1 = FarseerPhysics.Common.MathUtils.Multiply(R1, Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), this.LocalCenterA.$clone()));
                var r2 = FarseerPhysics.Common.MathUtils.Multiply(R2, Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), this.LocalCenterB.$clone()));
                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(c2.$clone(), r2.$clone()), c1.$clone()), r1.$clone());

                if (this._enableLimit) {
                    this._axis = FarseerPhysics.Common.MathUtils.Multiply(R1, this._localXAxis1.$clone());

                    this._a1 = FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Addition(d.$clone(), r1.$clone()), this._axis.$clone());
                    this._a2 = FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), this._axis.$clone());

                    var translation = Microsoft.Xna.Framework.Vector2.Dot(this._axis.$clone(), d.$clone());
                    if (Math.abs(this._upperTranslation - this._lowerTranslation) < 0.01) {
                        C2 = FarseerPhysics.Common.MathUtils.Clamp$2(translation, -0.2, FarseerPhysics.Settings.MaxLinearCorrection);
                        linearError = Math.abs(translation);
                        active = true;
                    } else if (translation <= this._lowerTranslation) {
                        C2 = FarseerPhysics.Common.MathUtils.Clamp$2(translation - this._lowerTranslation + FarseerPhysics.Settings.LinearSlop, -0.2, 0.0);
                        linearError = this._lowerTranslation - translation;
                        active = true;
                    } else if (translation >= this._upperTranslation) {
                        C2 = FarseerPhysics.Common.MathUtils.Clamp$2(translation - this._upperTranslation - FarseerPhysics.Settings.LinearSlop, 0.0, FarseerPhysics.Settings.MaxLinearCorrection);
                        linearError = translation - this._upperTranslation;
                        active = true;
                    }
                }

                this._perp = FarseerPhysics.Common.MathUtils.Multiply(R1, this._localYAxis1.$clone());

                this._s1 = FarseerPhysics.Common.MathUtils.Cross$2(Microsoft.Xna.Framework.Vector2.op_Addition(d.$clone(), r1.$clone()), this._perp.$clone());
                this._s2 = FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), this._perp.$clone());

                var impulse = new Microsoft.Xna.Framework.Vector3();
                var C1 = new Microsoft.Xna.Framework.Vector2.$ctor2(Microsoft.Xna.Framework.Vector2.Dot(this._perp.$clone(), d.$clone()), a2 - a1 - this.ReferenceAngle);

                linearError = Math.max(linearError, Math.abs(C1.X));
                var angularError = Math.abs(C1.Y);

                if (active) {
                    var m1 = this.InvMassA, m2 = this.InvMassB;
                    var i1 = this.InvIA, i2 = this.InvIB;

                    var k11 = m1 + m2 + i1 * this._s1 * this._s1 + i2 * this._s2 * this._s2;
                    var k12 = i1 * this._s1 + i2 * this._s2;
                    var k13 = i1 * this._s1 * this._a1 + i2 * this._s2 * this._a2;
                    var k22 = i1 + i2;
                    var k23 = i1 * this._a1 + i2 * this._a2;
                    var k33 = m1 + m2 + i1 * this._a1 * this._a1 + i2 * this._a2 * this._a2;

                    this._K.Col1 = new Microsoft.Xna.Framework.Vector3.$ctor3(k11, k12, k13);
                    this._K.Col2 = new Microsoft.Xna.Framework.Vector3.$ctor3(k12, k22, k23);
                    this._K.Col3 = new Microsoft.Xna.Framework.Vector3.$ctor3(k13, k23, k33);

                    var C = new Microsoft.Xna.Framework.Vector3.$ctor3(-C1.X, -C1.Y, -C2);
                    impulse = this._K.Solve33(C.$clone());
                } else {
                    var m11 = this.InvMassA, m21 = this.InvMassB;
                    var i11 = this.InvIA, i21 = this.InvIB;

                    var k111 = m11 + m21 + i11 * this._s1 * this._s1 + i21 * this._s2 * this._s2;
                    var k121 = i11 * this._s1 + i21 * this._s2;
                    var k221 = i11 + i21;

                    this._K.Col1 = new Microsoft.Xna.Framework.Vector3.$ctor3(k111, k121, 0.0);
                    this._K.Col2 = new Microsoft.Xna.Framework.Vector3.$ctor3(k121, k221, 0.0);

                    var impulse1 = this._K.Solve22(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(C1.$clone()));
                    impulse.X = impulse1.X;
                    impulse.Y = impulse1.Y;
                    impulse.Z = 0.0;
                }

                var P = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse.X, this._perp.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse.Z, this._axis.$clone()));
                var L1 = impulse.X * this._s1 + impulse.Y + impulse.Z * this._a1;
                var L2 = impulse.X * this._s2 + impulse.Y + impulse.Z * this._a2;

                c1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(c1.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassA, P.$clone()));
                a1 -= this.InvIA * L1;
                c2 = Microsoft.Xna.Framework.Vector2.op_Addition(c2.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.InvMassB, P.$clone()));
                a2 += this.InvIB * L2;

                b1.Sweep.C = c1.$clone();
                b1.Sweep.A = a1;
                b2.Sweep.C = c2.$clone();
                b2.Sweep.A = a2;
                b1.SynchronizeTransform();
                b2.SynchronizeTransform();

                return linearError <= FarseerPhysics.Settings.LinearSlop && angularError <= FarseerPhysics.Settings.AngularSlop;
            }
        }
    });

    /**
     * The pulley joint is connected to two bodies and two fixed ground points.
     The pulley supports a ratio such that:
     length1 + ratio * length2 <!--<-->= ant
     Yes, the force transmitted is scaled by the ratio.
     The pulley also enforces a maximum length limit on both sides. This is
     useful to prevent one side of the pulley hitting the top.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.PulleyJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.PulleyJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            /**
             * Get the first ground anchor.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.PulleyJoint
             * @type Microsoft.Xna.Framework.Vector2
             */
            GroundAnchorA: null,
            /**
             * Get the second ground anchor.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.PulleyJoint
             * @type Microsoft.Xna.Framework.Vector2
             */
            GroundAnchorB: null,
            LocalAnchorA: null,
            LocalAnchorB: null,
            MinPulleyLength: 0,
            _ant: 0,
            _impulse: 0,
            _lengthA: 0,
            _lengthB: 0,
            _limitImpulse1: 0,
            _limitImpulse2: 0,
            _limitMass1: 0,
            _limitMass2: 0,
            _limitState1: 0,
            _limitState2: 0,
            _maxLengthA: 0,
            _maxLengthB: 0,
            _pulleyMass: 0,
            _state: 0,
            _u1: null,
            _u2: null,
            /**
             * Get the pulley ratio.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.PulleyJoint
             * @function Ratio
             * @type number
             */
            Ratio: 0
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyB.GetWorldPoint(this.LocalAnchorB.$clone());
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            },
            /**
             * Get the current length of the segment attached to body1.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.PulleyJoint
             * @function LengthA
             * @type number
             */
            LengthA: {
                get: function () {
                    var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone()), this.GroundAnchorA.$clone());
                    return d.Length();
                },
                set: function (value) {
                    this._lengthA = value;
                }
            },
            /**
             * Get the current length of the segment attached to body2.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.PulleyJoint
             * @function LengthB
             * @type number
             */
            LengthB: {
                get: function () {
                    var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.BodyB.GetWorldPoint(this.LocalAnchorB.$clone()), this.GroundAnchorB.$clone());
                    return d.Length();
                },
                set: function (value) {
                    this._lengthB = value;
                }
            },
            MaxLengthA: {
                get: function () {
                    return this._maxLengthA;
                },
                set: function (value) {
                    this._maxLengthA = value;
                }
            },
            MaxLengthB: {
                get: function () {
                    return this._maxLengthB;
                },
                set: function (value) {
                    this._maxLengthB = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.GroundAnchorA = new Microsoft.Xna.Framework.Vector2();
                this.GroundAnchorB = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorB = new Microsoft.Xna.Framework.Vector2();
                this._u1 = new Microsoft.Xna.Framework.Vector2();
                this._u2 = new Microsoft.Xna.Framework.Vector2();
                this.MinPulleyLength = 2.0;
            },
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.ctor.call(this);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Pulley;
            },
            /**
             * Initialize the bodies, anchors, lengths, max lengths, and ratio using the world anchors.
             This requires two ground anchors,
             two dynamic body anchor points, max lengths for each side,
             and a pulley ratio.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.PulleyJoint
             * @memberof FarseerPhysics.Dynamics.Joints.PulleyJoint
             * @param   {FarseerPhysics.Dynamics.Body}       bodyA            The first body.
             * @param   {FarseerPhysics.Dynamics.Body}       bodyB            The second body.
             * @param   {Microsoft.Xna.Framework.Vector2}    groundAnchorA    The ground anchor for the first body.
             * @param   {Microsoft.Xna.Framework.Vector2}    groundAnchorB    The ground anchor for the second body.
             * @param   {Microsoft.Xna.Framework.Vector2}    localAnchorA     The first body anchor.
             * @param   {Microsoft.Xna.Framework.Vector2}    localAnchorB     The second body anchor.
             * @param   {number}                             ratio            The ratio.
             * @return  {void}
             */
            $ctor1: function (bodyA, bodyB, groundAnchorA, groundAnchorB, localAnchorA, localAnchorB, ratio) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor2.call(this, bodyA, bodyB);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Pulley;

                this.GroundAnchorA = groundAnchorA.$clone();
                this.GroundAnchorB = groundAnchorB.$clone();
                this.LocalAnchorA = localAnchorA.$clone();
                this.LocalAnchorB = localAnchorB.$clone();

                var d1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.BodyA.GetWorldPoint(localAnchorA.$clone()), groundAnchorA.$clone());
                this._lengthA = d1.Length();

                var d2 = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.BodyB.GetWorldPoint(localAnchorB.$clone()), groundAnchorB.$clone());
                this._lengthB = d2.Length();

                System.Diagnostics.Debug.Assert(ratio !== 0.0);
                System.Diagnostics.Debug.Assert(ratio > FarseerPhysics.Settings.Epsilon);
                this.Ratio = ratio;

                var C = this._lengthA + this.Ratio * this._lengthB;

                this.MaxLengthA = C - this.Ratio * this.MinPulleyLength;
                this.MaxLengthB = (C - this.MinPulleyLength) / this.Ratio;

                this._ant = this._lengthA + this.Ratio * this._lengthB;

                this.MaxLengthA = Math.min(this.MaxLengthA, this._ant - this.Ratio * this.MinPulleyLength);
                this.MaxLengthB = Math.min(this.MaxLengthB, (this._ant - this.MinPulleyLength) / this.Ratio);

                this._impulse = 0.0;
                this._limitImpulse1 = 0.0;
                this._limitImpulse2 = 0.0;
            }
        },
        methods: {
            GetReactionForce: function (inv_dt) {
                var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse, this._u2.$clone());
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2(inv_dt, P.$clone());
            },
            GetReactionTorque: function (inv_dt) {
                return 0.0;
            },
            InitVelocityConstraints: function (step) {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var xf1 = { v : new FarseerPhysics.Common.Transform() }, xf2 = { v : new FarseerPhysics.Common.Transform() };
                b1.GetTransform(xf1);
                b2.GetTransform(xf2);

                var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));
                var r2 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone()));

                var p1 = Microsoft.Xna.Framework.Vector2.op_Addition(b1.Sweep.C.$clone(), r1.$clone());
                var p2 = Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), r2.$clone());

                var s1 = this.GroundAnchorA.$clone();
                var s2 = this.GroundAnchorB.$clone();

                this._u1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(p1.$clone(), s1.$clone());
                this._u2 = Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.$clone(), s2.$clone());

                var length1 = this._u1.Length();
                var length2 = this._u2.Length();

                if (length1 > FarseerPhysics.Settings.LinearSlop) {
                    this._u1 = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._u1.$clone(), 1.0 / length1);
                } else {
                    this._u1 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                }

                if (length2 > FarseerPhysics.Settings.LinearSlop) {
                    this._u2 = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._u2.$clone(), 1.0 / length2);
                } else {
                    this._u2 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                }

                var C = this._ant - length1 - this.Ratio * length2;
                if (C > 0.0) {
                    this._state = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
                    this._impulse = 0.0;
                } else {
                    this._state = FarseerPhysics.Dynamics.Joints.LimitState.AtUpper;
                }

                if (length1 < this.MaxLengthA) {
                    this._limitState1 = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
                    this._limitImpulse1 = 0.0;
                } else {
                    this._limitState1 = FarseerPhysics.Dynamics.Joints.LimitState.AtUpper;
                }

                if (length2 < this.MaxLengthB) {
                    this._limitState2 = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
                    this._limitImpulse2 = 0.0;
                } else {
                    this._limitState2 = FarseerPhysics.Dynamics.Joints.LimitState.AtUpper;
                }

                var cr1u1 = FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), this._u1.$clone());
                var cr2u2 = FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), this._u2.$clone());

                this._limitMass1 = b1.InvMass + b1.InvI * cr1u1 * cr1u1;
                this._limitMass2 = b2.InvMass + b2.InvI * cr2u2 * cr2u2;
                this._pulleyMass = this._limitMass1 + this.Ratio * this.Ratio * this._limitMass2;
                System.Diagnostics.Debug.Assert(this._limitMass1 > FarseerPhysics.Settings.Epsilon);
                System.Diagnostics.Debug.Assert(this._limitMass2 > FarseerPhysics.Settings.Epsilon);
                System.Diagnostics.Debug.Assert(this._pulleyMass > FarseerPhysics.Settings.Epsilon);
                this._limitMass1 = 1.0 / this._limitMass1;
                this._limitMass2 = 1.0 / this._limitMass2;
                this._pulleyMass = 1.0 / this._pulleyMass;

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._impulse *= step.v.dtRatio;
                    this._limitImpulse1 *= step.v.dtRatio;
                    this._limitImpulse2 *= step.v.dtRatio;

                    var P1 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(-(this._impulse + this._limitImpulse1), this._u1.$clone());
                    var P2 = Microsoft.Xna.Framework.Vector2.op_Multiply$2((-this.Ratio * this._impulse - this._limitImpulse2), this._u2.$clone());
                    b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P1.$clone()));
                    b1.AngularVelocityInternal += b1.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), P1.$clone());
                    b2.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass, P2.$clone()));
                    b2.AngularVelocityInternal += b2.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), P2.$clone());
                } else {
                    this._impulse = 0.0;
                    this._limitImpulse1 = 0.0;
                    this._limitImpulse2 = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var xf1 = { v : new FarseerPhysics.Common.Transform() }, xf2 = { v : new FarseerPhysics.Common.Transform() };
                b1.GetTransform(xf1);
                b2.GetTransform(xf2);

                var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));
                var r2 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone()));

                if (this._state === FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                    var v1 = Microsoft.Xna.Framework.Vector2.op_Addition(b1.LinearVelocityInternal.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(b1.AngularVelocityInternal, r1.$clone()));
                    var v2 = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(b2.AngularVelocityInternal, r2.$clone()));

                    var Cdot = -Microsoft.Xna.Framework.Vector2.Dot(this._u1.$clone(), v1.$clone()) - this.Ratio * Microsoft.Xna.Framework.Vector2.Dot(this._u2.$clone(), v2.$clone());
                    var impulse = this._pulleyMass * (-Cdot);
                    var oldImpulse = this._impulse;
                    this._impulse = Math.max(0.0, this._impulse + impulse);
                    impulse = this._impulse - oldImpulse;

                    var P1 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(-impulse, this._u1.$clone());
                    var P2 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(-this.Ratio * impulse, this._u2.$clone());
                    b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P1.$clone()));
                    b1.AngularVelocityInternal += b1.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), P1.$clone());
                    b2.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass, P2.$clone()));
                    b2.AngularVelocityInternal += b2.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), P2.$clone());
                }

                if (this._limitState1 === FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                    var v11 = Microsoft.Xna.Framework.Vector2.op_Addition(b1.LinearVelocityInternal.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(b1.AngularVelocityInternal, r1.$clone()));

                    var Cdot1 = -Microsoft.Xna.Framework.Vector2.Dot(this._u1.$clone(), v11.$clone());
                    var impulse1 = -this._limitMass1 * Cdot1;
                    var oldImpulse1 = this._limitImpulse1;
                    this._limitImpulse1 = Math.max(0.0, this._limitImpulse1 + impulse1);
                    impulse1 = this._limitImpulse1 - oldImpulse1;

                    var P11 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(-impulse1, this._u1.$clone());
                    b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P11.$clone()));
                    b1.AngularVelocityInternal += b1.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), P11.$clone());
                }

                if (this._limitState2 === FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                    var v21 = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(b2.AngularVelocityInternal, r2.$clone()));

                    var Cdot2 = -Microsoft.Xna.Framework.Vector2.Dot(this._u2.$clone(), v21.$clone());
                    var impulse2 = -this._limitMass2 * Cdot2;
                    var oldImpulse2 = this._limitImpulse2;
                    this._limitImpulse2 = Math.max(0.0, this._limitImpulse2 + impulse2);
                    impulse2 = this._limitImpulse2 - oldImpulse2;

                    var P21 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(-impulse2, this._u2.$clone());
                    b2.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass, P21.$clone()));
                    b2.AngularVelocityInternal += b2.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), P21.$clone());
                }
            },
            SolvePositionConstraints: function () {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var s1 = this.GroundAnchorA.$clone();
                var s2 = this.GroundAnchorB.$clone();

                var linearError = 0.0;

                if (this._state === FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                    var xf1 = { v : new FarseerPhysics.Common.Transform() }, xf2 = { v : new FarseerPhysics.Common.Transform() };
                    b1.GetTransform(xf1);
                    b2.GetTransform(xf2);

                    var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));
                    var r2 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone()));

                    var p1 = Microsoft.Xna.Framework.Vector2.op_Addition(b1.Sweep.C.$clone(), r1.$clone());
                    var p2 = Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), r2.$clone());

                    this._u1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(p1.$clone(), s1.$clone());
                    this._u2 = Microsoft.Xna.Framework.Vector2.op_Subtraction(p2.$clone(), s2.$clone());

                    var length1 = this._u1.Length();
                    var length2 = this._u2.Length();

                    if (length1 > FarseerPhysics.Settings.LinearSlop) {
                        this._u1 = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._u1.$clone(), 1.0 / length1);
                    } else {
                        this._u1 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    }

                    if (length2 > FarseerPhysics.Settings.LinearSlop) {
                        this._u2 = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._u2.$clone(), 1.0 / length2);
                    } else {
                        this._u2 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    }

                    var C = this._ant - length1 - this.Ratio * length2;
                    linearError = Math.max(linearError, -C);

                    C = FarseerPhysics.Common.MathUtils.Clamp$2(C + FarseerPhysics.Settings.LinearSlop, -0.2, 0.0);
                    var impulse = -this._pulleyMass * C;

                    var P1 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(-impulse, this._u1.$clone());
                    var P2 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(-this.Ratio * impulse, this._u2.$clone());

                    b1.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Addition(b1.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P1.$clone()));
                    b1.Sweep.A += b1.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), P1.$clone());
                    b2.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass, P2.$clone()));
                    b2.Sweep.A += b2.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), P2.$clone());

                    b1.SynchronizeTransform();
                    b2.SynchronizeTransform();
                }

                if (this._limitState1 === FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                    var xf11 = { v : new FarseerPhysics.Common.Transform() };
                    b1.GetTransform(xf11);

                    var r11 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf11.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));
                    var p11 = Microsoft.Xna.Framework.Vector2.op_Addition(b1.Sweep.C.$clone(), r11.$clone());

                    this._u1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(p11.$clone(), s1.$clone());
                    var length11 = this._u1.Length();

                    if (length11 > FarseerPhysics.Settings.LinearSlop) {
                        this._u1 = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._u1.$clone(), 1.0 / length11);
                    } else {
                        this._u1 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    }

                    var C1 = this.MaxLengthA - length11;
                    linearError = Math.max(linearError, -C1);
                    C1 = FarseerPhysics.Common.MathUtils.Clamp$2(C1 + FarseerPhysics.Settings.LinearSlop, -0.2, 0.0);
                    var impulse1 = -this._limitMass1 * C1;

                    var P11 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(-impulse1, this._u1.$clone());
                    b1.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Addition(b1.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P11.$clone()));
                    b1.Sweep.A += b1.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r11.$clone(), P11.$clone());

                    b1.SynchronizeTransform();
                }

                if (this._limitState2 === FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                    var xf21 = { v : new FarseerPhysics.Common.Transform() };
                    b2.GetTransform(xf21);

                    var r21 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf21.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone()));
                    var p21 = Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), r21.$clone());

                    this._u2 = Microsoft.Xna.Framework.Vector2.op_Subtraction(p21.$clone(), s2.$clone());
                    var length21 = this._u2.Length();

                    if (length21 > FarseerPhysics.Settings.LinearSlop) {
                        this._u2 = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._u2.$clone(), 1.0 / length21);
                    } else {
                        this._u2 = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    }

                    var C2 = this.MaxLengthB - length21;
                    linearError = Math.max(linearError, -C2);
                    C2 = FarseerPhysics.Common.MathUtils.Clamp$2(C2 + FarseerPhysics.Settings.LinearSlop, -0.2, 0.0);
                    var impulse2 = -this._limitMass2 * C2;

                    var P21 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(-impulse2, this._u2.$clone());
                    b2.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass, P21.$clone()));
                    b2.Sweep.A += b2.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r21.$clone(), P21.$clone());

                    b2.SynchronizeTransform();
                }

                return linearError < FarseerPhysics.Settings.LinearSlop;
            }
        }
    });

    /**
     * A revolute joint rains to bodies to share a common point while they
     are free to rotate about the point. The relative rotation about the shared
     point is the joint angle. You can limit the relative rotation with
     a joint limit that specifies a lower and upper angle. You can use a motor
     to drive the relative rotation about the shared point. A maximum motor torque
     is provided so that infinite forces are not generated.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.RevoluteJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.RevoluteJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            LocalAnchorA: null,
            LocalAnchorB: null,
            _enableLimit: false,
            _enableMotor: false,
            _impulse: null,
            _limitState: 0,
            _lowerAngle: 0,
            _mass: null,
            _maxMotorTorque: 0,
            _motorImpulse: 0,
            _motorMass: 0,
            _motorSpeed: 0,
            _referenceAngle: 0,
            _tmpFloat1: 0,
            _tmpVector1: null,
            _tmpVector2: null,
            _upperAngle: 0
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyB.GetWorldPoint(this.LocalAnchorB.$clone());
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            },
            ReferenceAngle: {
                get: function () {
                    return this._referenceAngle;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._referenceAngle = value;
                }
            },
            /**
             * Get the current joint angle in radians.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.Joints.RevoluteJoint
             * @function JointAngle
             * @type number
             */
            JointAngle: {
                get: function () {
                    return this.BodyB.Sweep.A - this.BodyA.Sweep.A - this.ReferenceAngle;
                }
            },
            /**
             * Get the current joint angle speed in radians per second.
             *
             * @instance
             * @public
             * @readonly
             * @memberof FarseerPhysics.Dynamics.Joints.RevoluteJoint
             * @function JointSpeed
             * @type number
             */
            JointSpeed: {
                get: function () {
                    return this.BodyB.AngularVelocityInternal - this.BodyA.AngularVelocityInternal;
                }
            },
            /**
             * Is the joint limit enabled?
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.RevoluteJoint
             * @function LimitEnabled
             * @type boolean
             */
            LimitEnabled: {
                get: function () {
                    return this._enableLimit;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._enableLimit = value;
                }
            },
            /**
             * Get the lower joint limit in radians.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.RevoluteJoint
             * @function LowerLimit
             * @type number
             */
            LowerLimit: {
                get: function () {
                    return this._lowerAngle;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._lowerAngle = value;
                }
            },
            /**
             * Get the upper joint limit in radians.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.RevoluteJoint
             * @function UpperLimit
             * @type number
             */
            UpperLimit: {
                get: function () {
                    return this._upperAngle;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._upperAngle = value;
                }
            },
            /**
             * Is the joint motor enabled?
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.RevoluteJoint
             * @function MotorEnabled
             * @type boolean
             */
            MotorEnabled: {
                get: function () {
                    return this._enableMotor;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._enableMotor = value;
                }
            },
            /**
             * Set the motor speed in radians per second.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.RevoluteJoint
             * @function MotorSpeed
             * @type number
             */
            MotorSpeed: {
                get: function () {
                    return this._motorSpeed;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._motorSpeed = value;
                }
            },
            /**
             * Set the maximum motor torque, usually in N-m.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.RevoluteJoint
             * @function MaxMotorTorque
             * @type number
             */
            MaxMotorTorque: {
                get: function () {
                    return this._maxMotorTorque;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._maxMotorTorque = value;
                }
            },
            /**
             * Get the current motor torque, usually in N-m.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.RevoluteJoint
             * @function MotorTorque
             * @type number
             */
            MotorTorque: {
                get: function () {
                    return this._motorImpulse;
                },
                set: function (value) {
                    this.WakeBodies();
                    this._motorImpulse = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorB = new Microsoft.Xna.Framework.Vector2();
                this._impulse = new Microsoft.Xna.Framework.Vector3();
                this._mass = new FarseerPhysics.Common.Mat33();
                this._tmpVector1 = new Microsoft.Xna.Framework.Vector2();
                this._tmpVector2 = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.ctor.call(this);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Revolute;
            },
            /**
             * Initialize the bodies and local anchor.
             This requires defining an
             anchor point where the bodies are joined. The definition
             uses local anchor points so that the initial configuration
             can violate the constraint slightly. You also need to
             specify the initial relative angle for joint limits. This
             helps when saving and loading a game.
             The local anchor points are measured from the body's origin
             rather than the center of mass because:
             1. you might not know where the center of mass will be.
             2. if you add/remove shapes from a body and recompute the mass,
             the joints will be broken.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.RevoluteJoint
             * @memberof FarseerPhysics.Dynamics.Joints.RevoluteJoint
             * @param   {FarseerPhysics.Dynamics.Body}       bodyA           The first body.
             * @param   {FarseerPhysics.Dynamics.Body}       bodyB           The second body.
             * @param   {Microsoft.Xna.Framework.Vector2}    localAnchorA    The first body anchor.
             * @param   {Microsoft.Xna.Framework.Vector2}    localAnchorB    The second anchor.
             * @return  {void}
             */
            $ctor1: function (bodyA, bodyB, localAnchorA, localAnchorB) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor2.call(this, bodyA, bodyB);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Revolute;

                this.LocalAnchorA = localAnchorA.$clone();
                this.LocalAnchorB = localAnchorB.$clone();

                this.ReferenceAngle = this.BodyB.Rotation - this.BodyA.Rotation;

                this._impulse = Microsoft.Xna.Framework.Vector3.Zero.$clone();

                this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
            }
        },
        methods: {
            GetReactionForce: function (inv_dt) {
                var P = new Microsoft.Xna.Framework.Vector2.$ctor2(this._impulse.X, this._impulse.Y);
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2(inv_dt, P.$clone());
            },
            GetReactionTorque: function (inv_dt) {
                return inv_dt * this._impulse.Z;
            },
            InitVelocityConstraints: function (step) {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                if (this._enableMotor || this._enableLimit) {
                    System.Diagnostics.Debug.Assert(b1.InvI > 0.0 || b2.InvI > 0.0);
                }

                /* Transform xf1, xf2;
                b1.GetTransform(out xf1);
                b2.GetTransform(out xf2);*/

                var r1 = { v : FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(b1.Xf, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone())) };
                var r2 = { v : FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(b2.Xf, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone())) };



                var m1 = b1.InvMass, m2 = b2.InvMass;
                var i1 = b1.InvI, i2 = b2.InvI;

                this._mass.Col1.X = m1 + m2 + r1.v.Y * r1.v.Y * i1 + r2.v.Y * r2.v.Y * i2;
                this._mass.Col2.X = -r1.v.Y * r1.v.X * i1 - r2.v.Y * r2.v.X * i2;
                this._mass.Col3.X = -r1.v.Y * i1 - r2.v.Y * i2;
                this._mass.Col1.Y = this._mass.Col2.X;
                this._mass.Col2.Y = m1 + m2 + r1.v.X * r1.v.X * i1 + r2.v.X * r2.v.X * i2;
                this._mass.Col3.Y = r1.v.X * i1 + r2.v.X * i2;
                this._mass.Col1.Z = this._mass.Col3.X;
                this._mass.Col2.Z = this._mass.Col3.Y;
                this._mass.Col3.Z = i1 + i2;

                this._motorMass = i1 + i2;
                if (this._motorMass > 0.0) {
                    this._motorMass = 1.0 / this._motorMass;
                }

                if (this._enableMotor === false) {
                    this._motorImpulse = 0.0;
                }

                if (this._enableLimit) {
                    var jointAngle = b2.Sweep.A - b1.Sweep.A - this.ReferenceAngle;
                    if (Math.abs(this._upperAngle - this._lowerAngle) < 0.06981318) {
                        this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Equal;
                    } else if (jointAngle <= this._lowerAngle) {
                        if (this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.AtLower) {
                            this._impulse.Z = 0.0;
                        }
                        this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.AtLower;
                    } else if (jointAngle >= this._upperAngle) {
                        if (this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                            this._impulse.Z = 0.0;
                        }
                        this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.AtUpper;
                    } else {
                        this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
                        this._impulse.Z = 0.0;
                    }
                } else {
                    this._limitState = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
                }

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._impulse = Microsoft.Xna.Framework.Vector3.op_Multiply$1(this._impulse.$clone(), step.v.dtRatio);
                    this._motorImpulse *= step.v.dtRatio;

                    var P = { v : new Microsoft.Xna.Framework.Vector2.$ctor2(this._impulse.X, this._impulse.Y) };

                    b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(m1, P.v.$clone()));
                    FarseerPhysics.Common.MathUtils.Cross$3(r1, P, Bridge.ref(this, "_tmpFloat1"));
                    b1.AngularVelocityInternal -= i1 * (this._tmpFloat1 + this._motorImpulse + this._impulse.Z);

                    b2.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(m2, P.v.$clone()));
                    FarseerPhysics.Common.MathUtils.Cross$3(r2, P, Bridge.ref(this, "_tmpFloat1"));
                    b2.AngularVelocityInternal += i2 * (this._tmpFloat1 + this._motorImpulse + this._impulse.Z);
                } else {
                    this._impulse = Microsoft.Xna.Framework.Vector3.Zero.$clone();
                    this._motorImpulse = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var v1 = b1.LinearVelocityInternal.$clone();
                var w1 = b1.AngularVelocityInternal;
                var v2 = b2.LinearVelocityInternal.$clone();
                var w2 = b2.AngularVelocityInternal;

                var m1 = b1.InvMass, m2 = b2.InvMass;
                var i1 = b1.InvI, i2 = b2.InvI;

                if (this._enableMotor && this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.Equal) {
                    var Cdot = w2 - w1 - this._motorSpeed;
                    var impulse = this._motorMass * (-Cdot);
                    var oldImpulse = this._motorImpulse;
                    var maxImpulse = step.v.dt * this._maxMotorTorque;
                    this._motorImpulse = FarseerPhysics.Common.MathUtils.Clamp$2(this._motorImpulse + impulse, -maxImpulse, maxImpulse);
                    impulse = this._motorImpulse - oldImpulse;

                    w1 -= i1 * impulse;
                    w2 += i2 * impulse;
                }

                if (this._enableLimit && this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.Inactive) {
                    /* Transform xf1, xf2;
                    b1.GetTransform(out xf1);
                    b2.GetTransform(out xf2);*/

                    var r1 = { v : FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(b1.Xf, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone())) };
                    var r2 = { v : FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(b2.Xf, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone())) };

                    FarseerPhysics.Common.MathUtils.Cross$4(w2, r2, Bridge.ref(this, "_tmpVector2"));
                    FarseerPhysics.Common.MathUtils.Cross$4(w1, r1, Bridge.ref(this, "_tmpVector1"));
                    var Cdot1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), this._tmpVector2.$clone()), v1.$clone()), this._tmpVector1.$clone());
                    var Cdot2 = w2 - w1;
                    var Cdot3 = new Microsoft.Xna.Framework.Vector3.$ctor3(Cdot1.X, Cdot1.Y, Cdot2);

                    var impulse1 = this._mass.Solve33(Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Cdot3.$clone()));

                    if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.Equal) {
                        this._impulse = Microsoft.Xna.Framework.Vector3.op_Addition(this._impulse.$clone(), impulse1.$clone());
                    } else if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.AtLower) {
                        var newImpulse = this._impulse.Z + impulse1.Z;
                        if (newImpulse < 0.0) {
                            var reduced = this._mass.Solve22(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Cdot1.$clone()));
                            impulse1.X = reduced.X;
                            impulse1.Y = reduced.Y;
                            impulse1.Z = -this._impulse.Z;
                            this._impulse.X += reduced.X;
                            this._impulse.Y += reduced.Y;
                            this._impulse.Z = 0.0;
                        }
                    } else if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                        var newImpulse1 = this._impulse.Z + impulse1.Z;
                        if (newImpulse1 > 0.0) {
                            var reduced1 = this._mass.Solve22(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Cdot1.$clone()));
                            impulse1.X = reduced1.X;
                            impulse1.Y = reduced1.Y;
                            impulse1.Z = -this._impulse.Z;
                            this._impulse.X += reduced1.X;
                            this._impulse.Y += reduced1.Y;
                            this._impulse.Z = 0.0;
                        }
                    }

                    var P = { v : new Microsoft.Xna.Framework.Vector2.$ctor2(impulse1.X, impulse1.Y) };

                    v1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(v1.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(m1, P.v.$clone()));
                    FarseerPhysics.Common.MathUtils.Cross$3(r1, P, Bridge.ref(this, "_tmpFloat1"));
                    w1 -= i1 * (this._tmpFloat1 + impulse1.Z);

                    v2 = Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(m2, P.v.$clone()));
                    FarseerPhysics.Common.MathUtils.Cross$3(r2, P, Bridge.ref(this, "_tmpFloat1"));
                    w2 += i2 * (this._tmpFloat1 + impulse1.Z);
                } else {
                    /* Transform xf1, xf2;
                    b1.GetTransform(out xf1);
                    b2.GetTransform(out xf2);*/

                    this._tmpVector1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone());
                    this._tmpVector2 = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone());
                    var r11 = { v : FarseerPhysics.Common.MathUtils.Multiply$1(Bridge.ref(b1.Xf, "R"), Bridge.ref(this, "_tmpVector1")) };
                    var r21 = { v : FarseerPhysics.Common.MathUtils.Multiply$1(Bridge.ref(b2.Xf, "R"), Bridge.ref(this, "_tmpVector2")) };

                    FarseerPhysics.Common.MathUtils.Cross$4(w2, r21, Bridge.ref(this, "_tmpVector2"));
                    FarseerPhysics.Common.MathUtils.Cross$4(w1, r11, Bridge.ref(this, "_tmpVector1"));
                    var Cdot4 = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), this._tmpVector2.$clone()), v1.$clone()), this._tmpVector1.$clone());
                    var impulse2 = { v : this._mass.Solve22(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Cdot4.$clone())) };

                    this._impulse.X += impulse2.v.X;
                    this._impulse.Y += impulse2.v.Y;

                    v1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(v1.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(m1, impulse2.v.$clone()));
                    FarseerPhysics.Common.MathUtils.Cross$3(r11, impulse2, Bridge.ref(this, "_tmpFloat1"));
                    w1 -= i1 * this._tmpFloat1;

                    v2 = Microsoft.Xna.Framework.Vector2.op_Addition(v2.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(m2, impulse2.v.$clone()));
                    FarseerPhysics.Common.MathUtils.Cross$3(r21, impulse2, Bridge.ref(this, "_tmpFloat1"));
                    w2 += i2 * this._tmpFloat1;
                }

                b1.LinearVelocityInternal = v1.$clone();
                b1.AngularVelocityInternal = w1;
                b2.LinearVelocityInternal = v2.$clone();
                b2.AngularVelocityInternal = w2;
            },
            SolvePositionConstraints: function () {

                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var angularError = 0.0;
                var positionError;

                if (this._enableLimit && this._limitState !== FarseerPhysics.Dynamics.Joints.LimitState.Inactive) {
                    var angle = b2.Sweep.A - b1.Sweep.A - this.ReferenceAngle;
                    var limitImpulse = 0.0;

                    if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.Equal) {
                        var C = FarseerPhysics.Common.MathUtils.Clamp$2(angle - this._lowerAngle, -0.139626354, FarseerPhysics.Settings.MaxAngularCorrection);
                        limitImpulse = -this._motorMass * C;
                        angularError = Math.abs(C);
                    } else if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.AtLower) {
                        var C1 = angle - this._lowerAngle;
                        angularError = -C1;

                        C1 = FarseerPhysics.Common.MathUtils.Clamp$2(C1 + FarseerPhysics.Settings.AngularSlop, -0.139626354, 0.0);
                        limitImpulse = -this._motorMass * C1;
                    } else if (this._limitState === FarseerPhysics.Dynamics.Joints.LimitState.AtUpper) {
                        var C2 = angle - this._upperAngle;
                        angularError = C2;

                        C2 = FarseerPhysics.Common.MathUtils.Clamp$2(C2 - FarseerPhysics.Settings.AngularSlop, 0.0, FarseerPhysics.Settings.MaxAngularCorrection);
                        limitImpulse = -this._motorMass * C2;
                    }

                    b1.Sweep.A -= b1.InvI * limitImpulse;
                    b2.Sweep.A += b2.InvI * limitImpulse;

                    b1.SynchronizeTransform();
                    b2.SynchronizeTransform();
                }

                {
                    /* Transform xf1, xf2;
                    b1.GetTransform(out xf1);
                    b2.GetTransform(out xf2);*/

                    var r1 = { v : FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(b1.Xf, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone())) };
                    var r2 = { v : FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(b2.Xf, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone())) };

                    var C3 = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), r2.v.$clone()), b1.Sweep.C.$clone()), r1.v.$clone());
                    positionError = C3.Length();

                    var invMass1 = b1.InvMass, invMass2 = b2.InvMass;
                    var invI1 = b1.InvI, invI2 = b2.InvI;

                    var k_allowedStretch = 0.049999997;
                    if (C3.LengthSquared() > 0.00249999971) {
                        var u = C3.$clone();
                        u.Normalize();
                        var k = invMass1 + invMass2;
                        System.Diagnostics.Debug.Assert(k > FarseerPhysics.Settings.Epsilon);
                        var m = 1.0 / k;
                        var impulse2 = Microsoft.Xna.Framework.Vector2.op_Multiply$2(m, (Microsoft.Xna.Framework.Vector2.op_UnaryNegation(C3.$clone())));
                        var k_beta = 0.5;
                        b1.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(k_beta * invMass1, impulse2.$clone()));
                        b2.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(k_beta * invMass2, impulse2.$clone()));

                        C3 = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), r2.v.$clone()), b1.Sweep.C.$clone()), r1.v.$clone());
                    }

                    var K1 = { v : new FarseerPhysics.Common.Mat22.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(invMass1 + invMass2, 0.0), new Microsoft.Xna.Framework.Vector2.$ctor2(0.0, invMass1 + invMass2)) };
                    var K2 = { v : new FarseerPhysics.Common.Mat22.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(invI1 * r1.v.Y * r1.v.Y, -invI1 * r1.v.X * r1.v.Y), new Microsoft.Xna.Framework.Vector2.$ctor2(-invI1 * r1.v.X * r1.v.Y, invI1 * r1.v.X * r1.v.X)) };
                    var K3 = { v : new FarseerPhysics.Common.Mat22.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(invI2 * r2.v.Y * r2.v.Y, -invI2 * r2.v.X * r2.v.Y), new Microsoft.Xna.Framework.Vector2.$ctor2(-invI2 * r2.v.X * r2.v.Y, invI2 * r2.v.X * r2.v.X)) };

                    var Ka = { v : new FarseerPhysics.Common.Mat22() };
                    FarseerPhysics.Common.Mat22.Add(K1, K2, Ka);

                    var K = { v : new FarseerPhysics.Common.Mat22() };
                    FarseerPhysics.Common.Mat22.Add(Ka, K3, K);


                    var impulse = { v : K.v.Solve(Microsoft.Xna.Framework.Vector2.op_UnaryNegation(C3.$clone())) };

                    b1.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, impulse.v.$clone()));
                    FarseerPhysics.Common.MathUtils.Cross$3(r1, impulse, Bridge.ref(this, "_tmpFloat1"));
                    b1.Sweep.A -= b1.InvI * this._tmpFloat1;

                    b2.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass, impulse.v.$clone()));
                    FarseerPhysics.Common.MathUtils.Cross$3(r2, impulse, Bridge.ref(this, "_tmpFloat1"));
                    b2.Sweep.A += b2.InvI * this._tmpFloat1;

                    b1.SynchronizeTransform();
                    b2.SynchronizeTransform();
                }

                return positionError <= FarseerPhysics.Settings.LinearSlop && angularError <= FarseerPhysics.Settings.AngularSlop;
            }
        }
    });

    /**
     * A rope joint enforces a maximum distance between two points
     on two bodies. It has no other effect.
     Warning: if you attempt to change the maximum length during
     the simulation you will get some non-physical behavior.
     A model that would allow you to dynamically modify the length
     would have some sponginess, so I chose not to implement it
     that way. See b2DistanceJoint if you want to dynamically
     control length.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.RopeJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.RopeJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            LocalAnchorA: null,
            LocalAnchorB: null,
            _impulse: 0,
            _length: 0,
            _mass: 0,
            _rA: null,
            _rB: null,
            _state: 0,
            _u: null,
            /**
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.RopeJoint
             * @function MaxLength
             * @type number
             */
            MaxLength: 0
        },
        props: {
            State: {
                get: function () {
                    return this._state;
                }
            },
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyB.GetWorldPoint(this.LocalAnchorB.$clone());
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            }
        },
        ctors: {
            init: function () {
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorB = new Microsoft.Xna.Framework.Vector2();
                this._rA = new Microsoft.Xna.Framework.Vector2();
                this._rB = new Microsoft.Xna.Framework.Vector2();
                this._u = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.ctor.call(this);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Rope;
            },
            $ctor1: function (bodyA, bodyB, localAnchorA, localAnchorB) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor2.call(this, bodyA, bodyB);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Rope;
                this.LocalAnchorA = localAnchorA.$clone();
                this.LocalAnchorB = localAnchorB.$clone();

                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(this.WorldAnchorB.$clone(), this.WorldAnchorA.$clone());
                this.MaxLength = d.Length();

                this._mass = 0.0;
                this._impulse = 0.0;
                this._state = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
                this._length = 0.0;
            }
        },
        methods: {
            GetReactionForce: function (invDt) {
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2((invDt * this._impulse), this._u.$clone());
            },
            GetReactionTorque: function (invDt) {
                return 0;
            },
            InitVelocityConstraints: function (step) {
                var bA = this.BodyA;
                var bB = this.BodyB;

                var xf1 = { v : new FarseerPhysics.Common.Transform() };
                bA.GetTransform(xf1);

                var xf2 = { v : new FarseerPhysics.Common.Transform() };
                bB.GetTransform(xf2);

                this._rA = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), bA.LocalCenter.$clone()));
                this._rB = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), bB.LocalCenter.$clone()));

                this._u = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(bB.Sweep.C.$clone(), this._rB.$clone()), bA.Sweep.C.$clone()), this._rA.$clone());

                this._length = this._u.Length();

                var C = this._length - this.MaxLength;
                if (C > 0.0) {
                    this._state = FarseerPhysics.Dynamics.Joints.LimitState.AtUpper;
                } else {
                    this._state = FarseerPhysics.Dynamics.Joints.LimitState.Inactive;
                }

                if (this._length > FarseerPhysics.Settings.LinearSlop) {
                    this._u = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._u.$clone(), 1.0 / this._length);
                } else {
                    this._u = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                    this._mass = 0.0;
                    this._impulse = 0.0;
                    return;
                }

                var crA = FarseerPhysics.Common.MathUtils.Cross$2(this._rA.$clone(), this._u.$clone());
                var crB = FarseerPhysics.Common.MathUtils.Cross$2(this._rB.$clone(), this._u.$clone());
                var invMass = bA.InvMass + bA.InvI * crA * crA + bB.InvMass + bB.InvI * crB * crB;

                this._mass = invMass !== 0.0 ? 1.0 / invMass : 0.0;

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._impulse *= step.v.dtRatio;

                    var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse, this._u.$clone());
                    bA.LinearVelocity = Microsoft.Xna.Framework.Vector2.op_Subtraction(bA.LinearVelocity.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(bA.InvMass, P.$clone()));
                    bA.AngularVelocity -= bA.InvI * FarseerPhysics.Common.MathUtils.Cross$2(this._rA.$clone(), P.$clone());
                    bB.LinearVelocity = Microsoft.Xna.Framework.Vector2.op_Addition(bB.LinearVelocity.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(bB.InvMass, P.$clone()));
                    bB.AngularVelocity += bB.InvI * FarseerPhysics.Common.MathUtils.Cross$2(this._rB.$clone(), P.$clone());
                } else {
                    this._impulse = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var bA = this.BodyA;
                var bB = this.BodyB;

                var vA = Microsoft.Xna.Framework.Vector2.op_Addition(bA.LinearVelocity.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(bA.AngularVelocity, this._rA.$clone()));
                var vB = Microsoft.Xna.Framework.Vector2.op_Addition(bB.LinearVelocity.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(bB.AngularVelocity, this._rB.$clone()));
                var C = this._length - this.MaxLength;
                var Cdot = Microsoft.Xna.Framework.Vector2.Dot(this._u.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(vB.$clone(), vA.$clone()));

                if (C < 0.0) {
                    Cdot += step.v.inv_dt * C;
                }

                var impulse = -this._mass * Cdot;
                var oldImpulse = this._impulse;
                this._impulse = Math.min(0.0, this._impulse + impulse);
                impulse = this._impulse - oldImpulse;

                var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, this._u.$clone());
                bA.LinearVelocity = Microsoft.Xna.Framework.Vector2.op_Subtraction(bA.LinearVelocity.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(bA.InvMass, P.$clone()));
                bA.AngularVelocity -= bA.InvI * FarseerPhysics.Common.MathUtils.Cross$2(this._rA.$clone(), P.$clone());
                bB.LinearVelocity = Microsoft.Xna.Framework.Vector2.op_Addition(bB.LinearVelocity.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(bB.InvMass, P.$clone()));
                bB.AngularVelocity += bB.InvI * FarseerPhysics.Common.MathUtils.Cross$2(this._rB.$clone(), P.$clone());
            },
            SolvePositionConstraints: function () {
                var bA = this.BodyA;
                var bB = this.BodyB;

                var xf1 = { v : new FarseerPhysics.Common.Transform() };
                bA.GetTransform(xf1);

                var xf2 = { v : new FarseerPhysics.Common.Transform() };
                bB.GetTransform(xf2);

                var rA = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), bA.LocalCenter.$clone()));
                var rB = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), bB.LocalCenter.$clone()));

                var u = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(bB.Sweep.C.$clone(), rB.$clone()), bA.Sweep.C.$clone()), rA.$clone());


                var length = u.Length();
                u.Normalize();

                var C = length - this.MaxLength;

                C = FarseerPhysics.Common.MathUtils.Clamp$2(C, 0.0, FarseerPhysics.Settings.MaxLinearCorrection);

                var impulse = -this._mass * C;
                var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, u.$clone());

                bA.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Subtraction(bA.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(bA.InvMass, P.$clone()));
                bA.Sweep.A -= bA.InvI * FarseerPhysics.Common.MathUtils.Cross$2(rA.$clone(), P.$clone());
                bB.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Addition(bB.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(bB.InvMass, P.$clone()));
                bB.Sweep.A += bB.InvI * FarseerPhysics.Common.MathUtils.Cross$2(rB.$clone(), P.$clone());

                bA.SynchronizeTransform();
                bB.SynchronizeTransform();

                return length - this.MaxLength < FarseerPhysics.Settings.LinearSlop;
            }
        }
    });

    /**
     * A distance joint contrains two points on two bodies
     to remain at a fixed distance from each other. You can view
     this as a massless, rigid rod.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.SliderJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.SliderJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            LocalAnchorA: null,
            LocalAnchorB: null,
            _bias: 0,
            _gamma: 0,
            _impulse: 0,
            _mass: 0,
            _u: null,
            /**
             * The maximum length between the anchor points.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.SliderJoint
             * @function MaxLength
             * @type number
             */
            MaxLength: 0,
            /**
             * The minimal length between the anchor points.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.SliderJoint
             * @function MinLength
             * @type number
             */
            MinLength: 0,
            /**
             * The mass-spring-damper frequency in Hertz.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.SliderJoint
             * @function Frequency
             * @type number
             */
            Frequency: 0,
            /**
             * The damping ratio. 0 = no damping, 1 = critical damping.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.SliderJoint
             * @function DampingRatio
             * @type number
             */
            DampingRatio: 0
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyB.GetWorldPoint(this.LocalAnchorB.$clone());
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            }
        },
        ctors: {
            init: function () {
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorB = new Microsoft.Xna.Framework.Vector2();
                this._u = new Microsoft.Xna.Framework.Vector2();
            },
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.ctor.call(this);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Slider;
            },
            /**
             * Initializes a new instance of the {@link } class.
             Warning: Do not use a zero or short length.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.SliderJoint
             * @memberof FarseerPhysics.Dynamics.Joints.SliderJoint
             * @param   {FarseerPhysics.Dynamics.Body}       bodyA           The first body.
             * @param   {FarseerPhysics.Dynamics.Body}       bodyB           The second body.
             * @param   {Microsoft.Xna.Framework.Vector2}    localAnchorA    The first body anchor.
             * @param   {Microsoft.Xna.Framework.Vector2}    localAnchorB    The second body anchor.
             * @param   {number}                             minLength       The minimum length between anchorpoints
             * @param   {number}                             maxlength       The maximum length between anchorpoints.
             * @return  {void}
             */
            $ctor1: function (bodyA, bodyB, localAnchorA, localAnchorB, minLength, maxlength) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor2.call(this, bodyA, bodyB);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Slider;

                this.LocalAnchorA = localAnchorA.$clone();
                this.LocalAnchorB = localAnchorB.$clone();
                this.MaxLength = maxlength;
                this.MinLength = minLength;
            }
        },
        methods: {
            GetReactionForce: function (inv_dt) {
                var F = Microsoft.Xna.Framework.Vector2.op_Multiply$2((inv_dt * this._impulse), this._u.$clone());
                return F.$clone();
            },
            GetReactionTorque: function (inv_dt) {
                return 0.0;
            },
            InitVelocityConstraints: function (step) {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var xf1 = { v : new FarseerPhysics.Common.Transform() }, xf2 = { v : new FarseerPhysics.Common.Transform() };
                b1.GetTransform(xf1);
                b2.GetTransform(xf2);

                var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));
                var r2 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone()));
                this._u = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), r2.$clone()), b1.Sweep.C.$clone()), r1.$clone());

                var length = this._u.Length();

                if (length < this.MaxLength && length > this.MinLength) {
                    return;
                }

                if (length > FarseerPhysics.Settings.LinearSlop) {
                    this._u = Microsoft.Xna.Framework.Vector2.op_Multiply$1(this._u.$clone(), 1.0 / length);
                } else {
                    this._u = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                }

                var cr1u = FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), this._u.$clone());
                var cr2u = FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), this._u.$clone());
                var invMass = b1.InvMass + b1.InvI * cr1u * cr1u + b2.InvMass + b2.InvI * cr2u * cr2u;
                System.Diagnostics.Debug.Assert(invMass > FarseerPhysics.Settings.Epsilon);
                this._mass = invMass !== 0.0 ? 1.0 / invMass : 0.0;

                if (this.Frequency > 0.0) {
                    var C = length - this.MaxLength;

                    var omega = 6.28318548 * this.Frequency;

                    var d = 2.0 * this._mass * this.DampingRatio * omega;

                    var k = this._mass * omega * omega;

                    this._gamma = step.v.dt * (d + step.v.dt * k);
                    this._gamma = this._gamma !== 0.0 ? 1.0 / this._gamma : 0.0;
                    this._bias = C * step.v.dt * k * this._gamma;

                    this._mass = invMass + this._gamma;
                    this._mass = this._mass !== 0.0 ? 1.0 / this._mass : 0.0;
                }

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._impulse *= step.v.dtRatio;

                    var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(this._impulse, this._u.$clone());
                    b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P.$clone()));
                    b1.AngularVelocityInternal -= b1.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), P.$clone());
                    b2.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass, P.$clone()));
                    b2.AngularVelocityInternal += b2.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), P.$clone());
                } else {
                    this._impulse = 0.0;
                }
            },
            SolveVelocityConstraints: function (step) {
                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var xf1 = { v : new FarseerPhysics.Common.Transform() }, xf2 = { v : new FarseerPhysics.Common.Transform() };
                b1.GetTransform(xf1);
                b2.GetTransform(xf2);

                var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));
                var r2 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone()));

                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), r2.$clone()), b1.Sweep.C.$clone()), r1.$clone());

                var length = d.Length();

                if (length < this.MaxLength && length > this.MinLength) {
                    return;
                }

                var v1 = Microsoft.Xna.Framework.Vector2.op_Addition(b1.LinearVelocityInternal.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(b1.AngularVelocityInternal, r1.$clone()));
                var v2 = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(b2.AngularVelocityInternal, r2.$clone()));
                var Cdot = Microsoft.Xna.Framework.Vector2.Dot(this._u.$clone(), Microsoft.Xna.Framework.Vector2.op_Subtraction(v2.$clone(), v1.$clone()));

                var impulse = -this._mass * (Cdot + this._bias + this._gamma * this._impulse);
                this._impulse += impulse;

                var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, this._u.$clone());
                b1.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P.$clone()));
                b1.AngularVelocityInternal -= b1.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), P.$clone());
                b2.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(b2.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass, P.$clone()));
                b2.AngularVelocityInternal += b2.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), P.$clone());
            },
            SolvePositionConstraints: function () {
                if (this.Frequency > 0.0) {
                    return true;
                }

                var b1 = this.BodyA;
                var b2 = this.BodyB;

                var xf1 = { v : new FarseerPhysics.Common.Transform() }, xf2 = { v : new FarseerPhysics.Common.Transform() };
                b1.GetTransform(xf1);
                b2.GetTransform(xf2);

                var r1 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf1.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), b1.LocalCenter.$clone()));
                var r2 = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xf2.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), b2.LocalCenter.$clone()));

                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), r2.$clone()), b1.Sweep.C.$clone()), r1.$clone());

                var length = d.Length();

                if (length < this.MaxLength && length > this.MinLength) {
                    return true;
                }

                if (length === 0.0) {
                    return true;
                }

                d = Microsoft.Xna.Framework.Vector2.op_Division$1(d.$clone(), length);
                var C = length - this.MaxLength;
                C = FarseerPhysics.Common.MathUtils.Clamp$2(C, -0.2, FarseerPhysics.Settings.MaxLinearCorrection);

                var impulse = -this._mass * C;
                this._u = d.$clone();
                var P = Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, this._u.$clone());

                b1.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Subtraction(b1.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b1.InvMass, P.$clone()));
                b1.Sweep.A -= b1.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r1.$clone(), P.$clone());
                b2.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Addition(b2.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(b2.InvMass, P.$clone()));
                b2.Sweep.A += b2.InvI * FarseerPhysics.Common.MathUtils.Cross$2(r2.$clone(), P.$clone());

                b1.SynchronizeTransform();
                b2.SynchronizeTransform();

                return Math.abs(C) < FarseerPhysics.Settings.LinearSlop;
            }
        }
    });

    /**
     * A weld joint essentially glues two bodies together. A weld joint may
     distort somewhat because the island constraint solver is approximate.
     *
     * @public
     * @class FarseerPhysics.Dynamics.Joints.WeldJoint
     * @augments FarseerPhysics.Dynamics.Joints.Joint
     */
    Bridge.define("FarseerPhysics.Dynamics.Joints.WeldJoint", {
        inherits: [FarseerPhysics.Dynamics.Joints.Joint],
        fields: {
            LocalAnchorA: null,
            LocalAnchorB: null,
            _impulse: null,
            _mass: null,
            /**
             * The body2 angle minus body1 angle in the reference state (radians).
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Dynamics.Joints.WeldJoint
             * @function ReferenceAngle
             * @type number
             */
            ReferenceAngle: 0
        },
        props: {
            WorldAnchorA: {
                get: function () {
                    return this.BodyA.GetWorldPoint(this.LocalAnchorA.$clone());
                }
            },
            WorldAnchorB: {
                get: function () {
                    return this.BodyB.GetWorldPoint(this.LocalAnchorB.$clone());
                },
                set: function (value) {
                    System.Diagnostics.Debug.Assert$1(false, "You can't set the world anchor on this joint type.");
                }
            }
        },
        ctors: {
            init: function () {
                this.LocalAnchorA = new Microsoft.Xna.Framework.Vector2();
                this.LocalAnchorB = new Microsoft.Xna.Framework.Vector2();
                this._impulse = new Microsoft.Xna.Framework.Vector3();
                this._mass = new FarseerPhysics.Common.Mat33();
            },
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.ctor.call(this);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Weld;
            },
            /**
             * You need to specify a local anchor point
             where they are attached and the relative body angle. The position
             of the anchor point is important for computing the reaction torque.
             You can change the anchor points relative to bodyA or bodyB by changing LocalAnchorA
             and/or LocalAnchorB.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Dynamics.Joints.WeldJoint
             * @memberof FarseerPhysics.Dynamics.Joints.WeldJoint
             * @param   {FarseerPhysics.Dynamics.Body}       bodyA           The first body
             * @param   {FarseerPhysics.Dynamics.Body}       bodyB           The second body
             * @param   {Microsoft.Xna.Framework.Vector2}    localAnchorA    The first body anchor.
             * @param   {Microsoft.Xna.Framework.Vector2}    localAnchorB    The second body anchor.
             * @return  {void}
             */
            $ctor1: function (bodyA, bodyB, localAnchorA, localAnchorB) {
                this.$initialize();
                FarseerPhysics.Dynamics.Joints.Joint.$ctor2.call(this, bodyA, bodyB);
                this.JointType = FarseerPhysics.Dynamics.Joints.JointType.Weld;

                this.LocalAnchorA = localAnchorA.$clone();
                this.LocalAnchorB = localAnchorB.$clone();
                this.ReferenceAngle = this.BodyB.Rotation - this.BodyA.Rotation;
            }
        },
        methods: {
            GetReactionForce: function (inv_dt) {
                return Microsoft.Xna.Framework.Vector2.op_Multiply$2(inv_dt, new Microsoft.Xna.Framework.Vector2.$ctor2(this._impulse.X, this._impulse.Y));
            },
            GetReactionTorque: function (inv_dt) {
                return inv_dt * this._impulse.Z;
            },
            InitVelocityConstraints: function (step) {
                var bA = this.BodyA;
                var bB = this.BodyB;

                var xfA = { v : new FarseerPhysics.Common.Transform() }, xfB = { v : new FarseerPhysics.Common.Transform() };
                bA.GetTransform(xfA);
                bB.GetTransform(xfB);

                var rA = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfA.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), bA.LocalCenter.$clone()));
                var rB = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfB.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), bB.LocalCenter.$clone()));



                var mA = bA.InvMass, mB = bB.InvMass;
                var iA = bA.InvI, iB = bB.InvI;

                this._mass.Col1.X = mA + mB + rA.Y * rA.Y * iA + rB.Y * rB.Y * iB;
                this._mass.Col2.X = -rA.Y * rA.X * iA - rB.Y * rB.X * iB;
                this._mass.Col3.X = -rA.Y * iA - rB.Y * iB;
                this._mass.Col1.Y = this._mass.Col2.X;
                this._mass.Col2.Y = mA + mB + rA.X * rA.X * iA + rB.X * rB.X * iB;
                this._mass.Col3.Y = rA.X * iA + rB.X * iB;
                this._mass.Col1.Z = this._mass.Col3.X;
                this._mass.Col2.Z = this._mass.Col3.Y;
                this._mass.Col3.Z = iA + iB;

                if (FarseerPhysics.Settings.EnableWarmstarting) {
                    this._impulse = Microsoft.Xna.Framework.Vector3.op_Multiply$1(this._impulse.$clone(), step.v.dtRatio);

                    var P = new Microsoft.Xna.Framework.Vector2.$ctor2(this._impulse.X, this._impulse.Y);

                    bA.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Subtraction(bA.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(mA, P.$clone()));
                    bA.AngularVelocityInternal -= iA * (FarseerPhysics.Common.MathUtils.Cross$2(rA.$clone(), P.$clone()) + this._impulse.Z);

                    bB.LinearVelocityInternal = Microsoft.Xna.Framework.Vector2.op_Addition(bB.LinearVelocityInternal.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(mB, P.$clone()));
                    bB.AngularVelocityInternal += iB * (FarseerPhysics.Common.MathUtils.Cross$2(rB.$clone(), P.$clone()) + this._impulse.Z);
                } else {
                    this._impulse = Microsoft.Xna.Framework.Vector3.Zero.$clone();
                }
            },
            SolveVelocityConstraints: function (step) {
                var bA = this.BodyA;
                var bB = this.BodyB;

                var vA = bA.LinearVelocityInternal.$clone();
                var wA = bA.AngularVelocityInternal;
                var vB = bB.LinearVelocityInternal.$clone();
                var wB = bB.AngularVelocityInternal;

                var mA = bA.InvMass, mB = bB.InvMass;
                var iA = bA.InvI, iB = bB.InvI;

                var xfA = { v : new FarseerPhysics.Common.Transform() }, xfB = { v : new FarseerPhysics.Common.Transform() };
                bA.GetTransform(xfA);
                bB.GetTransform(xfB);

                var rA = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfA.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), bA.LocalCenter.$clone()));
                var rB = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfB.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), bB.LocalCenter.$clone()));

                var Cdot1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(vB.$clone(), FarseerPhysics.Common.MathUtils.Cross$1(wB, rB.$clone())), vA.$clone()), FarseerPhysics.Common.MathUtils.Cross$1(wA, rA.$clone()));
                var Cdot2 = wB - wA;
                var Cdot = new Microsoft.Xna.Framework.Vector3.$ctor3(Cdot1.X, Cdot1.Y, Cdot2);

                var impulse = this._mass.Solve33(Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Cdot.$clone()));
                this._impulse = Microsoft.Xna.Framework.Vector3.op_Addition(this._impulse.$clone(), impulse.$clone());

                var P = new Microsoft.Xna.Framework.Vector2.$ctor2(impulse.X, impulse.Y);

                vA = Microsoft.Xna.Framework.Vector2.op_Subtraction(vA.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(mA, P.$clone()));
                wA -= iA * (FarseerPhysics.Common.MathUtils.Cross$2(rA.$clone(), P.$clone()) + impulse.Z);

                vB = Microsoft.Xna.Framework.Vector2.op_Addition(vB.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(mB, P.$clone()));
                wB += iB * (FarseerPhysics.Common.MathUtils.Cross$2(rB.$clone(), P.$clone()) + impulse.Z);

                bA.LinearVelocityInternal = vA.$clone();
                bA.AngularVelocityInternal = wA;
                bB.LinearVelocityInternal = vB.$clone();
                bB.AngularVelocityInternal = wB;
            },
            SolvePositionConstraints: function () {
                var bA = this.BodyA;
                var bB = this.BodyB;

                var mA = bA.InvMass, mB = bB.InvMass;
                var iA = bA.InvI, iB = bB.InvI;

                var xfA = { v : new FarseerPhysics.Common.Transform() };
                var xfB = { v : new FarseerPhysics.Common.Transform() };
                bA.GetTransform(xfA);
                bB.GetTransform(xfB);

                var rA = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfA.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorA.$clone(), bA.LocalCenter.$clone()));
                var rB = FarseerPhysics.Common.MathUtils.Multiply(Bridge.ref(xfB.v, "R"), Microsoft.Xna.Framework.Vector2.op_Subtraction(this.LocalAnchorB.$clone(), bB.LocalCenter.$clone()));

                var C1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.op_Addition(bB.Sweep.C.$clone(), rB.$clone()), bA.Sweep.C.$clone()), rA.$clone());
                var C2 = bB.Sweep.A - bA.Sweep.A - this.ReferenceAngle;

                var k_allowedStretch = 0.049999997;
                var positionError = C1.Length();
                var angularError = Math.abs(C2);
                if (positionError > k_allowedStretch) {
                    iA *= 1.0;
                    iB *= 1.0;
                }

                this._mass.Col1.X = mA + mB + rA.Y * rA.Y * iA + rB.Y * rB.Y * iB;
                this._mass.Col2.X = -rA.Y * rA.X * iA - rB.Y * rB.X * iB;
                this._mass.Col3.X = -rA.Y * iA - rB.Y * iB;
                this._mass.Col1.Y = this._mass.Col2.X;
                this._mass.Col2.Y = mA + mB + rA.X * rA.X * iA + rB.X * rB.X * iB;
                this._mass.Col3.Y = rA.X * iA + rB.X * iB;
                this._mass.Col1.Z = this._mass.Col3.X;
                this._mass.Col2.Z = this._mass.Col3.Y;
                this._mass.Col3.Z = iA + iB;

                var C = new Microsoft.Xna.Framework.Vector3.$ctor3(C1.X, C1.Y, C2);

                var impulse = this._mass.Solve33(Microsoft.Xna.Framework.Vector3.op_UnaryNegation(C.$clone()));

                var P = new Microsoft.Xna.Framework.Vector2.$ctor2(impulse.X, impulse.Y);

                bA.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Subtraction(bA.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(mA, P.$clone()));
                bA.Sweep.A -= iA * (FarseerPhysics.Common.MathUtils.Cross$2(rA.$clone(), P.$clone()) + impulse.Z);

                bB.Sweep.C = Microsoft.Xna.Framework.Vector2.op_Addition(bB.Sweep.C.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(mB, P.$clone()));
                bB.Sweep.A += iB * (FarseerPhysics.Common.MathUtils.Cross$2(rB.$clone(), P.$clone()) + impulse.Z);

                bA.SynchronizeTransform();
                bB.SynchronizeTransform();

                return positionError <= FarseerPhysics.Settings.LinearSlop && angularError <= FarseerPhysics.Settings.AngularSlop;
            }
        }
    });

    Bridge.define("FarseerPhysics.Utility.PhysicsGameScreen", {
        inherits: [FarseerPhysics.Utility.GameScreen],
        fields: {
            Camera: null,
            World: null,
            _agentForce: 0,
            _agentTorque: 0,
            _fixedMouseJoint: null,
            _userAgent: null,
            EnableCameraControl: false
        },
        ctors: {
            ctor: function (screenManager) {
                this.$initialize();
                FarseerPhysics.Utility.GameScreen.ctor.call(this);
                this.HasCursor = true;
                this.EnableCameraControl = true;
                this._userAgent = null;
                this.World = null;
                this.Camera = null;

                this.ScreenManager = screenManager;
                FarseerPhysics.Settings.EnableDiagnostics = true;

                if (this.World == null) {
                    this.World = new FarseerPhysics.Dynamics.World.$ctor1(Microsoft.Xna.Framework.Vector2.Zero.$clone());
                } else {
                    this.World.Clear();
                }

                if (this.Camera == null) {
                    this.Camera = new FarseerPhysics.Utility.Camera2D(screenManager.GraphicsDevice);
                } else {
                    this.Camera.ResetCamera();
                }

            }
        },
        methods: {
            SetUserAgent: function (agent, force, torque) {
                this._userAgent = agent;
                this._agentForce = force;
                this._agentTorque = torque;
            },
            LoadContent: function () {
                FarseerPhysics.Utility.GameScreen.prototype.LoadContent.call(this);
            },
            Update: function (gameTime, otherScreenHasFocus, coveredByOtherScreen) {
                if (!coveredByOtherScreen && !otherScreenHasFocus) {
                    this.World.Step(Math.min(gameTime.ElapsedGameTime.getTotalSeconds(), (0.02)));
                } else {
                    this.World.Step(0.0);
                }
                this.Camera.Update(gameTime);
                FarseerPhysics.Utility.GameScreen.prototype.Update.call(this, gameTime, otherScreenHasFocus, coveredByOtherScreen);
            },
            Draw: function (gameTime) {
                var projection = this.Camera.SimProjection.$clone();
                var view = this.Camera.SimView.$clone();

                FarseerPhysics.Utility.GameScreen.prototype.Draw.call(this, gameTime);
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepConstraint", {
        inherits: [Poly2Tri.Triangulation.TriangulationConstraint],
        ctors: {
            /**
             * Give two points in any order. Will always be ordered so
             that q.y &gt; p.y and q.x &gt; p.x if same y value
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepConstraint
             * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepConstraint
             * @param   {Poly2Tri.Triangulation.TriangulationPoint}    p1    
             * @param   {Poly2Tri.Triangulation.TriangulationPoint}    p2
             * @return  {void}
             */
            ctor: function (p1, p2) {
                this.$initialize();
                Poly2Tri.Triangulation.TriangulationConstraint.ctor.call(this);
                this.P = p1;
                this.Q = p2;
                if (p1.Y > p2.Y) {
                    this.Q = p1;
                    this.P = p2;
                } else if (p1.Y === p2.Y) {
                    if (p1.X > p2.X) {
                        this.Q = p1;
                        this.P = p2;
                    } else if (p1.X === p2.X) {
                    }
                }
                this.Q.AddEdge(this);
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext", {
        inherits: [Poly2Tri.Triangulation.TriangulationContext],
        statics: {
            fields: {
                ALPHA: 0
            },
            ctors: {
                init: function () {
                    this.ALPHA = 0.3;
                }
            }
        },
        fields: {
            Basin: null,
            EdgeEvent: null,
            _comparator: null,
            aFront: null,
            Head: null,
            Tail: null
        },
        ctors: {
            init: function () {
                this.Basin = new Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext.DTSweepBasin();
                this.EdgeEvent = new Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext.DTSweepEdgeEvent();
                this._comparator = new Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepPointComparator();
            },
            ctor: function () {
                this.$initialize();
                Poly2Tri.Triangulation.TriangulationContext.ctor.call(this);
                this.Clear();
            }
        },
        methods: {
            RemoveFromList: function (triangle) {
                this.Triangles.remove(triangle);
            },
            MeshClean: function (triangle) {
                this.MeshCleanReq(triangle);
            },
            MeshCleanReq: function (triangle) {
                if (triangle != null && !triangle.IsInterior) {
                    triangle.IsInterior = true;
                    this.Triangulatable.Poly2Tri$Triangulation$Triangulatable$AddTriangle(triangle);
                    for (var i = 0; i < 3; i = (i + 1) | 0) {
                        if (!triangle.EdgeIsConstrained.getItem(i)) {
                            this.MeshCleanReq(triangle.Neighbors.getItem(i));
                        }
                    }
                }
            },
            Clear: function () {
                Poly2Tri.Triangulation.TriangulationContext.prototype.Clear.call(this);
                this.Triangles.clear();
            },
            AddNode: function (node) {
                this.aFront.AddNode(node);
            },
            RemoveNode: function (node) {
                this.aFront.RemoveNode(node);
            },
            LocateNode: function (point) {
                return this.aFront.LocateNode(point);
            },
            CreateAdvancingFront: function () {
                var head, tail, middle;
                var iTriangle = new Poly2Tri.Triangulation.Delaunay.DelaunayTriangle(this.Points.getItem(0), this.Tail, this.Head);
                this.Triangles.add(iTriangle);

                head = new Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode(iTriangle.Points.getItem(1));
                head.Triangle = iTriangle;
                middle = new Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode(iTriangle.Points.getItem(0));
                middle.Triangle = iTriangle;
                tail = new Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFrontNode(iTriangle.Points.getItem(2));

                this.aFront = new Poly2Tri.Triangulation.Delaunay.Sweep.AdvancingFront(head, tail);
                this.aFront.AddNode(middle);

                this.aFront.Head.Next = middle;
                middle.Next = this.aFront.Tail;
                middle.Prev = this.aFront.Head;
                this.aFront.Tail.Prev = middle;
            },
            /**
             * Try to map a node to all sides of this triangle that don't have 
             a neighbor.
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext
             * @memberof Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext
             * @param   {Poly2Tri.Triangulation.Delaunay.DelaunayTriangle}    t
             * @return  {void}
             */
            MapTriangleToNodes: function (t) {
                var n;
                for (var i = 0; i < 3; i = (i + 1) | 0) {
                    if (t.Neighbors.getItem(i) == null) {
                        n = this.aFront.LocatePoint(t.PointCW(t.Points.getItem(i)));
                        if (n != null) {
                            n.Triangle = t;
                        }
                    }
                }
            },
            PrepareTriangulation: function (t) {
                var $t;
                Poly2Tri.Triangulation.TriangulationContext.prototype.PrepareTriangulation.call(this, t);

                var xmax, xmin;
                var ymax, ymin;

                xmax = (xmin = this.Points.getItem(0).X);
                ymax = (ymin = this.Points.getItem(0).Y);

                $t = Bridge.getEnumerator(this.Points);
                try {
                    while ($t.moveNext()) {
                        var p = $t.Current;
                        if (p.X > xmax) {
                            xmax = p.X;
                        }
                        if (p.X < xmin) {
                            xmin = p.X;
                        }
                        if (p.Y > ymax) {
                            ymax = p.Y;
                        }
                        if (p.Y < ymin) {
                            ymin = p.Y;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                var deltaX = Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext.ALPHA * (xmax - xmin);
                var deltaY = Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepContext.ALPHA * (ymax - ymin);
                var p1 = new Poly2Tri.Triangulation.TriangulationPoint(xmax + deltaX, ymin - deltaY);
                var p2 = new Poly2Tri.Triangulation.TriangulationPoint(xmin - deltaX, ymin - deltaY);

                this.Head = p1;
                this.Tail = p2;

                this.Points.Sort$1(this._comparator);
            },
            FinalizeTriangulation: function () {
                this.Triangulatable.Poly2Tri$Triangulation$Triangulatable$AddTriangles(this.Triangles);
                this.Triangles.clear();
            },
            NewConstraint: function (a, b) {
                return new Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepConstraint(a, b);
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Delaunay.Sweep.DTSweepPointComparator", {
        inherits: [System.Collections.Generic.IComparer$1(Poly2Tri.Triangulation.TriangulationPoint)],
        alias: ["compare", ["System$Collections$Generic$IComparer$1$Poly2Tri$Triangulation$TriangulationPoint$compare", "System$Collections$Generic$IComparer$1$compare"]],
        methods: {
            compare: function (p1, p2) {
                if (p1.Y < p2.Y) {
                    return -1;
                } else if (p1.Y > p2.Y) {
                    return 1;
                } else {
                    if (p1.X < p2.X) {
                        return -1;
                    } else if (p1.X > p2.X) {
                        return 1;
                    } else {
                        return 0;
                    }
                }
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Polygon.Polygon", {
        inherits: [Poly2Tri.Triangulation.Triangulatable],
        fields: {
            _holes: null,
            _last: null,
            _points: null,
            _steinerPoints: null,
            _triangles: null
        },
        props: {
            Holes: {
                get: function () {
                    return this._holes;
                }
            },
            TriangulationMode: {
                get: function () {
                    return Poly2Tri.Triangulation.TriangulationMode.Polygon;
                }
            },
            Points: {
                get: function () {
                    return this._points;
                }
            },
            Triangles: {
                get: function () {
                    return this._triangles;
                }
            }
        },
        alias: [
            "TriangulationMode", "Poly2Tri$Triangulation$Triangulatable$TriangulationMode",
            "Points", "Poly2Tri$Triangulation$Triangulatable$Points",
            "Triangles", "Poly2Tri$Triangulation$Triangulatable$Triangles",
            "AddTriangle", "Poly2Tri$Triangulation$Triangulatable$AddTriangle",
            "AddTriangles", "Poly2Tri$Triangulation$Triangulatable$AddTriangles",
            "ClearTriangles", "Poly2Tri$Triangulation$Triangulatable$ClearTriangles",
            "PrepareTriangulation", "Poly2Tri$Triangulation$Triangulatable$PrepareTriangulation"
        ],
        ctors: {
            init: function () {
                this._points = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.TriangulationPoint)).ctor();
            },
            /**
             * Create a polygon from a list of at least 3 points with no duplicates.
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Polygon.Polygon
             * @memberof Poly2Tri.Triangulation.Polygon.Polygon
             * @param   {System.Collections.Generic.IList$1}    points    A list of unique points
             * @return  {void}
             */
            $ctor2: function (points) {
                this.$initialize();
                if (System.Array.getCount(points, Poly2Tri.Triangulation.Polygon.PolygonPoint) < 3) {
                    throw new System.ArgumentException.$ctor3("List has fewer than 3 points", "points");
                }

                if (Bridge.equals(System.Array.getItem(points, 0, Poly2Tri.Triangulation.Polygon.PolygonPoint), System.Array.getItem(points, ((System.Array.getCount(points, Poly2Tri.Triangulation.Polygon.PolygonPoint) - 1) | 0), Poly2Tri.Triangulation.Polygon.PolygonPoint))) {
                    System.Array.removeAt(points, ((System.Array.getCount(points, Poly2Tri.Triangulation.Polygon.PolygonPoint) - 1) | 0), Poly2Tri.Triangulation.Polygon.PolygonPoint);
                }

                this._points.AddRange(System.Linq.Enumerable.from(points).select(function (x) { return Bridge.cast(x, Poly2Tri.Triangulation.TriangulationPoint); }));
            },
            /**
             * Create a polygon from a list of at least 3 points with no duplicates.
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Polygon.Polygon
             * @memberof Poly2Tri.Triangulation.Polygon.Polygon
             * @param   {System.Collections.Generic.IEnumerable$1}    points    A list of unique points.
             * @return  {void}
             */
            $ctor1: function (points) {
                Poly2Tri.Triangulation.Polygon.Polygon.$ctor2.call(this, (Bridge.as(points, System.Collections.Generic.IList$1(Poly2Tri.Triangulation.Polygon.PolygonPoint))) || System.Linq.Enumerable.from(points).ToArray());
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            AddTriangle: function (t) {
                this._triangles.add(t);
            },
            AddTriangles: function (list) {
                this._triangles.AddRange(list);
            },
            ClearTriangles: function () {
                if (this._triangles != null) {
                    this._triangles.clear();
                }
            },
            /**
             * Creates constraints and populates the context with points
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Polygon.Polygon
             * @memberof Poly2Tri.Triangulation.Polygon.Polygon
             * @param   {Poly2Tri.Triangulation.TriangulationContext}    tcx    The context
             * @return  {void}
             */
            PrepareTriangulation: function (tcx) {
                var $t;
                if (this._triangles == null) {
                    this._triangles = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.Delaunay.DelaunayTriangle)).$ctor2(this._points.Count);
                } else {
                    this._triangles.clear();
                }

                for (var i = 0; i < ((this._points.Count - 1) | 0); i = (i + 1) | 0) {
                    tcx.NewConstraint(this._points.getItem(i), this._points.getItem(((i + 1) | 0)));
                }
                tcx.NewConstraint(this._points.getItem(0), this._points.getItem(((this._points.Count - 1) | 0)));
                tcx.Points.AddRange(this._points);

                if (this._holes != null) {
                    $t = Bridge.getEnumerator(this._holes);
                    try {
                        while ($t.moveNext()) {
                            var p = $t.Current;
                            for (var i1 = 0; i1 < ((p._points.Count - 1) | 0); i1 = (i1 + 1) | 0) {
                                tcx.NewConstraint(p._points.getItem(i1), p._points.getItem(((i1 + 1) | 0)));
                            }
                            tcx.NewConstraint(p._points.getItem(0), p._points.getItem(((p._points.Count - 1) | 0)));
                            tcx.Points.AddRange(p._points);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }}

                if (this._steinerPoints != null) {
                    tcx.Points.AddRange(this._steinerPoints);
                }
            },
            AddSteinerPoint: function (point) {
                if (this._steinerPoints == null) {
                    this._steinerPoints = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.TriangulationPoint)).ctor();
                }
                this._steinerPoints.add(point);
            },
            AddSteinerPoints: function (points) {
                if (this._steinerPoints == null) {
                    this._steinerPoints = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.TriangulationPoint)).ctor();
                }
                this._steinerPoints.AddRange(points);
            },
            ClearSteinerPoints: function () {
                if (this._steinerPoints != null) {
                    this._steinerPoints.clear();
                }
            },
            /**
             * Add a hole to the polygon.
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Polygon.Polygon
             * @memberof Poly2Tri.Triangulation.Polygon.Polygon
             * @param   {Poly2Tri.Triangulation.Polygon.Polygon}    poly    A subtraction polygon fully contained inside this polygon.
             * @return  {void}
             */
            AddHole: function (poly) {
                if (this._holes == null) {
                    this._holes = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.Polygon.Polygon)).ctor();
                }
                this._holes.add(poly);
            },
            /**
             * Inserts newPoint after point.
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Polygon.Polygon
             * @memberof Poly2Tri.Triangulation.Polygon.Polygon
             * @param   {Poly2Tri.Triangulation.Polygon.PolygonPoint}    point       The point to insert after in the polygon
             * @param   {Poly2Tri.Triangulation.Polygon.PolygonPoint}    newPoint    The point to insert into the polygon
             * @return  {void}
             */
            InsertPointAfter: function (point, newPoint) {
                var index = this._points.indexOf(point);
                if (index === -1) {
                    throw new System.ArgumentException.$ctor3("Tried to insert a point into a Polygon after a point not belonging to the Polygon", "point");
                }
                newPoint.Next = point.Next;
                newPoint.Previous = point;
                point.Next.Previous = newPoint;
                point.Next = newPoint;
                this._points.insert(((index + 1) | 0), newPoint);
            },
            /**
             * Inserts list (after last point in polygon?)
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Polygon.Polygon
             * @memberof Poly2Tri.Triangulation.Polygon.Polygon
             * @param   {System.Collections.Generic.IEnumerable$1}    list
             * @return  {void}
             */
            AddPoints: function (list) {
                var $t;
                var first;
                $t = Bridge.getEnumerator(list, Poly2Tri.Triangulation.Polygon.PolygonPoint);
                try {
                    while ($t.moveNext()) {
                        var p = $t.Current;
                        p.Previous = this._last;
                        if (this._last != null) {
                            p.Next = this._last.Next;
                            this._last.Next = p;
                        }
                        this._last = p;
                        this._points.add(p);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }first = Bridge.cast(this._points.getItem(0), Poly2Tri.Triangulation.Polygon.PolygonPoint);
                this._last.Next = first;
                first.Previous = this._last;
            },
            /**
             * Adds a point after the last in the polygon.
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Polygon.Polygon
             * @memberof Poly2Tri.Triangulation.Polygon.Polygon
             * @param   {Poly2Tri.Triangulation.Polygon.PolygonPoint}    p    The point to add
             * @return  {void}
             */
            AddPoint: function (p) {
                p.Previous = this._last;
                p.Next = this._last.Next;
                this._last.Next = p;
                this._points.add(p);
            },
            /**
             * Removes a point from the polygon.
             *
             * @instance
             * @public
             * @this Poly2Tri.Triangulation.Polygon.Polygon
             * @memberof Poly2Tri.Triangulation.Polygon.Polygon
             * @param   {Poly2Tri.Triangulation.Polygon.PolygonPoint}    p
             * @return  {void}
             */
            RemovePoint: function (p) {
                var next, prev;

                next = p.Next;
                prev = p.Previous;
                prev.Next = next;
                next.Previous = prev;
                this._points.remove(p);
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Polygon.PolygonPoint", {
        inherits: [Poly2Tri.Triangulation.TriangulationPoint],
        fields: {
            Next: null,
            Previous: null
        },
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                Poly2Tri.Triangulation.TriangulationPoint.ctor.call(this, x, y);
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Sets.PointSet", {
        inherits: [Poly2Tri.Triangulation.Triangulatable],
        fields: {
            Points: null,
            Triangles: null
        },
        props: {
            TriangulationMode: {
                get: function () {
                    return Poly2Tri.Triangulation.TriangulationMode.Unconstrained;
                }
            }
        },
        alias: [
            "Points", "Poly2Tri$Triangulation$Triangulatable$Points",
            "Triangles", "Poly2Tri$Triangulation$Triangulatable$Triangles",
            "TriangulationMode", "Poly2Tri$Triangulation$Triangulatable$TriangulationMode",
            "AddTriangle", "Poly2Tri$Triangulation$Triangulatable$AddTriangle",
            "AddTriangles", "Poly2Tri$Triangulation$Triangulatable$AddTriangles",
            "ClearTriangles", "Poly2Tri$Triangulation$Triangulatable$ClearTriangles",
            "PrepareTriangulation", "Poly2Tri$Triangulation$Triangulatable$PrepareTriangulation"
        ],
        ctors: {
            ctor: function (points) {
                this.$initialize();
                this.Points = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.TriangulationPoint)).$ctor1(points);
            }
        },
        methods: {
            AddTriangle: function (t) {
                System.Array.add(this.Triangles, t, Poly2Tri.Triangulation.Delaunay.DelaunayTriangle);
            },
            AddTriangles: function (list) {
                var $t;
                $t = Bridge.getEnumerator(list, Poly2Tri.Triangulation.Delaunay.DelaunayTriangle);
                try {
                    while ($t.moveNext()) {
                        var tri = $t.Current;
                        System.Array.add(this.Triangles, tri, Poly2Tri.Triangulation.Delaunay.DelaunayTriangle);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            ClearTriangles: function () {
                System.Array.clear(this.Triangles, Poly2Tri.Triangulation.Delaunay.DelaunayTriangle);
            },
            PrepareTriangulation: function (tcx) {
                if (this.Triangles == null) {
                    this.Triangles = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.Delaunay.DelaunayTriangle)).$ctor2(System.Array.getCount(this.Points, Poly2Tri.Triangulation.TriangulationPoint));
                } else {
                    System.Array.clear(this.Triangles, Poly2Tri.Triangulation.Delaunay.DelaunayTriangle);
                }
                tcx.Points.AddRange(this.Points);
            }
        }
    });

    Bridge.define("QuadTreeBroadPhase", {
        inherits: [FarseerPhysics.Collision.IBroadPhase],
        statics: {
            fields: {
                TreeUpdateThresh: 0
            },
            ctors: {
                init: function () {
                    this.TreeUpdateThresh = 10000;
                }
            }
        },
        fields: {
            _currID: 0,
            _idRegister: null,
            _moveBuffer: null,
            _pairBuffer: null,
            _quadTree: null,
            _treeMoveNum: 0
        },
        props: {
            /**
             * The number of proxies
             *
             * @instance
             * @public
             * @readonly
             * @memberof QuadTreeBroadPhase
             * @function ProxyCount
             * @type number
             */
            ProxyCount: {
                get: function () {
                    return this._idRegister.count;
                }
            }
        },
        alias: [
            "ProxyCount", "FarseerPhysics$Collision$IBroadPhase$ProxyCount",
            "GetFatAABB", "FarseerPhysics$Collision$IBroadPhase$GetFatAABB",
            "UpdatePairs", "FarseerPhysics$Collision$IBroadPhase$UpdatePairs",
            "TestOverlap", "FarseerPhysics$Collision$IBroadPhase$TestOverlap",
            "AddProxy", "FarseerPhysics$Collision$IBroadPhase$AddProxy",
            "RemoveProxy", "FarseerPhysics$Collision$IBroadPhase$RemoveProxy",
            "MoveProxy", "FarseerPhysics$Collision$IBroadPhase$MoveProxy",
            "GetProxy", "FarseerPhysics$Collision$IBroadPhase$GetProxy",
            "TouchProxy", "FarseerPhysics$Collision$IBroadPhase$TouchProxy",
            "Query", "FarseerPhysics$Collision$IBroadPhase$Query",
            "RayCast", "FarseerPhysics$Collision$IBroadPhase$RayCast"
        ],
        ctors: {
            /**
             * Creates a new quad tree broadphase with the specified span.
             *
             * @instance
             * @public
             * @this QuadTreeBroadPhase
             * @memberof QuadTreeBroadPhase
             * @param   {FarseerPhysics.Collision.AABB}    span    the maximum span of the tree (world size)
             * @return  {void}
             */
            ctor: function (span) {
                this.$initialize();
                this._quadTree = new (QuadTree$1(FarseerPhysics.Dynamics.FixtureProxy))(span.$clone(), 5, 10);
                this._idRegister = new (System.Collections.Generic.Dictionary$2(System.Int32,Element$1(FarseerPhysics.Dynamics.FixtureProxy)))();
                this._moveBuffer = new (System.Collections.Generic.List$1(Element$1(FarseerPhysics.Dynamics.FixtureProxy))).ctor();
                this._pairBuffer = new (System.Collections.Generic.List$1(FarseerPhysics.Collision.Pair)).ctor();
            }
        },
        methods: {
            GetFatAABB: function (proxyID, aabb) {
                if (this._idRegister.containsKey(proxyID)) {
                    aabb.v = this._idRegister.get(proxyID).Span.$clone();
                } else {
                    throw new System.Collections.Generic.KeyNotFoundException.$ctor1("proxyID not found in register");
                }
            },
            UpdatePairs: function (callback) {
                var $t;
                this._pairBuffer.clear();
                $t = Bridge.getEnumerator(this._moveBuffer);
                try {
                    while ($t.moveNext()) {
                        var qtnode = { v : $t.Current };
                        this.Query((function ($me, qtnode) {
                            return Bridge.fn.bind($me, function (proxyID) {
                                return this.PairBufferQueryCallback(proxyID, qtnode.v.Value.ProxyId);
                            });
                        })(this, qtnode), Bridge.ref(qtnode.v, "Span"));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }this._moveBuffer.clear();

                this._pairBuffer.Sort();

                var i = 0;
                while (i < this._pairBuffer.Count) {
                    var primaryPair = this._pairBuffer.getItem(i).$clone();
                    var userDataA = { v : this.GetProxy(primaryPair.ProxyIdA) };
                    var userDataB = { v : this.GetProxy(primaryPair.ProxyIdB) };

                    callback(userDataA, userDataB);
                    i = (i + 1) | 0;

                    while (i < this._pairBuffer.Count && this._pairBuffer.getItem(i).$clone().ProxyIdA === primaryPair.ProxyIdA && this._pairBuffer.getItem(i).$clone().ProxyIdB === primaryPair.ProxyIdB) {
                        i = (i + 1) | 0;
                    }
                }
            },
            /**
             * Test overlap of fat AABBs.
             *
             * @instance
             * @public
             * @this QuadTreeBroadPhase
             * @memberof QuadTreeBroadPhase
             * @param   {number}     proxyIdA    The proxy id A.
             * @param   {number}     proxyIdB    The proxy id B.
             * @return  {boolean}
             */
            TestOverlap: function (proxyIdA, proxyIdB) {
                var aabb1 = { v : new FarseerPhysics.Collision.AABB() };
                var aabb2 = { v : new FarseerPhysics.Collision.AABB() };
                this.GetFatAABB(proxyIdA, aabb1);
                this.GetFatAABB(proxyIdB, aabb2);
                return FarseerPhysics.Collision.AABB.TestOverlap$1(aabb1, aabb2);
            },
            AddProxy: function (proxy) {
                var proxyID = Bridge.identity(this._currID, (this._currID = (this._currID + 1) | 0));
                proxy.v.ProxyId = proxyID;
                var aabb = this.Fatten(Bridge.ref(proxy.v, "AABB"));
                var qtnode = new (Element$1(FarseerPhysics.Dynamics.FixtureProxy))(proxy.v.$clone(), aabb.$clone());

                this._idRegister.add(proxyID, qtnode);
                this._quadTree.AddNode(qtnode);

                return proxyID;
            },
            RemoveProxy: function (proxyId) {
                if (this._idRegister.containsKey(proxyId)) {
                    var qtnode = this._idRegister.get(proxyId);
                    this.UnbufferMove(qtnode);
                    this._idRegister.remove(proxyId);
                    this._quadTree.RemoveNode(qtnode);
                } else {
                    throw new System.Collections.Generic.KeyNotFoundException.$ctor1("proxyID not found in register");
                }
            },
            MoveProxy: function (proxyId, aabb, displacement) {
                var fatAABB = { v : new FarseerPhysics.Collision.AABB() };
                this.GetFatAABB(proxyId, fatAABB);

                if (fatAABB.v.Contains(aabb)) {
                    return;
                }

                var b = aabb.v.$clone();
                var r = new Microsoft.Xna.Framework.Vector2.$ctor2(FarseerPhysics.Settings.AABBExtension, FarseerPhysics.Settings.AABBExtension);
                b.LowerBound = Microsoft.Xna.Framework.Vector2.op_Subtraction(b.LowerBound.$clone(), r.$clone());
                b.UpperBound = Microsoft.Xna.Framework.Vector2.op_Addition(b.UpperBound.$clone(), r.$clone());

                var d = Microsoft.Xna.Framework.Vector2.op_Multiply$2(FarseerPhysics.Settings.AABBMultiplier, displacement.$clone());

                if (d.X < 0.0) {
                    b.LowerBound.X += d.X;
                } else {
                    b.UpperBound.X += d.X;
                }

                if (d.Y < 0.0) {
                    b.LowerBound.Y += d.Y;
                } else {
                    b.UpperBound.Y += d.Y;
                }


                var qtnode = this._idRegister.get(proxyId);
                qtnode.Value.AABB = b.$clone();
                qtnode.Span = b.$clone();

                this.ReinsertNode(qtnode);

                this.BufferMove(qtnode);
            },
            GetProxy: function (proxyId) {
                if (this._idRegister.containsKey(proxyId)) {
                    return this._idRegister.get(proxyId).Value.$clone();
                } else {
                    throw new System.Collections.Generic.KeyNotFoundException.$ctor1("proxyID not found in register");
                }
            },
            TouchProxy: function (proxyId) {
                if (this._idRegister.containsKey(proxyId)) {
                    this.BufferMove(this._idRegister.get(proxyId));
                } else {
                    throw new System.Collections.Generic.KeyNotFoundException.$ctor1("proxyID not found in register");
                }
            },
            Query: function (callback, query) {
                this._quadTree.QueryAABB(this.TransformPredicate(callback), query);
            },
            RayCast: function (callback, input) {
                this._quadTree.RayCast(this.TransformRayCallback(callback), input);
            },
            Fatten: function (aabb) {
                var r = new Microsoft.Xna.Framework.Vector2.$ctor2(FarseerPhysics.Settings.AABBExtension, FarseerPhysics.Settings.AABBExtension);
                return new FarseerPhysics.Collision.AABB.$ctor1(Microsoft.Xna.Framework.Vector2.op_Subtraction(aabb.v.LowerBound.$clone(), r.$clone()), Microsoft.Xna.Framework.Vector2.op_Addition(aabb.v.UpperBound.$clone(), r.$clone()));
            },
            TransformPredicate: function (idPredicate) {
                var qtPred = function (qtnode) {
                    return idPredicate(qtnode.Value.ProxyId);
                };
                return qtPred;
            },
            TransformRayCallback: function (callback) {
                var newCallback = function (input, qtnode) {
                    return callback(input.$clone(), qtnode.Value.ProxyId);
                };
                return newCallback;
            },
            PairBufferQueryCallback: function (proxyID, baseID) {
                if (proxyID === baseID) {
                    return true;
                }

                var p = new FarseerPhysics.Collision.Pair();
                p.ProxyIdA = Math.min(proxyID, baseID);
                p.ProxyIdB = Math.max(proxyID, baseID);
                this._pairBuffer.add(p.$clone());

                return true;
            },
            ReconstructTree: function () {
                var $t;
                this._quadTree.Clear();
                $t = Bridge.getEnumerator(this._idRegister.getValues(), Element$1(FarseerPhysics.Dynamics.FixtureProxy));
                try {
                    while ($t.moveNext()) {
                        var elem = $t.Current;
                        this._quadTree.AddNode(elem);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            ReinsertNode: function (qtnode) {
                this._quadTree.RemoveNode(qtnode);
                this._quadTree.AddNode(qtnode);

                if (((this._treeMoveNum = (this._treeMoveNum + 1) | 0)) > QuadTreeBroadPhase.TreeUpdateThresh) {
                    this.ReconstructTree();
                    this._treeMoveNum = 0;
                }
            },
            BufferMove: function (proxy) {
                this._moveBuffer.add(proxy);
            },
            UnbufferMove: function (proxy) {
                this._moveBuffer.remove(proxy);
            }
        }
    });

    
    Bridge.define("FarseerPhysics.Common.PhysicsLogic.Explosion", {
        inherits: [FarseerPhysics.Common.PhysicsLogic.PhysicsLogic],
        statics: {
            fields: {
                /**
                 * Two degrees: maximum angle from edges to first ray tested
                 *
                 * @static
                 * @private
                 * @memberof FarseerPhysics.Common.PhysicsLogic.Explosion
                 * @constant
                 * @default 0.0349065848
                 * @type number
                 */
                MaxEdgeOffset: 0
            },
            ctors: {
                init: function () {
                    this.MaxEdgeOffset = 0.0349065848;
                }
            }
        },
        fields: {
            /**
             * Ratio of arc length to angle from edges to first ray tested.
             Defaults to 1/40.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.PhysicsLogic.Explosion
             * @type number
             */
            EdgeRatio: 0,
            /**
             * Ignore Explosion if it happens inside a shape.
             Default value is false.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.PhysicsLogic.Explosion
             * @default false
             * @type boolean
             */
            IgnoreWhenInsideShape: false,
            /**
             * Max angle between rays (used when segment is large).
             Defaults to 15 degrees
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.PhysicsLogic.Explosion
             * @type number
             */
            MaxAngle: 0,
            /**
             * Maximum number of shapes involved in the explosion.
             Defaults to 100
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.PhysicsLogic.Explosion
             * @default 100
             * @type number
             */
            MaxShapes: 0,
            /**
             * How many rays per shape/body/segment.
             Defaults to 5
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Common.PhysicsLogic.Explosion
             * @default 5
             * @type number
             */
            MinRays: 0,
            _data: null,
            _exploded: null,
            _rdc: null
        },
        ctors: {
            init: function () {
                this.EdgeRatio = 0.025;
                this.IgnoreWhenInsideShape = false;
                this.MaxAngle = 0.209439516;
                this.MaxShapes = 100;
                this.MinRays = 5;
                this._data = new (System.Collections.Generic.List$1(FarseerPhysics.Common.PhysicsLogic.ShapeData)).ctor();
            },
            ctor: function (world) {
                this.$initialize();
                FarseerPhysics.Common.PhysicsLogic.PhysicsLogic.ctor.call(this, world, FarseerPhysics.Common.PhysicsLogic.PhysicsLogicType.Explosion);
                this._exploded = new (System.Collections.Generic.Dictionary$2(FarseerPhysics.Dynamics.Fixture,System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector2)))();
                this._rdc = new FarseerPhysics.Common.PhysicsLogic.RayDataComparer();
                this._data = new (System.Collections.Generic.List$1(FarseerPhysics.Common.PhysicsLogic.ShapeData)).ctor();
            }
        },
        methods: {
            /**
             * This makes the explosive explode
             *
             * @instance
             * @public
             * @this FarseerPhysics.Common.PhysicsLogic.Explosion
             * @memberof FarseerPhysics.Common.PhysicsLogic.Explosion
             * @param   {Microsoft.Xna.Framework.Vector2}            pos         The position where the explosion happens
             * @param   {number}                                     radius      The explosion radius
             * @param   {number}                                     maxForce    The explosion force at the explosion point
             (then is inversely proportional to the square of the distance)
             * @return  {System.Collections.Generic.Dictionary$2}                A dictionnary containing all the "exploded" fixtures
             with a list of the applied impulses
             */
            Activate: function (pos, radius, maxForce) {
                pos = {v:pos};
                this._exploded.clear();

                var aabb = { v : new FarseerPhysics.Collision.AABB() };
                aabb.v.LowerBound = Microsoft.Xna.Framework.Vector2.op_Addition(pos.v.$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(-radius, -radius));
                aabb.v.UpperBound = Microsoft.Xna.Framework.Vector2.op_Addition(pos.v.$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(radius, radius));
                var shapes = System.Array.init(this.MaxShapes, null, FarseerPhysics.Dynamics.Fixture);

                var containedShapes = System.Array.init(5, null, FarseerPhysics.Dynamics.Fixture);
                var exit = false;

                var shapeCount = 0;
                var containedShapeCount = 0;

                this.World.QueryAABB(Bridge.fn.bind(this, function (fixture) {
                    if (fixture.TestPoint(pos)) {
                        if (this.IgnoreWhenInsideShape) {
                            exit = true;
                        } else {
                            containedShapes[System.Array.index(Bridge.identity(containedShapeCount, (containedShapeCount = (containedShapeCount + 1) | 0)), containedShapes)] = fixture;
                        }
                    } else {
                        shapes[System.Array.index(Bridge.identity(shapeCount, (shapeCount = (shapeCount + 1) | 0)), shapes)] = fixture;
                    }

                    return true;
                }), aabb);

                if (exit) {
                    return this._exploded;
                }

                var vals = System.Array.init(Bridge.Int.mul(shapeCount, 2), 0, System.Single);
                var valIndex = 0;
                for (var i = 0; i < shapeCount; i = (i + 1) | 0) {
                    var ps;
                    var cs = Bridge.as(shapes[System.Array.index(i, shapes)].Shape, FarseerPhysics.Collision.Shapes.CircleShape);
                    if (cs != null) {
                        var v = new FarseerPhysics.Common.Vertices.ctor();
                        var vec = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.Zero.$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(cs.Radius, 0));
                        v.add(vec.$clone());
                        vec = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.Zero.$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(0, cs.Radius));
                        v.add(vec.$clone());
                        vec = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.Zero.$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(-cs.Radius, cs.Radius));
                        v.add(vec.$clone());
                        vec = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.Zero.$clone(), new Microsoft.Xna.Framework.Vector2.$ctor2(0, -cs.Radius));
                        v.add(vec.$clone());
                        ps = new FarseerPhysics.Collision.Shapes.PolygonShape.$ctor1(v, 0);
                    } else {
                        ps = Bridge.as(shapes[System.Array.index(i, shapes)].Shape, FarseerPhysics.Collision.Shapes.PolygonShape);
                    }

                    if ((shapes[System.Array.index(i, shapes)].Body.BodyType === FarseerPhysics.Dynamics.BodyType.Dynamic) && ps != null) {
                        var toCentroid = Microsoft.Xna.Framework.Vector2.op_Subtraction(shapes[System.Array.index(i, shapes)].Body.GetWorldPoint(ps.MassData.Centroid.$clone()), pos.v.$clone());
                        var angleToCentroid = Math.atan2(toCentroid.Y, toCentroid.X);
                        var min = 3.40282347E+38;
                        var max = -3.40282347E+38;
                        var minAbsolute = 0.0;
                        var maxAbsolute = 0.0;

                        for (var j = 0; j < (System.Linq.Enumerable.from(ps.Vertices).count()); j = (j + 1) | 0) {
                            var toVertex = (Microsoft.Xna.Framework.Vector2.op_Subtraction(shapes[System.Array.index(i, shapes)].Body.GetWorldPoint(ps.Vertices.getItem(j).$clone()), pos.v.$clone()));
                            var newAngle = Math.atan2(toVertex.Y, toVertex.X);
                            var diff = (newAngle - angleToCentroid);

                            diff = (diff - Microsoft.Xna.Framework.MathHelper.Pi) % (6.28318548);

                            if (diff < 0.0) {
                                diff += 6.28318548;
                            }

                            diff -= Microsoft.Xna.Framework.MathHelper.Pi;

                            if (Math.abs(diff) > Microsoft.Xna.Framework.MathHelper.Pi) {
                                throw new System.ArgumentException.$ctor1("OMG!");
                            }

                            if (diff > max) {
                                max = diff;
                                maxAbsolute = newAngle;
                            }
                            if (diff < min) {
                                min = diff;
                                minAbsolute = newAngle;
                            }
                        }

                        vals[System.Array.index(valIndex, vals)] = minAbsolute;
                        valIndex = (valIndex + 1) | 0;
                        vals[System.Array.index(valIndex, vals)] = maxAbsolute;
                        valIndex = (valIndex + 1) | 0;
                    }
                }

                System.Array.sort(vals, 0, valIndex, this._rdc);
                this._data.clear();
                var rayMissed = true;

                for (var i1 = 0; i1 < valIndex; i1 = (i1 + 1) | 0) {
                    var shape = { v : null };
                    var midpt;

                    var iplus = (i1 === ((valIndex - 1) | 0) ? 0 : ((i1 + 1) | 0));
                    if (vals[System.Array.index(i1, vals)] === vals[System.Array.index(iplus, vals)]) {
                        continue;
                    }

                    if (i1 === ((valIndex - 1) | 0)) {
                        midpt = (vals[System.Array.index(0, vals)] + 6.28318548 + vals[System.Array.index(i1, vals)]);
                    } else {
                        midpt = (vals[System.Array.index(((i1 + 1) | 0), vals)] + vals[System.Array.index(i1, vals)]);
                    }

                    midpt = midpt / 2;

                    var p1 = pos.v.$clone();
                    var p2 = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(radius, new Microsoft.Xna.Framework.Vector2.$ctor2(Math.cos(midpt), Math.sin(midpt))), pos.v.$clone());

                    var hitClosest = { v : false };
                    this.World.RayCast((function ($me, hitClosest, shape) {
                        return Bridge.fn.bind($me, function (f, p, n, fr) {
                            var body = f.Body;

                            if (!this.IsActiveOn(body)) {
                                return 0;
                            }

                            if (body.UserData != null) {
                                var index = System.Nullable.getValue(Bridge.cast(Bridge.unbox(body.UserData, System.Int32), System.Int32));
                                if (index === 0) {
                                    return -1.0;
                                }
                            }

                            hitClosest.v = true;
                            shape.v = f;
                            return fr;
                        });
                    })(this, hitClosest, shape), p1.$clone(), p2.$clone());

                    if ((hitClosest.v) && (shape.v.Body.BodyType === FarseerPhysics.Dynamics.BodyType.Dynamic)) {
                        if ((System.Linq.Enumerable.from(this._data).count() > 0) && (Bridge.referenceEquals(System.Linq.Enumerable.from(this._data).last().Body, shape.v.Body)) && (!rayMissed)) {
                            var laPos = (this._data.Count - 1) | 0;
                            var la = this._data.getItem(laPos).$clone();
                            la.Max = vals[System.Array.index(iplus, vals)];
                            this._data.setItem(laPos, la.$clone());
                        } else {
                            var d = new FarseerPhysics.Common.PhysicsLogic.ShapeData();
                            d.Body = shape.v.Body;
                            d.Min = vals[System.Array.index(i1, vals)];
                            d.Max = vals[System.Array.index(iplus, vals)];
                            this._data.add(d.$clone());
                        }

                        if ((System.Linq.Enumerable.from(this._data).count() > 1) && (i1 === ((valIndex - 1) | 0)) && (Bridge.referenceEquals(System.Linq.Enumerable.from(this._data).last().Body, System.Linq.Enumerable.from(this._data).first().Body)) && (System.Linq.Enumerable.from(this._data).last().Max === System.Linq.Enumerable.from(this._data).first().Min)) {
                            var fi = this._data.getItem(0).$clone();
                            fi.Min = System.Linq.Enumerable.from(this._data).last().Min;
                            this._data.removeAt(((System.Linq.Enumerable.from(this._data).count() - 1) | 0));
                            this._data.setItem(0, fi.$clone());
                            while (System.Linq.Enumerable.from(this._data).first().Min >= System.Linq.Enumerable.from(this._data).first().Max) {
                                fi.Min -= 6.28318548;
                                this._data.setItem(0, fi.$clone());
                            }
                        }

                        var lastPos = (this._data.Count - 1) | 0;
                        var last = this._data.getItem(lastPos).$clone();
                        while ((System.Linq.Enumerable.from(this._data).count() > 0) && (System.Linq.Enumerable.from(this._data).last().Min >= System.Linq.Enumerable.from(this._data).last().Max)) {
                            last.Min = System.Linq.Enumerable.from(this._data).last().Min - 6.28318548;
                            this._data.setItem(lastPos, last.$clone());
                        }
                        rayMissed = false;
                    } else {
                        rayMissed = true;
                    }
                }

                for (var i2 = 0; i2 < System.Linq.Enumerable.from(this._data).count(); i2 = (i2 + 1) | 0) {
                    if (!this.IsActiveOn(this._data.getItem(i2).$clone().Body)) {
                        continue;
                    }

                    var arclen = this._data.getItem(i2).$clone().Max - this._data.getItem(i2).$clone().Min;

                    var first = Microsoft.Xna.Framework.MathHelper.Min$1(FarseerPhysics.Common.PhysicsLogic.Explosion.MaxEdgeOffset, this.EdgeRatio * arclen);
                    var insertedRays = Bridge.Int.clip32(Math.ceil(((arclen - 2.0 * first) - (((this.MinRays - 1) | 0)) * this.MaxAngle) / this.MaxAngle));

                    if (insertedRays < 0) {
                        insertedRays = 0;
                    }

                    var offset = (arclen - first * 2.0) / (this.MinRays + insertedRays - 1);

                    for (var j1 = this._data.getItem(i2).$clone().Min + first; j1 < this._data.getItem(i2).$clone().Max || FarseerPhysics.Common.MathUtils.FloatEquals$1(j1, this._data.getItem(i2).$clone().Max, 0.0001); j1 += offset) {
                        var p11 = pos.v.$clone();
                        var p21 = Microsoft.Xna.Framework.Vector2.op_Addition(pos.v.$clone(), Microsoft.Xna.Framework.Vector2.op_Multiply$2(radius, new Microsoft.Xna.Framework.Vector2.$ctor2(Math.cos(j1), Math.sin(j1))));
                        var hitpoint = { v : Microsoft.Xna.Framework.Vector2.Zero.$clone() };
                        var minlambda = 3.40282347E+38;

                        var fl = this._data.getItem(i2).$clone().Body.FixtureList;
                        for (var x = 0; x < fl.Count; x = (x + 1) | 0) {
                            var f = fl.getItem(x);
                            var ri = { v : new FarseerPhysics.Collision.RayCastInput() };
                            ri.v.Point1 = p11.$clone();
                            ri.v.Point2 = p21.$clone();
                            ri.v.MaxFraction = 50.0;

                            var ro = { v : new FarseerPhysics.Collision.RayCastOutput() };
                            if (f.RayCast(ro, ri, 0)) {
                                if (minlambda > ro.v.Fraction) {
                                    minlambda = ro.v.Fraction;
                                    hitpoint.v = Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2.op_Multiply$2(ro.v.Fraction, p21.$clone()), Microsoft.Xna.Framework.Vector2.op_Multiply$2((1 - ro.v.Fraction), p11.$clone()));
                                }
                            }

                            var impulse = (arclen / (((this.MinRays + insertedRays) | 0))) * maxForce * 180.0 / Microsoft.Xna.Framework.MathHelper.Pi * (1.0 - Math.min(1.0, minlambda));

                            var vectImp = { v : Microsoft.Xna.Framework.Vector2.op_Multiply$2(Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse, new Microsoft.Xna.Framework.Vector2.$ctor2(Math.cos(j1), Math.sin(j1))), Microsoft.Xna.Framework.Vector2.op_UnaryNegation(ro.v.Normal.$clone())), new Microsoft.Xna.Framework.Vector2.$ctor2(Math.cos(j1), Math.sin(j1))) };

                            this._data.getItem(i2).$clone().Body.ApplyLinearImpulse$3(vectImp, hitpoint);

                            var val = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                            var vectorList = { };
                            if (this._exploded.tryGetValue(f, vectorList)) {
                                val.X += Math.abs(vectImp.v.X);
                                val.Y += Math.abs(vectImp.v.Y);

                                vectorList.v.add(val.$clone());
                            } else {
                                vectorList.v = new (System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector2)).ctor();
                                val.X = Math.abs(vectImp.v.X);
                                val.Y = Math.abs(vectImp.v.Y);

                                vectorList.v.add(val.$clone());
                                this._exploded.add(f, vectorList.v);
                            }

                            if (minlambda > 1.0) {
                                hitpoint.v = p21.$clone();
                            }
                        }
                    }
                }

                for (var i3 = 0; i3 < containedShapeCount; i3 = (i3 + 1) | 0) {
                    var fix = containedShapes[System.Array.index(i3, containedShapes)];

                    if (!this.IsActiveOn(fix.Body)) {
                        continue;
                    }

                    var impulse1 = this.MinRays * maxForce * 180.0 / Microsoft.Xna.Framework.MathHelper.Pi;
                    var hitPoint = { v : new Microsoft.Xna.Framework.Vector2() };

                    var circShape = Bridge.as(fix.Shape, FarseerPhysics.Collision.Shapes.CircleShape);
                    if (circShape != null) {
                        hitPoint.v = fix.Body.GetWorldPoint(circShape.Position.$clone());
                    } else {
                        var shape1 = Bridge.as(fix.Shape, FarseerPhysics.Collision.Shapes.PolygonShape);
                        hitPoint.v = fix.Body.GetWorldPoint(shape1.MassData.Centroid.$clone());
                    }

                    var vectImp1 = { v : Microsoft.Xna.Framework.Vector2.op_Multiply$2(impulse1, (Microsoft.Xna.Framework.Vector2.op_Subtraction(hitPoint.v.$clone(), pos.v.$clone()))) };

                    var vectorList1 = new (System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector2)).ctor();
                    vectorList1.add(vectImp1.v.$clone());

                    fix.Body.ApplyLinearImpulse$3(vectImp1, hitPoint);

                    if (!this._exploded.containsKey(fix)) {
                        this._exploded.add(fix, vectorList1);
                    }
                }

                return this._exploded;
            }
        }
    });

    Bridge.define("FarseerPhysics.Controllers.AbstractForceController", {
        inherits: [FarseerPhysics.Controllers.Controller],
        fields: {
            /**
             * Curve to be used for Decay in Curve mode
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @type Microsoft.Xna.Framework.Curve
             */
            DecayCurve: null,
            /**
             * The Forcetype of the instance
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @type number
             */
            ForceType: 0,
            /**
             * Provided for reuse to provide Variation functionality in 
             inheriting classes
             *
             * @instance
             * @protected
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @type System.Random
             */
            Randomize: null,
            /**
             * Curve used by Curve Mode as an animated multiplier for the force 
             strength.
             Only positions between 0 and 1 are considered as that range is 
             stretched to have ImpulseLength.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @type Microsoft.Xna.Framework.Curve
             */
            StrengthCurve: null,
            /**
             * Global Strength of the force to be applied
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @function Strength
             * @type number
             */
            Strength: 0,
            /**
             * Position of the Force. Can be ignored (left at (0,0) for forces
             that are not position-dependent
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @function Position
             * @type Microsoft.Xna.Framework.Vector2
             */
            Position: null,
            /**
             * Maximum speed of the bodies. Bodies that are travelling faster are
             supposed to be ignored
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @function MaximumSpeed
             * @type number
             */
            MaximumSpeed: 0,
            /**
             * Maximum Force to be applied. As opposed to Maximum Speed this is 
             independent of the velocity of
             the affected body
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @function MaximumForce
             * @type number
             */
            MaximumForce: 0,
            /**
             * Timing Mode of the force instance
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @function TimingMode
             * @type number
             */
            TimingMode: 0,
            /**
             * Time of the current impulse. Incremented in update till 
             ImpulseLength is reached
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @function ImpulseTime
             * @type number
             */
            ImpulseTime: 0,
            /**
             * Length of a triggered impulse. Used in both Triggered and Curve Mode
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @function ImpulseLength
             * @type number
             */
            ImpulseLength: 0,
            /**
             * Indicating if we are currently during an Impulse 
             (Triggered and Curve Mode)
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @function Triggered
             * @type boolean
             */
            Triggered: false,
            /**
             * Variation of the force applied to each body affected
             !! Must be used in inheriting classes properly !!
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @function Variation
             * @type number
             */
            Variation: 0,
            /**
             * See DecayModes
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @function DecayMode
             * @type number
             */
            DecayMode: 0,
            /**
             * Start of the distance based Decay. To set a non decaying area
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @function DecayStart
             * @type number
             */
            DecayStart: 0,
            /**
             * Maximum distance a force should be applied
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @function DecayEnd
             * @type number
             */
            DecayEnd: 0
        },
        ctors: {
            init: function () {
                this.Position = new Microsoft.Xna.Framework.Vector2();
            },
            /**
             * Constructor
             *
             * @instance
             * @public
             * @this FarseerPhysics.Controllers.AbstractForceController
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @return  {void}
             */
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Controllers.Controller.ctor.call(this, FarseerPhysics.Controllers.ControllerType.AbstractForceController);
                this.Enabled = true;

                this.Strength = 1.0;
                this.Position = new Microsoft.Xna.Framework.Vector2.$ctor2(0, 0);
                this.MaximumSpeed = 100.0;
                this.TimingMode = FarseerPhysics.Controllers.AbstractForceController.TimingModes.Switched;
                this.ImpulseTime = 0.0;
                this.ImpulseLength = 1.0;
                this.Triggered = false;
                this.StrengthCurve = new Microsoft.Xna.Framework.Curve();
                this.Variation = 0.0;
                this.Randomize = new System.Random.$ctor1(1234);
                this.DecayMode = FarseerPhysics.Controllers.AbstractForceController.DecayModes.None;
                this.DecayCurve = new Microsoft.Xna.Framework.Curve();
                this.DecayStart = 0.0;
                this.DecayEnd = 0.0;

                this.StrengthCurve.Keys.add(new Microsoft.Xna.Framework.CurveKey.$ctor1(0, 5));
                this.StrengthCurve.Keys.add(new Microsoft.Xna.Framework.CurveKey.$ctor1(0.1, 5));
                this.StrengthCurve.Keys.add(new Microsoft.Xna.Framework.CurveKey.$ctor1(0.2, -4));
                this.StrengthCurve.Keys.add(new Microsoft.Xna.Framework.CurveKey.$ctor1(1.0, 0));
            },
            /**
             * Overloaded Contstructor with supplying Timing Mode
             *
             * @instance
             * @public
             * @this FarseerPhysics.Controllers.AbstractForceController
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @param   {number}    mode
             * @return  {void}
             */
            $ctor1: function (mode) {
                this.$initialize();
                FarseerPhysics.Controllers.Controller.ctor.call(this, FarseerPhysics.Controllers.ControllerType.AbstractForceController);
                this.TimingMode = mode;
                switch (mode) {
                    case FarseerPhysics.Controllers.AbstractForceController.TimingModes.Switched: 
                        this.Enabled = true;
                        break;
                    case FarseerPhysics.Controllers.AbstractForceController.TimingModes.Triggered: 
                        this.Enabled = false;
                        break;
                    case FarseerPhysics.Controllers.AbstractForceController.TimingModes.Curve: 
                        this.Enabled = false;
                        break;
                }
            }
        },
        methods: {
            /**
             * Calculate the Decay for a given body. Meant to ease force 
             development and stick to the DRY principle and provide unified and 
             predictable decay math.
             *
             * @instance
             * @protected
             * @this FarseerPhysics.Controllers.AbstractForceController
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @param   {FarseerPhysics.Dynamics.Body}    body    The body to calculate decay for
             * @return  {number}                                  A multiplier to multiply the force with to add decay 
             support in inheriting classes
             */
            GetDecayMultiplier: function (body) {
                var distance = (Microsoft.Xna.Framework.Vector2.op_Subtraction(body.Position.$clone(), this.Position.$clone())).Length();
                switch (this.DecayMode) {
                    case FarseerPhysics.Controllers.AbstractForceController.DecayModes.None: 
                        {
                            return 1.0;
                        }
                    case FarseerPhysics.Controllers.AbstractForceController.DecayModes.Step: 
                        {
                            if (distance < this.DecayEnd) {
                                return 1.0;
                            } else {
                                return 0.0;
                            }
                        }
                    case FarseerPhysics.Controllers.AbstractForceController.DecayModes.Linear: 
                        {
                            if (distance < this.DecayStart) {
                                return 1.0;
                            }
                            if (distance > this.DecayEnd) {
                                return 0.0;
                            }
                            return (this.DecayEnd - this.DecayStart / distance - this.DecayStart);
                        }
                    case FarseerPhysics.Controllers.AbstractForceController.DecayModes.InverseSquare: 
                        {
                            if (distance < this.DecayStart) {
                                return 1.0;
                            } else {
                                return 1.0 / ((distance - this.DecayStart) * (distance - this.DecayStart));
                            }
                        }
                    case FarseerPhysics.Controllers.AbstractForceController.DecayModes.Curve: 
                        {
                            if (distance < this.DecayStart) {
                                return 1.0;
                            } else {
                                return this.DecayCurve.Evaluate(distance - this.DecayStart);
                            }
                        }
                    default: 
                        return 1.0;
                }
            },
            /**
             * Triggers the trigger modes (Trigger and Curve)
             *
             * @instance
             * @public
             * @this FarseerPhysics.Controllers.AbstractForceController
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @return  {void}
             */
            Trigger: function () {
                this.Triggered = true;
                this.ImpulseTime = 0;
            },
            /**
             * Inherited from Controller
             Depending on the TimingMode perform timing logic and call ApplyForce()
             *
             * @instance
             * @public
             * @override
             * @this FarseerPhysics.Controllers.AbstractForceController
             * @memberof FarseerPhysics.Controllers.AbstractForceController
             * @param   {number}    dt
             * @return  {void}
             */
            Update: function (dt) {
                switch (this.TimingMode) {
                    case FarseerPhysics.Controllers.AbstractForceController.TimingModes.Switched: 
                        {
                            if (this.Enabled) {
                                this.ApplyForce(dt, this.Strength);
                            }
                            break;
                        }
                    case FarseerPhysics.Controllers.AbstractForceController.TimingModes.Triggered: 
                        {
                            if (this.Enabled && this.Triggered) {
                                if (this.ImpulseTime < this.ImpulseLength) {
                                    this.ApplyForce(dt, this.Strength);
                                    this.ImpulseTime += dt;
                                } else {
                                    this.Triggered = false;
                                }
                            }
                            break;
                        }
                    case FarseerPhysics.Controllers.AbstractForceController.TimingModes.Curve: 
                        {
                            if (this.Enabled && this.Triggered) {
                                if (this.ImpulseTime < this.ImpulseLength) {
                                    this.ApplyForce(dt, this.Strength * this.StrengthCurve.Evaluate(this.ImpulseTime));
                                    this.ImpulseTime += dt;
                                } else {
                                    this.Triggered = false;
                                }
                            }
                            break;
                        }
                }
            }
        }
    });

    Bridge.define("FarseerPhysics.Controllers.BuoyancyController", {
        inherits: [FarseerPhysics.Controllers.Controller],
        fields: {
            /**
             * Controls the rotational drag that the fluid exerts on the bodies within it. Use higher values will simulate thick fluid, like honey, lower values to
             simulate water-like fluids.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.BuoyancyController
             * @type number
             */
            AngularDragCoefficient: 0,
            /**
             * Density of the fluid. Higher values will make things more buoyant, lower values will cause things to sink.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.BuoyancyController
             * @type number
             */
            Density: 0,
            /**
             * Controls the linear drag that the fluid exerts on the bodies within it.  Use higher values will simulate thick fluid, like honey, lower values to
             simulate water-like fluids.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.BuoyancyController
             * @type number
             */
            LinearDragCoefficient: 0,
            /**
             * Acts like waterflow. Defaults to 0,0.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.BuoyancyController
             * @type Microsoft.Xna.Framework.Vector2
             */
            Velocity: null,
            _container: null,
            _gravity: null,
            _normal: null,
            _offset: 0,
            _uniqueBodies: null
        },
        props: {
            Container: {
                get: function () {
                    return this._container.$clone();
                },
                set: function (value) {
                    this._container = value.$clone();
                    this._offset = this._container.UpperBound.Y;
                }
            }
        },
        ctors: {
            init: function () {
                this.Velocity = new Microsoft.Xna.Framework.Vector2();
                this._container = new FarseerPhysics.Collision.AABB();
                this._gravity = new Microsoft.Xna.Framework.Vector2();
                this._normal = new Microsoft.Xna.Framework.Vector2();
                this._uniqueBodies = new (System.Collections.Generic.Dictionary$2(System.Int32,FarseerPhysics.Dynamics.Body))();
            },
            /**
             * Initializes a new instance of the {@link } class.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Controllers.BuoyancyController
             * @memberof FarseerPhysics.Controllers.BuoyancyController
             * @param   {FarseerPhysics.Collision.AABB}      container                    Only bodies inside this AABB will be influenced by the controller
             * @param   {number}                             density                      Density of the fluid
             * @param   {number}                             linearDragCoefficient        Linear drag coefficient of the fluid
             * @param   {number}                             rotationalDragCoefficient    Rotational drag coefficient of the fluid
             * @param   {Microsoft.Xna.Framework.Vector2}    gravity                      The direction gravity acts. Buoyancy force will act in opposite direction of gravity.
             * @return  {void}
             */
            ctor: function (container, density, linearDragCoefficient, rotationalDragCoefficient, gravity) {
                this.$initialize();
                FarseerPhysics.Controllers.Controller.ctor.call(this, FarseerPhysics.Controllers.ControllerType.BuoyancyController);
                this.Container = container.$clone();
                this._normal = new Microsoft.Xna.Framework.Vector2.$ctor2(0, 1);
                this.Density = density;
                this.LinearDragCoefficient = linearDragCoefficient;
                this.AngularDragCoefficient = rotationalDragCoefficient;
                this._gravity = gravity.$clone();
            }
        },
        methods: {
            Update: function (dt) {
                var $t;
                this._uniqueBodies.clear();
                this.World.QueryAABB(Bridge.fn.bind(this, function (fixture) {
                    if (fixture.Body.IsStatic || !fixture.Body.Awake) {
                        return true;
                    }

                    if (!this._uniqueBodies.containsKey(fixture.Body.BodyId)) {
                        this._uniqueBodies.add(fixture.Body.BodyId, fixture.Body);
                    }

                    return true;
                }), Bridge.ref(this, "_container"));

                $t = Bridge.getEnumerator(this._uniqueBodies);
                try {
                    while ($t.moveNext()) {
                        var kv = $t.Current;
                        var body = kv.value;

                        var areac = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                        var massc = Microsoft.Xna.Framework.Vector2.Zero.$clone();
                        var area = 0;
                        var mass = 0;

                        for (var j = 0; j < body.FixtureList.Count; j = (j + 1) | 0) {
                            var fixture = body.FixtureList.getItem(j);

                            if (fixture.Shape.ShapeType !== FarseerPhysics.Collision.Shapes.ShapeType.Polygon && fixture.Shape.ShapeType !== FarseerPhysics.Collision.Shapes.ShapeType.Circle) {
                                continue;
                            }

                            var shape = fixture.Shape;

                            var sc = { v : new Microsoft.Xna.Framework.Vector2() };
                            var sarea = shape.ComputeSubmergedArea(this._normal.$clone(), this._offset, body.Xf.$clone(), sc);
                            area += sarea;
                            areac.X += sarea * sc.v.X;
                            areac.Y += sarea * sc.v.Y;

                            mass += sarea * shape.Density;
                            massc.X += sarea * sc.v.X * shape.Density;
                            massc.Y += sarea * sc.v.Y * shape.Density;
                        }

                        areac.X /= area;
                        areac.Y /= area;
                        massc.X /= mass;
                        massc.Y /= mass;

                        if (area < FarseerPhysics.Settings.Epsilon) {
                            continue;
                        }

                        var buoyancyForce = Microsoft.Xna.Framework.Vector2.op_Multiply$2(-this.Density * area, this._gravity.$clone());
                        body.ApplyForce$1(buoyancyForce.$clone(), massc.$clone());

                        var dragForce = Microsoft.Xna.Framework.Vector2.op_Subtraction(body.GetLinearVelocityFromWorldPoint(areac.$clone()), this.Velocity.$clone());
                        dragForce = Microsoft.Xna.Framework.Vector2.op_Multiply$1(dragForce.$clone(), -this.LinearDragCoefficient * area);
                        body.ApplyForce$1(dragForce.$clone(), areac.$clone());

                        body.ApplyTorque(-body.Inertia / body.Mass * area * body.AngularVelocity * this.AngularDragCoefficient);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }}
        }
    });

    Bridge.define("FarseerPhysics.Controllers.GravityController", {
        inherits: [FarseerPhysics.Controllers.Controller],
        fields: {
            Bodies: null,
            Points: null,
            MinRadius: 0,
            MaxRadius: 0,
            Strength: 0,
            GravityType: 0
        },
        ctors: {
            init: function () {
                this.Bodies = new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Body)).ctor();
                this.Points = new (System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector2)).ctor();
            },
            ctor: function (strength) {
                this.$initialize();
                FarseerPhysics.Controllers.Controller.ctor.call(this, FarseerPhysics.Controllers.ControllerType.GravityController);
                this.Strength = strength;
                this.MaxRadius = 3.40282347E+38;
            },
            $ctor1: function (strength, maxRadius, minRadius) {
                this.$initialize();
                FarseerPhysics.Controllers.Controller.ctor.call(this, FarseerPhysics.Controllers.ControllerType.GravityController);
                this.MinRadius = minRadius;
                this.MaxRadius = maxRadius;
                this.Strength = strength;
            }
        },
        methods: {
            Update: function (dt) {
                var $t, $t1, $t2;
                var f = { v : Microsoft.Xna.Framework.Vector2.Zero.$clone() };

                $t = Bridge.getEnumerator(this.World.BodyList);
                try {
                    while ($t.moveNext()) {
                        var body1 = $t.Current;
                        if (!this.IsActiveOn(body1)) {
                            continue;
                        }

                        $t1 = Bridge.getEnumerator(this.Bodies);
                        try {
                            while ($t1.moveNext()) {
                                var body2 = $t1.Current;
                                if (Bridge.referenceEquals(body1, body2) || (body1.IsStatic && body2.IsStatic) || !body2.Enabled) {
                                    continue;
                                }

                                var d = Microsoft.Xna.Framework.Vector2.op_Subtraction(body2.WorldCenter.$clone(), body1.WorldCenter.$clone());
                                var r2 = d.LengthSquared();

                                if (r2 < FarseerPhysics.Settings.Epsilon) {
                                    continue;
                                }

                                var r = d.Length();

                                if (r >= this.MaxRadius || r <= this.MinRadius) {
                                    continue;
                                }

                                switch (this.GravityType) {
                                    case FarseerPhysics.Controllers.GravityType.DistanceSquared: 
                                        f.v = Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.Strength / r2 / Math.sqrt(r2) * body1.Mass * body2.Mass, d.$clone());
                                        break;
                                    case FarseerPhysics.Controllers.GravityType.Linear: 
                                        f.v = Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.Strength / r2 * body1.Mass * body2.Mass, d.$clone());
                                        break;
                                }

                                body1.ApplyForce$2(f);
                                Microsoft.Xna.Framework.Vector2.Negate$1(f, f);
                                body2.ApplyForce$2(f);
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                        $t2 = Bridge.getEnumerator(this.Points);
                        try {
                            while ($t2.moveNext()) {
                                var point = $t2.Current.$clone();
                                var d1 = Microsoft.Xna.Framework.Vector2.op_Subtraction(point.$clone(), body1.Position.$clone());
                                var r21 = d1.LengthSquared();

                                if (r21 < FarseerPhysics.Settings.Epsilon) {
                                    continue;
                                }

                                var r1 = d1.Length();

                                if (r1 >= this.MaxRadius || r1 <= this.MinRadius) {
                                    continue;
                                }

                                switch (this.GravityType) {
                                    case FarseerPhysics.Controllers.GravityType.DistanceSquared: 
                                        f.v = Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.Strength / r21 / Math.sqrt(r21) * body1.Mass, d1.$clone());
                                        break;
                                    case FarseerPhysics.Controllers.GravityType.Linear: 
                                        f.v = Microsoft.Xna.Framework.Vector2.op_Multiply$2(this.Strength / r21 * body1.Mass, d1.$clone());
                                        break;
                                }

                                body1.ApplyForce$2(f);
                            }
                        } finally {
                            if (Bridge.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$Dispose();
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            AddBody: function (body) {
                this.Bodies.add(body);
            },
            AddPoint: function (point) {
                this.Points.add(point.$clone());
            }
        }
    });

    /**
     * Put a limit on the linear (translation - the movespeed) and angular (rotation) velocity
     of bodies added to this controller.
     *
     * @public
     * @class FarseerPhysics.Controllers.VelocityLimitController
     * @augments FarseerPhysics.Controllers.Controller
     */
    Bridge.define("FarseerPhysics.Controllers.VelocityLimitController", {
        inherits: [FarseerPhysics.Controllers.Controller],
        fields: {
            LimitAngularVelocity: false,
            LimitLinearVelocity: false,
            _bodies: null,
            _maxAngularSqared: 0,
            _maxAngularVelocity: 0,
            _maxLinearSqared: 0,
            _maxLinearVelocity: 0
        },
        props: {
            /**
             * Gets or sets the max angular velocity.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.VelocityLimitController
             * @function MaxAngularVelocity
             * @type number
             */
            MaxAngularVelocity: {
                get: function () {
                    return this._maxAngularVelocity;
                },
                set: function (value) {
                    this._maxAngularVelocity = value;
                    this._maxAngularSqared = this._maxAngularVelocity * this._maxAngularVelocity;
                }
            },
            /**
             * Gets or sets the max linear velocity.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.VelocityLimitController
             * @function MaxLinearVelocity
             * @type number
             */
            MaxLinearVelocity: {
                get: function () {
                    return this._maxLinearVelocity;
                },
                set: function (value) {
                    this._maxLinearVelocity = value;
                    this._maxLinearSqared = this._maxLinearVelocity * this._maxLinearVelocity;
                }
            }
        },
        ctors: {
            init: function () {
                this.LimitAngularVelocity = true;
                this.LimitLinearVelocity = true;
                this._bodies = new (System.Collections.Generic.List$1(FarseerPhysics.Dynamics.Body)).ctor();
            },
            /**
             * Initializes a new instance of the {@link } class.
             Sets the max linear velocity to Settings.MaxTranslation
             Sets the max angular velocity to Settings.MaxRotation
             *
             * @instance
             * @public
             * @this FarseerPhysics.Controllers.VelocityLimitController
             * @memberof FarseerPhysics.Controllers.VelocityLimitController
             * @return  {void}
             */
            ctor: function () {
                this.$initialize();
                FarseerPhysics.Controllers.Controller.ctor.call(this, FarseerPhysics.Controllers.ControllerType.VelocityLimitController);
                this.MaxLinearVelocity = FarseerPhysics.Settings.MaxTranslation;
                this.MaxAngularVelocity = FarseerPhysics.Settings.MaxRotation;
            },
            /**
             * Initializes a new instance of the {@link } class.
             Pass in 0 or float.MaxValue to disable the limit.
             maxAngularVelocity = 0 will disable the angular velocity limit.
             *
             * @instance
             * @public
             * @this FarseerPhysics.Controllers.VelocityLimitController
             * @memberof FarseerPhysics.Controllers.VelocityLimitController
             * @param   {number}    maxLinearVelocity     The max linear velocity.
             * @param   {number}    maxAngularVelocity    The max angular velocity.
             * @return  {void}
             */
            $ctor1: function (maxLinearVelocity, maxAngularVelocity) {
                this.$initialize();
                FarseerPhysics.Controllers.Controller.ctor.call(this, FarseerPhysics.Controllers.ControllerType.VelocityLimitController);
                if (maxLinearVelocity === 0 || maxLinearVelocity === 3.40282347E+38) {
                    this.LimitLinearVelocity = false;
                }

                if (maxAngularVelocity === 0 || maxAngularVelocity === 3.40282347E+38) {
                    this.LimitAngularVelocity = false;
                }

                this.MaxLinearVelocity = maxLinearVelocity;
                this.MaxAngularVelocity = maxAngularVelocity;
            }
        },
        methods: {
            Update: function (dt) {
                var $t;
                $t = Bridge.getEnumerator(this._bodies);
                try {
                    while ($t.moveNext()) {
                        var body = $t.Current;
                        if (!this.IsActiveOn(body)) {
                            continue;
                        }

                        if (this.LimitLinearVelocity) {
                            var translationX = dt * body.LinearVelocityInternal.X;
                            var translationY = dt * body.LinearVelocityInternal.Y;
                            var result = translationX * translationX + translationY * translationY;

                            if (result > dt * this._maxLinearSqared) {
                                var sq = Math.sqrt(result);

                                var ratio = this._maxLinearVelocity / sq;
                                body.LinearVelocityInternal.X *= ratio;
                                body.LinearVelocityInternal.Y *= ratio;
                            }
                        }

                        if (this.LimitAngularVelocity) {
                            var rotation = dt * body.AngularVelocityInternal;
                            if (rotation * rotation > this._maxAngularSqared) {
                                var ratio1 = this._maxAngularVelocity / Math.abs(rotation);
                                body.AngularVelocityInternal *= ratio1;
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            AddBody: function (body) {
                this._bodies.add(body);
            },
            RemoveBody: function (body) {
                this._bodies.remove(body);
            }
        }
    });

    Bridge.define("Poly2Tri.Triangulation.Sets.ConstrainedPointSet", {
        inherits: [Poly2Tri.Triangulation.Sets.PointSet],
        fields: {
            _constrainedPointList: null,
            EdgeIndex: null
        },
        props: {
            TriangulationMode: {
                get: function () {
                    return Poly2Tri.Triangulation.TriangulationMode.Constrained;
                }
            }
        },
        alias: [
            "TriangulationMode", "Poly2Tri$Triangulation$Triangulatable$TriangulationMode",
            "PrepareTriangulation", "Poly2Tri$Triangulation$Triangulatable$PrepareTriangulation"
        ],
        ctors: {
            $ctor1: function (points, index) {
                this.$initialize();
                Poly2Tri.Triangulation.Sets.PointSet.ctor.call(this, points);
                this.EdgeIndex = index;
            },
            ctor: function (points, constraints) {
                this.$initialize();
                Poly2Tri.Triangulation.Sets.PointSet.ctor.call(this, points);
                this._constrainedPointList = new (System.Collections.Generic.List$1(Poly2Tri.Triangulation.TriangulationPoint)).ctor();
                this._constrainedPointList.AddRange(constraints);
            }
        },
        methods: {
            PrepareTriangulation: function (tcx) {
                var $t, $t1;
                Poly2Tri.Triangulation.Sets.PointSet.prototype.PrepareTriangulation.call(this, tcx);
                if (this._constrainedPointList != null) {
                    var p1, p2;
                    var iterator = this._constrainedPointList.GetEnumerator();
                    while (iterator.moveNext()) {
                        p1 = iterator.Current;
                        iterator.moveNext();
                        p2 = iterator.Current;
                        tcx.NewConstraint(p1, p2);
                    }
                } else {
                    for (var i = 0; i < this.EdgeIndex.length; i = (i + 2) | 0) {
                        tcx.NewConstraint(System.Array.getItem(this.Points, ($t = this.EdgeIndex)[System.Array.index(i, $t)], Poly2Tri.Triangulation.TriangulationPoint), System.Array.getItem(this.Points, ($t1 = this.EdgeIndex)[System.Array.index(((i + 1) | 0), $t1)], Poly2Tri.Triangulation.TriangulationPoint));
                    }
                }
            },
            isValid: function () {
                return true;
            }
        }
    });

    /**
     * Reference implementation for forces based on AbstractForceController
     It supports all features provided by the base class and illustrates proper
     usage as an easy to understand example.
     As a side-effect it is a nice and easy to use wind force for your projects
     *
     * @public
     * @class FarseerPhysics.Controllers.SimpleWindForce
     * @augments FarseerPhysics.Controllers.AbstractForceController
     */
    Bridge.define("FarseerPhysics.Controllers.SimpleWindForce", {
        inherits: [FarseerPhysics.Controllers.AbstractForceController],
        fields: {
            /**
             * Direction of the windforce
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.SimpleWindForce
             * @function Direction
             * @type Microsoft.Xna.Framework.Vector2
             */
            Direction: null,
            /**
             * The amount of Direction randomization. Allowed range is 0-1.
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.SimpleWindForce
             * @function Divergence
             * @type number
             */
            Divergence: 0,
            /**
             * Ignore the position and apply the force. If off only in the "front" (relative to position and direction)
             will be affected
             *
             * @instance
             * @public
             * @memberof FarseerPhysics.Controllers.SimpleWindForce
             * @function IgnorePosition
             * @type boolean
             */
            IgnorePosition: false
        },
        ctors: {
            init: function () {
                this.Direction = new Microsoft.Xna.Framework.Vector2();
            }
        },
        methods: {
            ApplyForce: function (dt, strength) {
                var $t;
                $t = Bridge.getEnumerator(this.World.BodyList);
                try {
                    while ($t.moveNext()) {
                        var body = $t.Current;
                        var decayMultiplier = this.GetDecayMultiplier(body);

                        if (decayMultiplier !== 0) {
                            var forceVector = new Microsoft.Xna.Framework.Vector2();

                            if (this.ForceType === FarseerPhysics.Controllers.AbstractForceController.ForceTypes.Point) {
                                forceVector = Microsoft.Xna.Framework.Vector2.op_Subtraction(body.Position.$clone(), this.Position.$clone());
                            } else {
                                this.Direction.Normalize();

                                forceVector = this.Direction.$clone();

                                if (forceVector.Length() === 0) {
                                    forceVector = new Microsoft.Xna.Framework.Vector2.$ctor2(0, 1);
                                }
                            }


                            if (this.Variation !== 0) {
                                var strengthVariation = this.Randomize.NextDouble() * Microsoft.Xna.Framework.MathHelper.Clamp$1(this.Variation, 0, 1);
                                forceVector.Normalize();
                                body.ApplyForce(Microsoft.Xna.Framework.Vector2.op_Multiply$1(Microsoft.Xna.Framework.Vector2.op_Multiply$1(Microsoft.Xna.Framework.Vector2.op_Multiply$1(forceVector.$clone(), strength), decayMultiplier), strengthVariation));
                            } else {
                                forceVector.Normalize();
                                body.ApplyForce(Microsoft.Xna.Framework.Vector2.op_Multiply$1(Microsoft.Xna.Framework.Vector2.op_Multiply$1(forceVector.$clone(), strength), decayMultiplier));
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }}
        }
    });
});

//# sourceMappingURL=data:application/json;base64,
